pub async fn fastcrypto::SignatureService::request_signature(&mut self, digest: Digest) -> Signature
pub const fastcrypto::DIGEST_LEN: usize = 32usize
pub const fastcrypto::bls12381::BLS12381PrivateKey::LENGTH: usize
pub const fastcrypto::bls12381::BLS12381PublicKey::LENGTH: usize
pub const fastcrypto::bls12381::BLS12381Signature::LENGTH: usize
pub const fastcrypto::bls12381::BLS_PRIVATE_KEY_LENGTH: usize = 32usize
pub const fastcrypto::bls12381::BLS_PUBLIC_KEY_LENGTH: usize = 96usize
pub const fastcrypto::bls12381::BLS_SIGNATURE_LENGTH: usize = 48usize
pub const fastcrypto::bls12381::DST: &'static [u8]
pub const fastcrypto::ed25519::ED25519_PRIVATE_KEY_LENGTH: usize = 32usize
pub const fastcrypto::ed25519::ED25519_PUBLIC_KEY_LENGTH: usize = 32usize
pub const fastcrypto::ed25519::ED25519_SIGNATURE_LENGTH: usize = 64usize
pub const fastcrypto::ed25519::Ed25519PrivateKey::LENGTH: usize
pub const fastcrypto::ed25519::Ed25519PublicKey::LENGTH: usize
pub const fastcrypto::ed25519::Ed25519Signature::LENGTH: usize
pub const fastcrypto::secp256k1::RECOVERABLE_SIGNATURE_SIZE: usize = 65usize
pub const fastcrypto::secp256k1::Secp256k1PrivateKey::LENGTH: usize
pub const fastcrypto::secp256k1::Secp256k1PublicKey::LENGTH: usize
pub const fastcrypto::secp256k1::Secp256k1Signature::LENGTH: usize
pub const fastcrypto::traits::Authenticator::LENGTH: usize
pub const fastcrypto::traits::SigningKey::LENGTH: usize
pub const fastcrypto::traits::VerifyingKey::LENGTH: usize
pub enum fastcrypto::error::FastCryptoError
pub enum variant fastcrypto::error::FastCryptoError::GeneralError
pub enum variant fastcrypto::error::FastCryptoError::InputTooLong(usize)
pub enum variant fastcrypto::error::FastCryptoError::InputTooShort(usize)
pub enum variant fastcrypto::error::FastCryptoError::InvalidInput
pub fn fastcrypto::Digest::as_ref(&self) -> &[u8]
pub fn fastcrypto::Digest::clone(&self) -> Digest
pub fn fastcrypto::Digest::cmp(&self, other: &Digest) -> $crate::cmp::Ordering
pub fn fastcrypto::Digest::default() -> Digest
pub fn fastcrypto::Digest::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn fastcrypto::Digest::eq(&self, other: &Digest) -> bool
pub fn fastcrypto::Digest::fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error>
pub fn fastcrypto::Digest::fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error>
pub fn fastcrypto::Digest::hash<__H: $crate::hash::Hasher>(&self, state: &mut __H) -> ()
pub fn fastcrypto::Digest::new(val: [u8; 32]) -> Self
pub fn fastcrypto::Digest::partial_cmp(&self, other: &Digest) -> $crate::option::Option<$crate::cmp::Ordering>
pub fn fastcrypto::Digest::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn fastcrypto::Digest::size(&self) -> usize
pub fn fastcrypto::Digest::to_vec(&self) -> Vec<u8>
pub fn fastcrypto::Hash::digest(&self) -> <Self as >::TypedDigest
pub fn fastcrypto::SignatureService::clone(&self) -> SignatureService<Signature>
pub fn fastcrypto::SignatureService::new<S>(signer: S) -> Self where S: signature::Signer<Signature> + Send + 'static
pub fn fastcrypto::Verifier::verify(&self, msg: &[u8], signature: &S) -> Result<(), Error>
pub fn fastcrypto::_::as_bytes(&self) -> &[u8]
pub fn fastcrypto::_::from_bytes(bytes: &[u8]) -> Result<Self, Error>
pub fn fastcrypto::aes::AesCbc::decrypt(&self, iv: &<Self as >::IVType, ciphertext: &[u8]) -> Result<Vec<u8>, signature::Error>
pub fn fastcrypto::aes::AesCbc::encrypt(&self, iv: &<Self as >::IVType, plaintext: &[u8]) -> Result<Vec<u8>, signature::Error>
pub fn fastcrypto::aes::AesCbc::new(key: AesKey<KeySize>) -> Self
pub fn fastcrypto::aes::AesCtr::decrypt(&self, iv: &<Self as >::IVType, ciphertext: &[u8]) -> Result<Vec<u8>, signature::Error>
pub fn fastcrypto::aes::AesCtr::encrypt(&self, iv: &<Self as >::IVType, plaintext: &[u8]) -> Result<Vec<u8>, signature::Error>
pub fn fastcrypto::aes::AesCtr::new(key: AesKey<KeySize>) -> Self
pub fn fastcrypto::aes::AesGcm::decrypt(&self, iv: &<Self as >::IVType, ciphertext: &[u8]) -> Result<Vec<u8>, signature::Error>
pub fn fastcrypto::aes::AesGcm::decrypt_authenticated(&self, iv: &<Self as >::IVType, aad: &[u8], ciphertext: &[u8]) -> Result<Vec<u8>, signature::Error>
pub fn fastcrypto::aes::AesGcm::encrypt(&self, iv: &<Self as >::IVType, plaintext: &[u8]) -> Result<Vec<u8>, signature::Error>
pub fn fastcrypto::aes::AesGcm::encrypt_authenticated(&self, iv: &<Self as >::IVType, aad: &[u8], plaintext: &[u8]) -> Result<Vec<u8>, signature::Error>
pub fn fastcrypto::aes::AesGcm::new(key: AesKey<KeySize>) -> Self
pub fn fastcrypto::aes::GenericByteArray::as_bytes(&self) -> &[u8]
pub fn fastcrypto::aes::GenericByteArray::as_ref(&self) -> &[u8]
pub fn fastcrypto::aes::GenericByteArray::clone(&self) -> GenericByteArray<N>
pub fn fastcrypto::aes::GenericByteArray::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn fastcrypto::aes::GenericByteArray::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::aes::GenericByteArray::from_bytes(bytes: &[u8]) -> Result<Self, signature::Error>
pub fn fastcrypto::aes::GenericByteArray::generate<R: rand::CryptoRng + rand::RngCore>(rng: &mut R) -> AesKey<N>
pub fn fastcrypto::aes::GenericByteArray::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn fastcrypto::blake2b_256<F: Fn(&mut blake2::VarBlake2b)>(closure: F) -> [u8; 32]
pub fn fastcrypto::bls12381::BLS12381AggregateSignature::add_aggregate(&mut self, signature: Self) -> Result<(), signature::Error>
pub fn fastcrypto::bls12381::BLS12381AggregateSignature::add_signature(&mut self, signature: <Self as >::Sig) -> Result<(), signature::Error>
pub fn fastcrypto::bls12381::BLS12381AggregateSignature::aggregate(signatures: Vec<<Self as >::Sig>) -> Result<Self, signature::Error>
pub fn fastcrypto::bls12381::BLS12381AggregateSignature::as_ref(&self) -> &[u8]
pub fn fastcrypto::bls12381::BLS12381AggregateSignature::batch_verify<'a>(signatures: &[&Self], pks: Vec<impl Iterator<Item = &'a <Self as >::PubKey>>, messages: &[&[u8]]) -> Result<(), signature::Error>
pub fn fastcrypto::bls12381::BLS12381AggregateSignature::clone(&self) -> BLS12381AggregateSignature
pub fn fastcrypto::bls12381::BLS12381AggregateSignature::default() -> Self
pub fn fastcrypto::bls12381::BLS12381AggregateSignature::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn fastcrypto::bls12381::BLS12381AggregateSignature::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::bls12381::BLS12381AggregateSignature::fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error>
pub fn fastcrypto::bls12381::BLS12381AggregateSignature::from_bytes(bytes: &[u8]) -> Result<Self, signature::Error>
pub fn fastcrypto::bls12381::BLS12381AggregateSignature::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn fastcrypto::bls12381::BLS12381AggregateSignature::verify(&self, pks: &[<<Self as >::Sig as Authenticator>::PubKey], message: &[u8]) -> Result<(), signature::Error>
pub fn fastcrypto::bls12381::BLS12381KeyPair::decode_base64(value: &str) -> Result<Self, eyre::Report>
pub fn fastcrypto::bls12381::BLS12381KeyPair::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn fastcrypto::bls12381::BLS12381KeyPair::drop(&mut self)
pub fn fastcrypto::bls12381::BLS12381KeyPair::encode_base64(&self) -> String
pub fn fastcrypto::bls12381::BLS12381KeyPair::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::bls12381::BLS12381KeyPair::from(secret: BLS12381PrivateKey) -> Self
pub fn fastcrypto::bls12381::BLS12381KeyPair::from_str(s: &str) -> Result<Self, <Self as >::Err>
pub fn fastcrypto::bls12381::BLS12381KeyPair::generate<R: rand::CryptoRng + rand::RngCore>(rng: &mut R) -> Self
pub fn fastcrypto::bls12381::BLS12381KeyPair::private(self) -> <Self as >::PrivKey
pub fn fastcrypto::bls12381::BLS12381KeyPair::public(&self) -> &<Self as >::PubKey
pub fn fastcrypto::bls12381::BLS12381KeyPair::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn fastcrypto::bls12381::BLS12381KeyPair::try_sign(&self, msg: &[u8]) -> Result<BLS12381Signature, signature::Error>
pub fn fastcrypto::bls12381::BLS12381KeyPair::zeroize(&mut self)
pub fn fastcrypto::bls12381::BLS12381PrivateKey::as_ref(&self) -> &[u8]
pub fn fastcrypto::bls12381::BLS12381PrivateKey::default() -> BLS12381PrivateKey
pub fn fastcrypto::bls12381::BLS12381PrivateKey::deserialize<D>(deserializer: D) -> Result<Self, <D as >::Error> where D: de::Deserializer<'de>
pub fn fastcrypto::bls12381::BLS12381PrivateKey::drop(&mut self)
pub fn fastcrypto::bls12381::BLS12381PrivateKey::fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result
pub fn fastcrypto::bls12381::BLS12381PrivateKey::fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result
pub fn fastcrypto::bls12381::BLS12381PrivateKey::from_bytes(bytes: &[u8]) -> Result<Self, signature::Error>
pub fn fastcrypto::bls12381::BLS12381PrivateKey::serialize<S>(&self, serializer: S) -> Result<<S as >::Ok, <S as >::Error> where S: serde::Serializer
pub fn fastcrypto::bls12381::BLS12381PrivateKey::try_sign(&self, msg: &[u8]) -> Result<BLS12381Signature, signature::Error>
pub fn fastcrypto::bls12381::BLS12381PrivateKey::zeroize(&mut self)
pub fn fastcrypto::bls12381::BLS12381PublicKey::as_ref(&self) -> &[u8]
pub fn fastcrypto::bls12381::BLS12381PublicKey::clone(&self) -> BLS12381PublicKey
pub fn fastcrypto::bls12381::BLS12381PublicKey::cmp(&self, other: &Self) -> std::cmp::Ordering
pub fn fastcrypto::bls12381::BLS12381PublicKey::default() -> BLS12381PublicKey
pub fn fastcrypto::bls12381::BLS12381PublicKey::deserialize<D>(deserializer: D) -> Result<Self, <D as >::Error> where D: de::Deserializer<'de>
pub fn fastcrypto::bls12381::BLS12381PublicKey::eq(&self, other: &Self) -> bool
pub fn fastcrypto::bls12381::BLS12381PublicKey::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::bls12381::BLS12381PublicKey::fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error>
pub fn fastcrypto::bls12381::BLS12381PublicKey::from(secret: &'a BLS12381PrivateKey) -> Self
pub fn fastcrypto::bls12381::BLS12381PublicKey::from_bytes(bytes: &[u8]) -> Result<Self, signature::Error>
pub fn fastcrypto::bls12381::BLS12381PublicKey::hash<H: std::hash::Hasher>(&self, state: &mut H)
pub fn fastcrypto::bls12381::BLS12381PublicKey::partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering>
pub fn fastcrypto::bls12381::BLS12381PublicKey::serialize<S>(&self, serializer: S) -> Result<<S as >::Ok, <S as >::Error> where S: serde::Serializer
pub fn fastcrypto::bls12381::BLS12381PublicKey::try_from(bytes: BLS12381PublicKeyBytes) -> Result<BLS12381PublicKey, <Self as >::Error>
pub fn fastcrypto::bls12381::BLS12381PublicKey::verify(&self, msg: &[u8], signature: &BLS12381Signature) -> Result<(), signature::Error>
pub fn fastcrypto::bls12381::BLS12381PublicKey::verify_batch_empty_fail(msg: &[u8], pks: &[Self], sigs: &[<Self as >::Sig]) -> Result<(), eyre::Report>
pub fn fastcrypto::bls12381::BLS12381PublicKeyBytes::from(pk: &BLS12381PublicKey) -> BLS12381PublicKeyBytes
pub fn fastcrypto::bls12381::BLS12381Signature::as_ref(&self) -> &[u8]
pub fn fastcrypto::bls12381::BLS12381Signature::clone(&self) -> BLS12381Signature
pub fn fastcrypto::bls12381::BLS12381Signature::default() -> Self
pub fn fastcrypto::bls12381::BLS12381Signature::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn fastcrypto::bls12381::BLS12381Signature::eq(&self, other: &Self) -> bool
pub fn fastcrypto::bls12381::BLS12381Signature::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::bls12381::BLS12381Signature::fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error>
pub fn fastcrypto::bls12381::BLS12381Signature::from_bytes(bytes: &[u8]) -> Result<Self, signature::Error>
pub fn fastcrypto::bls12381::BLS12381Signature::hash<H: std::hash::Hasher>(&self, state: &mut H)
pub fn fastcrypto::bls12381::BLS12381Signature::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn fastcrypto::bulletproofs::BulletproofsRangeProof::as_ref(&self) -> &[u8]
pub fn fastcrypto::bulletproofs::BulletproofsRangeProof::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::bulletproofs::BulletproofsRangeProof::from_bytes(bytes: &[u8]) -> Result<Self, signature::Error>
pub fn fastcrypto::bulletproofs::BulletproofsRangeProof::prove_bit_length(value: u64, blinding: [u8; 32], bits: usize, domain: &'static [u8]) -> Result<(PedersenCommitment, Self), signature::Error>
pub fn fastcrypto::bulletproofs::BulletproofsRangeProof::verify_bit_length(&self, commitment: &PedersenCommitment, bits: usize, domain: &'static [u8]) -> Result<(), signature::Error>
pub fn fastcrypto::bulletproofs::PedersenCommitment::add(self, rhs: PedersenCommitment) -> PedersenCommitment
pub fn fastcrypto::bulletproofs::PedersenCommitment::as_ref(&self) -> &[u8]
pub fn fastcrypto::bulletproofs::PedersenCommitment::clone(&self) -> PedersenCommitment
pub fn fastcrypto::bulletproofs::PedersenCommitment::cmp(&self, other: &Self) -> std::cmp::Ordering
pub fn fastcrypto::bulletproofs::PedersenCommitment::deserialize<D>(deserializer: D) -> Result<Self, <D as >::Error> where D: de::Deserializer<'de>
pub fn fastcrypto::bulletproofs::PedersenCommitment::eq(&self, other: &Self) -> bool
pub fn fastcrypto::bulletproofs::PedersenCommitment::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::bulletproofs::PedersenCommitment::from_bytes(bytes: &[u8]) -> Result<Self, signature::Error>
pub fn fastcrypto::bulletproofs::PedersenCommitment::new(value: [u8; 32], blinding_factor: [u8; 32]) -> Self
pub fn fastcrypto::bulletproofs::PedersenCommitment::partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering>
pub fn fastcrypto::bulletproofs::PedersenCommitment::serialize<S>(&self, serializer: S) -> Result<<S as >::Ok, <S as >::Error> where S: serde::Serializer
pub fn fastcrypto::bulletproofs::PedersenCommitment::sub(self, rhs: PedersenCommitment) -> PedersenCommitment
pub fn fastcrypto::ed25519::Ed25519AggregateSignature::add_aggregate(&mut self, signature: Self) -> Result<(), signature::Error>
pub fn fastcrypto::ed25519::Ed25519AggregateSignature::add_signature(&mut self, signature: <Self as >::Sig) -> Result<(), signature::Error>
pub fn fastcrypto::ed25519::Ed25519AggregateSignature::aggregate(signatures: Vec<<Self as >::Sig>) -> Result<Self, signature::Error>
pub fn fastcrypto::ed25519::Ed25519AggregateSignature::batch_verify<'a>(sigs: &[&Self], pks: Vec<impl ExactSizeIterator<Item = &'a <Self as >::PubKey>>, messages: &[&[u8]]) -> Result<(), signature::Error>
pub fn fastcrypto::ed25519::Ed25519AggregateSignature::clone(&self) -> Ed25519AggregateSignature
pub fn fastcrypto::ed25519::Ed25519AggregateSignature::default() -> Ed25519AggregateSignature
pub fn fastcrypto::ed25519::Ed25519AggregateSignature::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn fastcrypto::ed25519::Ed25519AggregateSignature::eq(&self, other: &Ed25519AggregateSignature) -> bool
pub fn fastcrypto::ed25519::Ed25519AggregateSignature::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::ed25519::Ed25519AggregateSignature::fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error>
pub fn fastcrypto::ed25519::Ed25519AggregateSignature::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn fastcrypto::ed25519::Ed25519AggregateSignature::verify(&self, pks: &[<<Self as >::Sig as Authenticator>::PubKey], message: &[u8]) -> Result<(), signature::Error>
pub fn fastcrypto::ed25519::Ed25519KeyPair::decode_base64(value: &str) -> Result<Self, eyre::Report>
pub fn fastcrypto::ed25519::Ed25519KeyPair::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn fastcrypto::ed25519::Ed25519KeyPair::drop(&mut self)
pub fn fastcrypto::ed25519::Ed25519KeyPair::encode_base64(&self) -> String
pub fn fastcrypto::ed25519::Ed25519KeyPair::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::ed25519::Ed25519KeyPair::from(kp: ed25519_consensus::SigningKey) -> Self
pub fn fastcrypto::ed25519::Ed25519KeyPair::from(secret: Ed25519PrivateKey) -> Self
pub fn fastcrypto::ed25519::Ed25519KeyPair::from_str(s: &str) -> Result<Self, <Self as >::Err>
pub fn fastcrypto::ed25519::Ed25519KeyPair::generate<R: rand::CryptoRng + rand::RngCore>(rng: &mut R) -> Self
pub fn fastcrypto::ed25519::Ed25519KeyPair::private(self) -> <Self as >::PrivKey
pub fn fastcrypto::ed25519::Ed25519KeyPair::public(&self) -> &<Self as >::PubKey
pub fn fastcrypto::ed25519::Ed25519KeyPair::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn fastcrypto::ed25519::Ed25519KeyPair::try_sign(&self, msg: &[u8]) -> Result<Ed25519Signature, signature::Error>
pub fn fastcrypto::ed25519::Ed25519KeyPair::zeroize(&mut self)
pub fn fastcrypto::ed25519::Ed25519PrivateKey::as_ref(&self) -> &[u8]
pub fn fastcrypto::ed25519::Ed25519PrivateKey::deserialize<D>(deserializer: D) -> Result<Self, <D as >::Error> where D: de::Deserializer<'de>
pub fn fastcrypto::ed25519::Ed25519PrivateKey::drop(&mut self)
pub fn fastcrypto::ed25519::Ed25519PrivateKey::fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result
pub fn fastcrypto::ed25519::Ed25519PrivateKey::fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result
pub fn fastcrypto::ed25519::Ed25519PrivateKey::from_bytes(bytes: &[u8]) -> Result<Self, signature::Error>
pub fn fastcrypto::ed25519::Ed25519PrivateKey::serialize<S>(&self, serializer: S) -> Result<<S as >::Ok, <S as >::Error> where S: serde::Serializer
pub fn fastcrypto::ed25519::Ed25519PrivateKey::zeroize(&mut self)
pub fn fastcrypto::ed25519::Ed25519PublicKey::as_ref(&self) -> &[u8]
pub fn fastcrypto::ed25519::Ed25519PublicKey::clone(&self) -> Ed25519PublicKey
pub fn fastcrypto::ed25519::Ed25519PublicKey::cmp(&self, other: &Self) -> std::cmp::Ordering
pub fn fastcrypto::ed25519::Ed25519PublicKey::default() -> Self
pub fn fastcrypto::ed25519::Ed25519PublicKey::deserialize<D>(deserializer: D) -> Result<Self, <D as >::Error> where D: de::Deserializer<'de>
pub fn fastcrypto::ed25519::Ed25519PublicKey::eq(&self, other: &Ed25519PublicKey) -> bool
pub fn fastcrypto::ed25519::Ed25519PublicKey::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::ed25519::Ed25519PublicKey::fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error>
pub fn fastcrypto::ed25519::Ed25519PublicKey::from(secret: &'a Ed25519PrivateKey) -> Self
pub fn fastcrypto::ed25519::Ed25519PublicKey::from_bytes(bytes: &[u8]) -> Result<Self, signature::Error>
pub fn fastcrypto::ed25519::Ed25519PublicKey::hash<H: std::hash::Hasher>(&self, state: &mut H)
pub fn fastcrypto::ed25519::Ed25519PublicKey::partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering>
pub fn fastcrypto::ed25519::Ed25519PublicKey::serialize<S>(&self, serializer: S) -> Result<<S as >::Ok, <S as >::Error> where S: serde::Serializer
pub fn fastcrypto::ed25519::Ed25519PublicKey::try_from(bytes: Ed25519PublicKeyBytes) -> Result<Ed25519PublicKey, <Self as >::Error>
pub fn fastcrypto::ed25519::Ed25519PublicKey::verify(&self, msg: &[u8], signature: &Ed25519Signature) -> Result<(), signature::Error>
pub fn fastcrypto::ed25519::Ed25519PublicKey::verify_batch_empty_fail(msg: &[u8], pks: &[Self], sigs: &[<Self as >::Sig]) -> Result<(), eyre::Report>
pub fn fastcrypto::ed25519::Ed25519PublicKeyBytes::from(pk: &Ed25519PublicKey) -> Self
pub fn fastcrypto::ed25519::Ed25519Signature::as_ref(&self) -> &[u8]
pub fn fastcrypto::ed25519::Ed25519Signature::clone(&self) -> Ed25519Signature
pub fn fastcrypto::ed25519::Ed25519Signature::default() -> Self
pub fn fastcrypto::ed25519::Ed25519Signature::deserialize<D>(deserializer: D) -> Result<Self, <D as >::Error> where D: serde::Deserializer<'de>
pub fn fastcrypto::ed25519::Ed25519Signature::eq(&self, other: &Ed25519Signature) -> bool
pub fn fastcrypto::ed25519::Ed25519Signature::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::ed25519::Ed25519Signature::fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error>
pub fn fastcrypto::ed25519::Ed25519Signature::from_bytes(bytes: &[u8]) -> Result<Self, signature::Error>
pub fn fastcrypto::ed25519::Ed25519Signature::serialize<S>(&self, serializer: S) -> Result<<S as >::Ok, <S as >::Error> where S: serde::Serializer
pub fn fastcrypto::error::FastCryptoError::eq(&self, other: &FastCryptoError) -> bool
pub fn fastcrypto::error::FastCryptoError::fmt(&self, __formatter: &mut std::fmt::Formatter<'_>) -> std::fmt::Result
pub fn fastcrypto::error::FastCryptoError::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::generate_keypair<K: traits::KeyPair, R>(csprng: &mut R) -> K where R: CryptoRng + RngCore
pub fn fastcrypto::generate_production_keypair<K: traits::KeyPair>() -> K
pub fn fastcrypto::hmac::hkdf(ikm: &HkdfIkm, salt: &[u8], info: &[u8], output_length: usize) -> Result<Vec<u8>, FastCryptoError>
pub fn fastcrypto::hmac::hkdf_generate_from_ikm<H, K>(ikm: &[u8], salt: &[u8], info: &[u8]) -> Result<K, FastCryptoError> where H: CoreProxy + OutputSizeUser, <H as >::Core: HashMarker + UpdateCore + FixedOutputCore + BufferKindUser<BufferKind = Eager> + Default + Clone, <<H as >::Core as BlockSizeUser>::BlockSize: IsLess<U256>, Le<<<H as >::Core as BlockSizeUser>::BlockSize, U256>: NonZero, K: KeyPair
pub fn fastcrypto::hmac::hmac(key: &HmacKey, message: &[u8]) -> Digest
pub fn fastcrypto::private_seed::PrivateSeed::as_bytes(&self) -> &[u8]
pub fn fastcrypto::private_seed::PrivateSeed::as_ref(&self) -> &[u8]
pub fn fastcrypto::private_seed::PrivateSeed::drop(&mut self)
pub fn fastcrypto::private_seed::PrivateSeed::eq(&self, other: &PrivateSeed<usize, bool>) -> bool
pub fn fastcrypto::private_seed::PrivateSeed::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::private_seed::PrivateSeed::from_bytes(bytes: &[u8]) -> Result<Self, signature::Error>
pub fn fastcrypto::private_seed::PrivateSeed::zeroize(&mut self)
pub fn fastcrypto::pubkey_bytes::PublicKeyBytes::as_ref(&self) -> &[u8]
pub fn fastcrypto::pubkey_bytes::PublicKeyBytes::clone(&self) -> PublicKeyBytes<T, usize>
pub fn fastcrypto::pubkey_bytes::PublicKeyBytes::cmp(&self, other: &PublicKeyBytes<T, usize>) -> $crate::cmp::Ordering
pub fn fastcrypto::pubkey_bytes::PublicKeyBytes::default() -> Self
pub fn fastcrypto::pubkey_bytes::PublicKeyBytes::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn fastcrypto::pubkey_bytes::PublicKeyBytes::eq(&self, other: &PublicKeyBytes<T, usize>) -> bool
pub fn fastcrypto::pubkey_bytes::PublicKeyBytes::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::pubkey_bytes::PublicKeyBytes::fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>
pub fn fastcrypto::pubkey_bytes::PublicKeyBytes::from_bytes(bytes: &[u8]) -> Result<Self, signature::Error>
pub fn fastcrypto::pubkey_bytes::PublicKeyBytes::from_str(s: &str) -> Result<Self, <Self as >::Err>
pub fn fastcrypto::pubkey_bytes::PublicKeyBytes::hash<__H: $crate::hash::Hasher>(&self, state: &mut __H) -> ()
pub fn fastcrypto::pubkey_bytes::PublicKeyBytes::new(bytes: [u8; N]) -> PublicKeyBytes<T, usize> where PublicKeyBytes<T, usize>: SealedPublicKeyLength
pub fn fastcrypto::pubkey_bytes::PublicKeyBytes::partial_cmp(&self, other: &PublicKeyBytes<T, usize>) -> $crate::option::Option<$crate::cmp::Ordering>
pub fn fastcrypto::pubkey_bytes::PublicKeyBytes::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn fastcrypto::secp256k1::Secp256k1KeyPair::decode_base64(value: &str) -> Result<Self, eyre::Report>
pub fn fastcrypto::secp256k1::Secp256k1KeyPair::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn fastcrypto::secp256k1::Secp256k1KeyPair::drop(&mut self)
pub fn fastcrypto::secp256k1::Secp256k1KeyPair::encode_base64(&self) -> String
pub fn fastcrypto::secp256k1::Secp256k1KeyPair::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::secp256k1::Secp256k1KeyPair::from(secret: Secp256k1PrivateKey) -> Self
pub fn fastcrypto::secp256k1::Secp256k1KeyPair::from_str(s: &str) -> Result<Self, <Self as >::Err>
pub fn fastcrypto::secp256k1::Secp256k1KeyPair::generate<R: rand::CryptoRng + rand::RngCore>(rng: &mut R) -> Self
pub fn fastcrypto::secp256k1::Secp256k1KeyPair::private(self) -> <Self as >::PrivKey
pub fn fastcrypto::secp256k1::Secp256k1KeyPair::public(&self) -> &<Self as >::PubKey
pub fn fastcrypto::secp256k1::Secp256k1KeyPair::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn fastcrypto::secp256k1::Secp256k1KeyPair::try_sign(&self, msg: &[u8]) -> Result<Secp256k1Signature, signature::Error>
pub fn fastcrypto::secp256k1::Secp256k1KeyPair::zeroize(&mut self)
pub fn fastcrypto::secp256k1::Secp256k1PrivateKey::as_ref(&self) -> &[u8]
pub fn fastcrypto::secp256k1::Secp256k1PrivateKey::deserialize<D>(deserializer: D) -> Result<Self, <D as >::Error> where D: de::Deserializer<'de>
pub fn fastcrypto::secp256k1::Secp256k1PrivateKey::drop(&mut self)
pub fn fastcrypto::secp256k1::Secp256k1PrivateKey::fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result
pub fn fastcrypto::secp256k1::Secp256k1PrivateKey::fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result
pub fn fastcrypto::secp256k1::Secp256k1PrivateKey::from_bytes(bytes: &[u8]) -> Result<Self, signature::Error>
pub fn fastcrypto::secp256k1::Secp256k1PrivateKey::serialize<S>(&self, serializer: S) -> Result<<S as >::Ok, <S as >::Error> where S: serde::Serializer
pub fn fastcrypto::secp256k1::Secp256k1PrivateKey::zeroize(&mut self)
pub fn fastcrypto::secp256k1::Secp256k1PublicKey::as_ref(&self) -> &[u8]
pub fn fastcrypto::secp256k1::Secp256k1PublicKey::clone(&self) -> Secp256k1PublicKey
pub fn fastcrypto::secp256k1::Secp256k1PublicKey::cmp(&self, other: &Self) -> std::cmp::Ordering
pub fn fastcrypto::secp256k1::Secp256k1PublicKey::default() -> Self
pub fn fastcrypto::secp256k1::Secp256k1PublicKey::deserialize<D>(deserializer: D) -> Result<Self, <D as >::Error> where D: de::Deserializer<'de>
pub fn fastcrypto::secp256k1::Secp256k1PublicKey::eq(&self, other: &Self) -> bool
pub fn fastcrypto::secp256k1::Secp256k1PublicKey::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::secp256k1::Secp256k1PublicKey::fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
pub fn fastcrypto::secp256k1::Secp256k1PublicKey::from(secret: &'a Secp256k1PrivateKey) -> Self
pub fn fastcrypto::secp256k1::Secp256k1PublicKey::from_bytes(bytes: &[u8]) -> Result<Self, signature::Error>
pub fn fastcrypto::secp256k1::Secp256k1PublicKey::hash<H: std::hash::Hasher>(&self, state: &mut H)
pub fn fastcrypto::secp256k1::Secp256k1PublicKey::partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering>
pub fn fastcrypto::secp256k1::Secp256k1PublicKey::serialize<S>(&self, serializer: S) -> Result<<S as >::Ok, <S as >::Error> where S: serde::Serializer
pub fn fastcrypto::secp256k1::Secp256k1PublicKey::try_from(bytes: Secp256k1PublicKeyBytes) -> Result<Secp256k1PublicKey, <Self as >::Error>
pub fn fastcrypto::secp256k1::Secp256k1PublicKey::verify(&self, msg: &[u8], signature: &Secp256k1Signature) -> Result<(), signature::Error>
pub fn fastcrypto::secp256k1::Secp256k1PublicKey::verify_hashed(&self, hased_msg: &[u8], signature: &Secp256k1Signature) -> Result<(), signature::Error>
pub fn fastcrypto::secp256k1::Secp256k1PublicKeyBytes::from(pk: &Secp256k1PublicKey) -> Self
pub fn fastcrypto::secp256k1::Secp256k1Signature::as_ref(&self) -> &[u8]
pub fn fastcrypto::secp256k1::Secp256k1Signature::clone(&self) -> Secp256k1Signature
pub fn fastcrypto::secp256k1::Secp256k1Signature::default() -> Self
pub fn fastcrypto::secp256k1::Secp256k1Signature::deserialize<D>(deserializer: D) -> Result<Self, <D as >::Error> where D: serde::Deserializer<'de>
pub fn fastcrypto::secp256k1::Secp256k1Signature::eq(&self, other: &Self) -> bool
pub fn fastcrypto::secp256k1::Secp256k1Signature::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn fastcrypto::secp256k1::Secp256k1Signature::fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error>
pub fn fastcrypto::secp256k1::Secp256k1Signature::from_bytes(bytes: &[u8]) -> Result<Self, signature::Error>
pub fn fastcrypto::secp256k1::Secp256k1Signature::hash<H: std::hash::Hasher>(&self, state: &mut H)
pub fn fastcrypto::secp256k1::Secp256k1Signature::recover(&self, hashed_msg: &[u8]) -> Result<Secp256k1PublicKey, signature::Error>
pub fn fastcrypto::secp256k1::Secp256k1Signature::serialize<S>(&self, serializer: S) -> Result<<S as >::Ok, <S as >::Error> where S: serde::Serializer
pub fn fastcrypto::serde_helpers::BlsSignature::deserialize_as<D>(deserializer: D) -> Result<blst::Signature, <D as >::Error> where D: Deserializer<'de>
pub fn fastcrypto::serde_helpers::BlsSignature::serialize_as<S>(source: &blst::Signature, serializer: S) -> Result<<S as >::Ok, <S as >::Error> where S: Serializer
pub fn fastcrypto::serde_helpers::Ed25519Signature::deserialize_as<D>(deserializer: D) -> Result<ed25519_consensus::Signature, <D as >::Error> where D: Deserializer<'de>
pub fn fastcrypto::serde_helpers::Ed25519Signature::serialize_as<S>(source: &ed25519_consensus::Signature, serializer: S) -> Result<<S as >::Ok, <S as >::Error> where S: Serializer
pub fn fastcrypto::serde_helpers::keypair_decode_base64<T: KeyPair>(value: &str) -> Result<T, eyre::Report>
pub fn fastcrypto::traits::AggregateAuthenticator::add_aggregate(&mut self, signature: Self) -> Result<(), Error>
pub fn fastcrypto::traits::AggregateAuthenticator::add_signature(&mut self, signature: <Self as >::Sig) -> Result<(), Error>
pub fn fastcrypto::traits::AggregateAuthenticator::aggregate(signatures: Vec<<Self as >::Sig>) -> Result<Self, Error>
pub fn fastcrypto::traits::AggregateAuthenticator::batch_verify<'a>(sigs: &[&Self], pks: Vec<impl ExactSizeIterator<Item = &'a <Self as >::PubKey>>, messages: &[&[u8]]) -> Result<(), Error>
pub fn fastcrypto::traits::AggregateAuthenticator::verify(&self, pks: &[<<Self as >::Sig as Authenticator>::PubKey], message: &[u8]) -> Result<(), Error>
pub fn fastcrypto::traits::AuthenticatedCipher::decrypt_authenticated(&self, iv: &<Self as >::IVType, aad: &[u8], ciphertext: &[u8]) -> Result<Vec<u8>, Error>
pub fn fastcrypto::traits::AuthenticatedCipher::encrypt_authenticated(&self, iv: &<Self as >::IVType, aad: &[u8], plaintext: &[u8]) -> Result<Vec<u8>, Error>
pub fn fastcrypto::traits::Cipher::decrypt(&self, iv: &<Self as >::IVType, ciphertext: &[u8]) -> Result<Vec<u8>, Error>
pub fn fastcrypto::traits::Cipher::encrypt(&self, iv: &<Self as >::IVType, plaintext: &[u8]) -> Result<Vec<u8>, Error>
pub fn fastcrypto::traits::EncodeDecodeBase64::decode_base64(value: &str) -> Result<Self, eyre::Report>
pub fn fastcrypto::traits::EncodeDecodeBase64::encode_base64(&self) -> String
pub fn fastcrypto::traits::FromUniformBytes::generate<R: rand::CryptoRng + rand::RngCore>(rng: &mut R) -> Self
pub fn fastcrypto::traits::Generate::generate<R: CryptoRng + RngCore>(rng: &mut R) -> Self
pub fn fastcrypto::traits::KeyPair::generate<R: CryptoRng + RngCore>(rng: &mut R) -> Self
pub fn fastcrypto::traits::KeyPair::private(self) -> <Self as >::PrivKey
pub fn fastcrypto::traits::KeyPair::public(&self) -> &<Self as >::PubKey
pub fn fastcrypto::traits::Signer::sign(&self, msg: &[u8]) -> S
pub fn fastcrypto::traits::Signer::try_sign(&self, msg: &[u8]) -> Result<S, Error>
pub fn fastcrypto::traits::ToFromBytes::as_bytes(&self) -> &[u8]
pub fn fastcrypto::traits::ToFromBytes::from_bytes(bytes: &[u8]) -> Result<Self, Error>
pub fn fastcrypto::traits::VerifyingKey::verify_batch_empty_fail(msg: &[u8], pks: &[Self], sigs: &[<Self as >::Sig]) -> Result<(), eyre::Report>
pub mod fastcrypto
pub mod fastcrypto::aes
pub mod fastcrypto::bls12381
pub mod fastcrypto::bulletproofs
pub mod fastcrypto::ed25519
pub mod fastcrypto::error
pub mod fastcrypto::hmac
pub mod fastcrypto::private_seed
pub mod fastcrypto::pubkey_bytes
pub mod fastcrypto::secp256k1
pub mod fastcrypto::serde_helpers
pub mod fastcrypto::traits
pub static fastcrypto::secp256k1::SECP256K1: Lazy<rust_secp256k1::Secp256k1<All>>
pub struct fastcrypto::Digest(_)
pub struct fastcrypto::SignatureService<Signature: traits::Authenticator>
pub struct fastcrypto::aes::AesCbc<KeySize: ArrayLength<u8>, Aes, Padding>
pub struct fastcrypto::aes::AesCtr<KeySize: ArrayLength<u8>, Aes>
pub struct fastcrypto::aes::AesGcm<KeySize: ArrayLength<u8>, Aes, NonceSize>
pub struct fastcrypto::aes::GenericByteArray<N: ArrayLength<u8>>
pub struct fastcrypto::bls12381::BLS12381AggregateSignature
pub struct fastcrypto::bls12381::BLS12381KeyPair
pub struct fastcrypto::bls12381::BLS12381PrivateKey
pub struct fastcrypto::bls12381::BLS12381PublicKey
pub struct fastcrypto::bls12381::BLS12381Signature
pub struct fastcrypto::bulletproofs::BulletproofsRangeProof
pub struct fastcrypto::bulletproofs::PedersenCommitment
pub struct fastcrypto::ed25519::Ed25519AggregateSignature(pub Vec<ed25519_consensus::Signature>)
pub struct fastcrypto::ed25519::Ed25519KeyPair
pub struct fastcrypto::ed25519::Ed25519PrivateKey(pub ed25519_consensus::SigningKey)
pub struct fastcrypto::ed25519::Ed25519PublicKey(pub ed25519_consensus::VerificationKey)
pub struct fastcrypto::ed25519::Ed25519Signature
pub struct fastcrypto::private_seed::PrivateSeed<const RECOMMENDED_LENGTH: usize, const FIXED_LENGTH_ONLY: bool>
pub struct fastcrypto::pubkey_bytes::PublicKeyBytes<T, const N: usize>
pub struct fastcrypto::secp256k1::Secp256k1KeyPair
pub struct fastcrypto::secp256k1::Secp256k1PrivateKey
pub struct fastcrypto::secp256k1::Secp256k1PublicKey
pub struct fastcrypto::secp256k1::Secp256k1Signature
pub struct fastcrypto::serde_helpers::BlsSignature
pub struct fastcrypto::serde_helpers::Ed25519Signature
pub struct field fastcrypto::bls12381::BLS12381AggregateSignature::bytes: OnceCell<[u8; 48]>
pub struct field fastcrypto::bls12381::BLS12381AggregateSignature::sig: Option<blst::Signature>
pub struct field fastcrypto::bls12381::BLS12381PrivateKey::bytes: OnceCell<[u8; 32]>
pub struct field fastcrypto::bls12381::BLS12381PrivateKey::privkey: blst::SecretKey
pub struct field fastcrypto::bls12381::BLS12381PublicKey::bytes: OnceCell<[u8; 96]>
pub struct field fastcrypto::bls12381::BLS12381PublicKey::pubkey: blst::PublicKey
pub struct field fastcrypto::bls12381::BLS12381Signature::bytes: OnceCell<[u8; 48]>
pub struct field fastcrypto::bls12381::BLS12381Signature::sig: blst::Signature
pub struct field fastcrypto::ed25519::Ed25519Signature::bytes: OnceCell<[u8; 64]>
pub struct field fastcrypto::ed25519::Ed25519Signature::sig: ed25519_consensus::Signature
pub struct field fastcrypto::secp256k1::Secp256k1KeyPair::name: Secp256k1PublicKey
pub struct field fastcrypto::secp256k1::Secp256k1KeyPair::secret: Secp256k1PrivateKey
pub struct field fastcrypto::secp256k1::Secp256k1PrivateKey::bytes: OnceCell<[u8; 32]>
pub struct field fastcrypto::secp256k1::Secp256k1PrivateKey::privkey: SecretKey
pub struct field fastcrypto::secp256k1::Secp256k1PublicKey::bytes: OnceCell<[u8; 33]>
pub struct field fastcrypto::secp256k1::Secp256k1PublicKey::pubkey: PublicKey
pub struct field fastcrypto::secp256k1::Secp256k1Signature::bytes: OnceCell<[u8; 65]>
pub struct field fastcrypto::secp256k1::Secp256k1Signature::sig: rust_secp256k1::ecdsa::RecoverableSignature
pub trait fastcrypto::Hash
pub trait fastcrypto::Verifier<S> where S: Signature
pub trait fastcrypto::_
pub trait fastcrypto::traits::AggregateAuthenticator
pub trait fastcrypto::traits::AuthenticatedCipher
pub trait fastcrypto::traits::Authenticator
pub trait fastcrypto::traits::Cipher
pub trait fastcrypto::traits::EncodeDecodeBase64
pub trait fastcrypto::traits::EncryptionKey
pub trait fastcrypto::traits::FromUniformBytes<const LENGTH: usize>
pub trait fastcrypto::traits::Generate
pub trait fastcrypto::traits::KeyPair
pub trait fastcrypto::traits::Nonce
pub trait fastcrypto::traits::Signer<S> where S: Signature
pub trait fastcrypto::traits::SigningKey
pub trait fastcrypto::traits::ToFromBytes
pub trait fastcrypto::traits::VerifyingKey
pub type fastcrypto::Hash::TypedDigestInto<Digest> + std::fmt::Display + std::hash::Hash + Eq + Ord + Copy
pub type fastcrypto::aes::Aes128CbcAnsiX923 = AesCbc<U16, aes::Aes128, aes::cipher::block_padding::AnsiX923>
pub type fastcrypto::aes::Aes128CbcIso10126 = AesCbc<U16, aes::Aes128, aes::cipher::block_padding::Iso10126>
pub type fastcrypto::aes::Aes128CbcPkcs7 = AesCbc<U16, aes::Aes128, aes::cipher::block_padding::Pkcs7>
pub type fastcrypto::aes::Aes128Ctr = AesCtr<U16, aes::Aes128>
pub type fastcrypto::aes::Aes128Gcm<NonceSize> = AesGcm<U16, aes::Aes128, NonceSize>
pub type fastcrypto::aes::Aes192Ctr = AesCtr<U24, aes::Aes192>
pub type fastcrypto::aes::Aes256CbcAnsiX923 = AesCbc<U32, aes::Aes256, aes::cipher::block_padding::AnsiX923>
pub type fastcrypto::aes::Aes256CbcIso10126 = AesCbc<U32, aes::Aes256, aes::cipher::block_padding::Iso10126>
pub type fastcrypto::aes::Aes256CbcPkcs7 = AesCbc<U32, aes::Aes256, aes::cipher::block_padding::Pkcs7>
pub type fastcrypto::aes::Aes256Ctr = AesCtr<U32, aes::Aes256>
pub type fastcrypto::aes::Aes256Gcm<NonceSize> = AesGcm<U32, aes::Aes256, NonceSize>
pub type fastcrypto::aes::AesCbc::IVType = GenericByteArray<UInt<UInt<UInt<UInt<UInt<UTerm, B1>, B0>, B0>, B0>, B0>>
pub type fastcrypto::aes::AesCtr::IVType = GenericByteArray<UInt<UInt<UInt<UInt<UInt<UTerm, B1>, B0>, B0>, B0>, B0>>
pub type fastcrypto::aes::AesGcm::IVType = GenericByteArray<NonceSize>
pub type fastcrypto::aes::AesGcm::IVType = GenericByteArray<NonceSize>
pub type fastcrypto::aes::AesKey<N> = GenericByteArray<N>
pub type fastcrypto::aes::InitializationVector<N> = GenericByteArray<N>
pub type fastcrypto::bls12381::BLS12381AggregateSignature::PrivKey = BLS12381PrivateKey
pub type fastcrypto::bls12381::BLS12381AggregateSignature::PubKey = BLS12381PublicKey
pub type fastcrypto::bls12381::BLS12381AggregateSignature::Sig = BLS12381Signature
pub type fastcrypto::bls12381::BLS12381KeyPair::Err = Report
pub type fastcrypto::bls12381::BLS12381KeyPair::PrivKey = BLS12381PrivateKey
pub type fastcrypto::bls12381::BLS12381KeyPair::PubKey = BLS12381PublicKey
pub type fastcrypto::bls12381::BLS12381KeyPair::Sig = BLS12381Signature
pub type fastcrypto::bls12381::BLS12381PrivateKey::PubKey = BLS12381PublicKey
pub type fastcrypto::bls12381::BLS12381PrivateKey::Sig = BLS12381Signature
pub type fastcrypto::bls12381::BLS12381PublicKey::Error = Error
pub type fastcrypto::bls12381::BLS12381PublicKey::PrivKey = BLS12381PrivateKey
pub type fastcrypto::bls12381::BLS12381PublicKey::Sig = BLS12381Signature
pub type fastcrypto::bls12381::BLS12381PublicKeyBytes = PublicKeyBytes<BLS12381PublicKey, usize>
pub type fastcrypto::bls12381::BLS12381Signature::PrivKey = BLS12381PrivateKey
pub type fastcrypto::bls12381::BLS12381Signature::PubKey = BLS12381PublicKey
pub type fastcrypto::bulletproofs::PedersenCommitment::Output = PedersenCommitment
pub type fastcrypto::bulletproofs::PedersenCommitment::Output = PedersenCommitment
pub type fastcrypto::ed25519::Ed25519AggregateSignature::PrivKey = Ed25519PrivateKey
pub type fastcrypto::ed25519::Ed25519AggregateSignature::PubKey = Ed25519PublicKey
pub type fastcrypto::ed25519::Ed25519AggregateSignature::Sig = Ed25519Signature
pub type fastcrypto::ed25519::Ed25519KeyPair::Err = Report
pub type fastcrypto::ed25519::Ed25519KeyPair::PrivKey = Ed25519PrivateKey
pub type fastcrypto::ed25519::Ed25519KeyPair::PubKey = Ed25519PublicKey
pub type fastcrypto::ed25519::Ed25519KeyPair::Sig = Ed25519Signature
pub type fastcrypto::ed25519::Ed25519PrivateKey::PubKey = Ed25519PublicKey
pub type fastcrypto::ed25519::Ed25519PrivateKey::Sig = Ed25519Signature
pub type fastcrypto::ed25519::Ed25519PublicKey::Error = Error
pub type fastcrypto::ed25519::Ed25519PublicKey::PrivKey = Ed25519PrivateKey
pub type fastcrypto::ed25519::Ed25519PublicKey::Sig = Ed25519Signature
pub type fastcrypto::ed25519::Ed25519PublicKeyBytes = PublicKeyBytes<Ed25519PublicKey, usize>
pub type fastcrypto::ed25519::Ed25519Signature::PrivKey = Ed25519PrivateKey
pub type fastcrypto::ed25519::Ed25519Signature::PubKey = Ed25519PublicKey
pub type fastcrypto::hmac::HkdfIkm = PrivateSeed<usize, bool>
pub type fastcrypto::hmac::HmacKey = PrivateSeed<usize, bool>
pub type fastcrypto::pubkey_bytes::PublicKeyBytes::Err = Report
pub type fastcrypto::secp256k1::Secp256k1KeyPair::Err = Report
pub type fastcrypto::secp256k1::Secp256k1KeyPair::PrivKey = Secp256k1PrivateKey
pub type fastcrypto::secp256k1::Secp256k1KeyPair::PubKey = Secp256k1PublicKey
pub type fastcrypto::secp256k1::Secp256k1KeyPair::Sig = Secp256k1Signature
pub type fastcrypto::secp256k1::Secp256k1PrivateKey::PubKey = Secp256k1PublicKey
pub type fastcrypto::secp256k1::Secp256k1PrivateKey::Sig = Secp256k1Signature
pub type fastcrypto::secp256k1::Secp256k1PublicKey::Error = Error
pub type fastcrypto::secp256k1::Secp256k1PublicKey::PrivKey = Secp256k1PrivateKey
pub type fastcrypto::secp256k1::Secp256k1PublicKey::Sig = Secp256k1Signature
pub type fastcrypto::secp256k1::Secp256k1PublicKeyBytes = PublicKeyBytes<Secp256k1PublicKey, usize>
pub type fastcrypto::secp256k1::Secp256k1Signature::PrivKey = Secp256k1PrivateKey
pub type fastcrypto::secp256k1::Secp256k1Signature::PubKey = Secp256k1PublicKey
pub type fastcrypto::traits::AggregateAuthenticator::PrivKeySigningKey<Sig = <Self as >::Sig>
pub type fastcrypto::traits::AggregateAuthenticator::PubKeyVerifyingKey<Sig = <Self as >::Sig>
pub type fastcrypto::traits::AggregateAuthenticator::SigAuthenticator<PubKey = <Self as >::PubKey>
pub type fastcrypto::traits::AuthenticatedCipher::IVTypeNonce
pub type fastcrypto::traits::Authenticator::PrivKeySigningKey<Sig = Self>
pub type fastcrypto::traits::Authenticator::PubKeyVerifyingKey<Sig = Self>
pub type fastcrypto::traits::Cipher::IVTypeNonce
pub type fastcrypto::traits::KeyPair::PrivKeySigningKey<PubKey = <Self as >::PubKey, Sig = <Self as >::Sig>
pub type fastcrypto::traits::KeyPair::PubKeyVerifyingKey<PrivKey = <Self as >::PrivKey, Sig = <Self as >::Sig>
pub type fastcrypto::traits::KeyPair::SigAuthenticator<PubKey = <Self as >::PubKey, PrivKey = <Self as >::PrivKey>
pub type fastcrypto::traits::SigningKey::PubKeyVerifyingKey<PrivKey = Self>
pub type fastcrypto::traits::SigningKey::SigAuthenticator<PrivKey = Self>
pub type fastcrypto::traits::VerifyingKey::PrivKeySigningKey<PubKey = Self>
pub type fastcrypto::traits::VerifyingKey::SigAuthenticator<PubKey = Self>
pub use fastcrypto::traits::Error
