// Copyright (c) 2022, Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

use crate::bn254::zk_login::{
    verify_zk_login_proof_with_fixed_vk, AuxInputs, OAuthProvider, PublicInputs, ZkLoginProof,
};

use super::ParsedMaskedContent;

#[test]
fn test_verify_groth16_in_bytes_api() {
    let aux_inputs = AuxInputs::from_json("{\"addr_seed\":\"15604334753912523265015800787270404628529489918817818174033741053550755333691\",\"eph_public_key\":[\"17932473587154777519561053972421347139\",\"134696963602902907403122104327765350261\"],\"jwt_sha2_hash\":[\"248987002057371616691124650904415756047\",\"113498781424543581252500776698433499823\"],\"jwt_signature\":\"\",\"key_claim_name\":\"sub\",\"masked_content\":[101,121,74,104,98,71,99,105,79,105,74,83,85,122,73,49,78,105,73,115,73,109,116,112,90,67,73,54,73,109,77,53,89,87,90,107,89,84,77,50,79,68,74,108,89,109,89,119,79,87,86,105,77,122,65,49,78,87,77,120,89,122,82,105,90,68,77,53,89,106,99,49,77,87,90,105,90,106,103,120,79,84,85,105,76,67,74,48,101,88,65,105,79,105,74,75,86,49,81,105,102,81,46,61,121,74,112,99,51,77,105,79,105,74,111,100,72,82,119,99,122,111,118,76,50,70,106,89,50,57,49,98,110,82,122,76,109,100,118,98,50,100,115,90,83,53,106,98,50,48,105,76,67,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,67,74,104,100,87,81,105,79,105,73,49,78,122,85,49,77,84,107,121,77,68,81,121,77,122,99,116,98,88,78,118,99,68,108,108,99,68,81,49,100,84,74,49,98,122,107,52,97,71,70,119,99,87,49,117,90,51,89,52,90,68,103,48,99,87,82,106,79,71,115,117,89,88,66,119,99,121,53,110,98,50,57,110,98,71,86,49,99,50,86,121,89,50,57,117,100,71,86,117,100,67,53,106,98,50,48,105,76,67,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"max_epoch\":10000,\"num_sha2_blocks\":11,\"payload_len\":564,\"payload_start_index\":103}").unwrap();
    let public_inputs = PublicInputs::from_json(
        "[\"2487117669597822357956926047501254969190518860900347921480370492048882803688\"]",
    )
    .unwrap();

    assert_eq!(
        aux_inputs.calculate_all_inputs_hash(),
        public_inputs.get_all_inputs_hash()
    );

    assert_eq!(
        aux_inputs.get_jwt_hash(),
        vec![
            187, 81, 38, 253, 76, 198, 157, 166, 214, 87, 161, 53, 77, 141, 223, 15, 85, 99, 17,
            247, 75, 248, 40, 150, 239, 21, 140, 190, 12, 123, 242, 175
        ]
    );
    assert_eq!(
        aux_inputs.get_eph_pub_key(),
        vec![
            13, 125, 171, 53, 140, 141, 173, 170, 78, 250, 0, 73, 167, 91, 7, 67, 101, 85, 177, 10,
            54, 130, 25, 187, 104, 15, 112, 87, 19, 73, 215, 117
        ]
    );
    assert_eq!(aux_inputs.get_max_epoch(), 10000);
    assert!(aux_inputs.get_jwt_signature().is_ok());
    assert_eq!(aux_inputs.get_iss(), OAuthProvider::Google.get_config().0);
    assert_eq!(aux_inputs.get_claim_name(), "sub");
    assert_eq!(
        aux_inputs.get_client_id(),
        "575519204237-msop9ep45u2uo98hapqmngv8d84qdc8k.apps.googleusercontent.com"
    );

    let zk_login_proof = ZkLoginProof::from_json("{\"pi_a\":[\"20070135235140453412363491950139702043798224873934096121884449618027498346650\",\"13452863257899491867230158359348144830940035303347103011373365564048084133173\",\"1\"],\"pi_b\":[[\"20638328149829717497898296893247679667811257514682013496341452050037879873527\",\"14567869016011681044567557818367451228190153931364680049952266175100520394660\"],[\"9918106341458194117820109842171662726217686693538121470076005914489542849473\",\"9007925129766485823687923464528692530984014268682479943901937985832629774609\"],[\"1\",\"0\"]],\"pi_c\":[\"8734022240376125982913134696535916485635821200541495641215567164823074832847\",\"10246591422531428652485093520381188142407035304263437810405902704187483736151\",\"1\"],\"protocol\":\"groth16\"}");
    assert!(zk_login_proof.is_ok());
    let res = verify_zk_login_proof_with_fixed_vk(&zk_login_proof.unwrap(), &public_inputs);
    assert!(res.is_ok());
}

#[test]
fn test_masked_content_parse() {
    // bytes after 64 * num_sha2_blocks contains non-zeros fails.
    let content = ParsedMaskedContent::new(&[1; 65], 0, 0, 1);
    assert!(content.is_err());

    // payload index must be >= 1
    let content = ParsedMaskedContent::new(&[0; 65], 0, 0, 1);
    assert!(content.is_err());

    // value at (payload index - 1) must be "."
    // TODO: cover all parsed masked content logic
}
