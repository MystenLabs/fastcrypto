var searchIndex = new Map(JSON.parse('[\
["ecvrf_cli",{"doc":"","t":"GPPFPFNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNOONNNHOOOONNNNNNNNNNNNNNNNNNNN","n":["Command","Keygen","Prove","ProveArguments","Verify","VerifyArguments","__clone_box","__clone_box","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","command","command","command","command_for_update","command_for_update","command_for_update","execute","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","has_subcommand","input","input","into","into","into","main","output","proof","public_key","secret_key","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","vzip","vzip","vzip"],"q":[[0,"ecvrf_cli"],[73,"dyn_clone::sealed"],[74,"clap::builder::command"],[75,"alloc::string"],[76,"std::io::error"],[77,"core::result"],[78,"clap::parser::matches::arg_matches"],[79,"clap"],[80,"clap::util::id"],[81,"core::option"],[82,"core::any"]],"d":["","Generate a key pair for proving and verification.","Create an output/hash and a proof.","","Verify an output/hash and a proof.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","The hex encoded input string.","Hex encoding of the input string used to generate the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Hex-encoded Sha512 hash of the proof. Must be 64 bytes.","Encoding of the proof to verify. Must be 80 bytes.","The public key corresponding to the secret key used to …","A hex encoding of the secret key. Corresponds to a scalar …","","","","","","","","","","","","","","","","","","","",""],"i":[0,6,6,0,6,0,4,5,4,5,4,5,6,6,6,4,5,6,4,5,4,5,4,5,6,4,5,6,4,5,0,6,4,5,6,4,5,6,4,5,4,5,6,4,5,6,4,5,0,5,5,5,4,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5],"f":[0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[5,5],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[6,[[9,[7,8]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[10,[[9,[6,11]]]],[10,[[9,[4,11]]]],[10,[[9,[5,11]]]],[10,[[9,[6,11]]]],[10,[[9,[4,11]]]],[10,[[9,[5,11]]]],[[],[[13,[12]]]],[[],[[13,[12]]]],[14,15],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],2],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[[6,10],[[9,[2,11]]]],[[4,10],[[9,[2,11]]]],[[5,10],[[9,[2,11]]]],[[6,10],[[9,[2,11]]]],[[4,10],[[9,[2,11]]]],[[5,10],[[9,[2,11]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[5,"Private",73],[1,"tuple"],[5,"Command",74],[5,"ProveArguments",0],[5,"VerifyArguments",0],[6,"Command",0],[5,"String",75],[5,"Error",76],[6,"Result",77],[5,"ArgMatches",78],[8,"Error",79],[5,"Id",80],[6,"Option",81],[1,"str"],[1,"bool"],[5,"TypeId",82]],"b":[]}],\
["encode_cli",{"doc":"","t":"FPGPNNNNNNNNNNNNNNNHNNNNNNNNNNHNNNNNNNNNNNONN","n":["Arg","Base64ToHex","Command","HexToBase64","__clone_box","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command_for_update","command_for_update","execute","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","into","into","main","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","value","vzip","vzip"],"q":[[0,"encode_cli"],[45,"dyn_clone::sealed"],[46,"clap::builder::command"],[47,"std::io::error"],[48,"core::result"],[49,"clap::parser::matches::arg_matches"],[50,"clap"],[51,"clap::util::id"],[52,"core::option"],[53,"core::any"]],"d":["","Decode a base64 string into hex string.","","Decode a hex string into base64 string.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,5,0,5,4,4,4,5,5,5,4,5,4,4,4,5,4,5,4,0,5,4,5,4,5,4,4,5,5,4,0,4,5,4,5,4,5,4,5,4,5,4,4,5,4],"f":[0,0,0,0,[[-1,1],2,[]],[3,3],[3,3],[3,3],[3,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[[-1,-2],2,[],[]],[[],3],[[],3],[[],3],[[],3],[5,[[7,[2,6]]]],[-1,-1,[]],[-1,-1,[]],[8,[[7,[5,9]]]],[8,[[7,[4,9]]]],[8,[[7,[5,9]]]],[8,[[7,[4,9]]]],[[],[[11,[10]]]],[12,13],[-1,-2,[],[]],[-1,-2,[],[]],[[],2],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[[5,8],[[7,[2,9]]]],[[4,8],[[7,[2,9]]]],[[5,8],[[7,[2,9]]]],[[4,8],[[7,[2,9]]]],0,[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[5,"Private",45],[1,"tuple"],[5,"Command",46],[5,"Arg",0],[6,"Command",0],[5,"Error",47],[6,"Result",48],[5,"ArgMatches",49],[8,"Error",50],[5,"Id",51],[6,"Option",52],[1,"str"],[1,"bool"],[5,"TypeId",53]],"b":[]}],\
["fastcrypto",{"doc":"","t":"CCCCCQCCCQCCCCCCQQCCCCIIIIIIIIIIIFFFIKKKFRRIKNNNNNNNNNNNNNNNNNMNNNMNNNNNNMNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSSSCCFIFFFIFSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFIFFFIFSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSSSFFFFIFIFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFKFNNNNNNNNNNNNNNNNNMNNNNHNNNNNNNNNMNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPGIPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNKKKKKRRKKRCMMMMMMCMMCCMFISFISFSSFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKKMMMMCFNNNNNHNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFSFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIFFFKKFIKTKIIIIRRNNNNNNNNNNNNNNNNNNNNNNNNMMNNONNNNNNNNNMNNNNNNNNNNNMNMNNNNNNNNMNMNNNNNNNNNNNNNNNNNNNNNMNMNNNNNNNNNNIIHHFNNNNNNNNNNNNNNNONHNNNNNONNFNNNNNNNNNNNNNNNNNNNNNNNNNNFKFFNNNNNNNNNNNNNNNMNMNMNMNMNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIJSSSSFFFIFINNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONOCONNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNJSFFNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNISSSSSSFFFIFINNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONOCONNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSFNNNNNNONNNNNNNNNNNNNNNNNNONONNNNNNNNNTFFKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNHNNNNMNNNNNNNNNNFNNNNNNNNNNNNNNKKKRKKKKKTTTRRRRRRRRRRKKRRRRRRKRKKKKMMMNMMMMMMMNMMMNMMNMMMMNNHRRRRRRKKKKCMNMMMNFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNONNNNNNNNNNNNNNNNNN","n":["aes","bls12381","ed25519","encoding","error","generate_bytes_representation","groups","hash","hmac","impl_base64_display_fmt","jwt_utils","private_seed","rsa","secp256k1","secp256r1","serde_helpers","serialize_deserialize_with_to_from_byte_array","serialize_deserialize_with_to_from_bytes","signature_service","traits","utils","vrf","Aes128CbcAnsiX923","Aes128CbcIso10126","Aes128CbcPkcs7","Aes128Ctr","Aes128Gcm","Aes192Ctr","Aes256CbcAnsiX923","Aes256CbcIso10126","Aes256CbcPkcs7","Aes256Ctr","Aes256Gcm","AesCbc","AesCtr","AesGcm","AesKey","AuthenticatedCipher","Cipher","EncryptionKey","GenericByteArray","IVType","IVType","InitializationVector","Nonce","__clone_box","as_bits","as_bytes","as_ref","base32_len","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_base32","clone","clone_into","decode_base64","decrypt","decrypt","decrypt","decrypt","decrypt_authenticated","decrypt_authenticated","deserialize","drop","encode_base64","encode_hex","encode_hex_upper","encrypt","encrypt","encrypt","encrypt","encrypt_authenticated","encrypt_authenticated","fmt","fmt","from","from","from","from","from_bytes","generate","into","into","into","into","new","new","new","serialize","to_owned","to_string","try_as_bits","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_base32","zeroize","BLS_G1_LENGTH","BLS_G2_LENGTH","BLS_KEYPAIR_LENGTH","BLS_PRIVATE_KEY_LENGTH","min_pk","min_sig","BLS12381AggregateSignature","BLS12381AggregateSignatureAsBytes","BLS12381KeyPair","BLS12381PrivateKey","BLS12381PublicKey","BLS12381PublicKeyAsBytes","BLS12381Signature","DST_G2","__clone_box","__clone_box","__clone_box","add_aggregate","add_signature","aggregate","as_bits","as_bits","as_bits","as_bits","as_bits","as_ref","as_ref","as_ref","as_ref","as_ref","base32_len","base32_len","base32_len","base32_len","base32_len","batch_verify","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","bytes","bytes","check_base32","check_base32","check_base32","check_base32","check_base32","clone","clone","clone","clone_into","clone_into","clone_into","cmp","copy","decode_base64","decode_base64","decode_base64","decode_base64","decode_base64","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","encode_base64","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","hash","hash","insecure_default","into","into","into","into","into","partial_cmp","private","privkey","pubkey","public","serialize","serialize","serialize","serialize","serialize","sig","sig","sign","sign","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","validate","verify","verify","verify_different_msg","vzip","vzip","vzip","vzip","vzip","write_base32","write_base32","write_base32","write_base32","write_base32","BLS12381AggregateSignature","BLS12381AggregateSignatureAsBytes","BLS12381KeyPair","BLS12381PrivateKey","BLS12381PublicKey","BLS12381PublicKeyAsBytes","BLS12381Signature","DST_G1","__clone_box","__clone_box","__clone_box","add_aggregate","add_signature","aggregate","as_bits","as_bits","as_bits","as_bits","as_bits","as_ref","as_ref","as_ref","as_ref","as_ref","base32_len","base32_len","base32_len","base32_len","base32_len","batch_verify","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","bytes","bytes","check_base32","check_base32","check_base32","check_base32","check_base32","clone","clone","clone","clone_into","clone_into","clone_into","cmp","copy","decode_base64","decode_base64","decode_base64","decode_base64","decode_base64","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","encode_base64","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","hash","hash","insecure_default","into","into","into","into","into","partial_cmp","private","privkey","pubkey","public","serialize","serialize","serialize","serialize","serialize","sig","sig","sign","sign","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","validate","verify","verify","verify_different_msg","vzip","vzip","vzip","vzip","vzip","write_base32","write_base32","write_base32","write_base32","write_base32","ED25519_KEYPAIR_LENGTH","ED25519_PRIVATE_KEY_LENGTH","ED25519_PUBLIC_KEY_LENGTH","ED25519_SIGNATURE_LENGTH","Ed25519AggregateSignature","Ed25519KeyPair","Ed25519PrivateKey","Ed25519PublicKey","Ed25519PublicKeyAsBytes","Ed25519Signature","Ed25519SignatureAsBytes","SingleSignature","__clone_box","__clone_box","__clone_box","as_bits","as_bits","as_bits","as_bits","as_bits","as_ref","as_ref","as_ref","as_ref","as_ref","base32_len","base32_len","base32_len","base32_len","base32_len","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","check_base32","check_base32","check_base32","check_base32","check_base32","clone","clone","clone","clone_into","clone_into","clone_into","cmp","copy","decode_base64","decode_base64","decode_base64","decode_base64","decode_base64","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_as","drop","encode_base64","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","hash","insecure_default","into","into","into","into","into","into","partial_cmp","private","public","serialize","serialize","serialize","serialize","serialize","serialize_as","sig","sign","sigs","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","write_base32","write_base32","write_base32","write_base32","write_base32","Base58","Base64","Bech32","Encoding","Hex","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","decode","decode","decode","decode","decode","decode_bytes_hex","deserialize","deserialize","deserialize","deserialize_as","deserialize_as","deserialize_as","deserialize_as","deserialize_as","deserialize_as","encode","encode","encode","encode","encode","encode_with_format","encoded","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","from_bytes","from_bytes","into","into","into","into","json_schema","json_schema","json_schema","schema_name","schema_name","schema_name","serialize","serialize","serialize","serialize_as","serialize_as","serialize_as","to_owned","to_owned","to_owned","to_vec","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Err","FastCryptoError","FastCryptoResult","GeneralError","GeneralOpaqueError","InputLengthWrong","InputTooLong","InputTooShort","InvalidInput","InvalidMessage","InvalidProof","InvalidSignature","NotEnoughInputs","Ok","__clone_box","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","fmt","fmt","from","from","into","to_owned","to_string","try_from","try_into","type_id","vzip","Doubling","FiatShamirChallenge","GroupElement","HashToGroupElement","MultiScalarMul","Other","Output","Pairing","Scalar","ScalarType","bls12381","double","fiat_shamir_reduction_to_group_element","generator","hash_to_group_element","inverse","multi_scalar_mul","multiplier","pairing","rand","ristretto255","secp256r1","zero","G1Element","G1ElementAsBytes","G1_ELEMENT_BYTE_LENGTH","G2Element","G2ElementAsBytes","G2_ELEMENT_BYTE_LENGTH","GTElement","GT_ELEMENT_BYTE_LENGTH","SCALAR_LENGTH","Scalar","__clone_box","__clone_box","__clone_box","__clone_box","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","div","div","div","div","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fiat_shamir_reduction_to_group_element","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_byte_array","from_byte_array","from_byte_array","from_byte_array","generator","generator","generator","generator","hash_to_group_element","hash_to_group_element","into","into","into","into","inverse","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","multi_scalar_mul","multi_scalar_mul","neg","neg","neg","neg","neg","neg","neg","neg","pairing","rand","serialize","serialize","serialize","serialize","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","to_byte_array","to_byte_array","to_byte_array","to_byte_array","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","zero","zero","zero","zero","ScalarMultiplier","ToLittleEndianBytes","mul","new","to_le_bytes","two_scalar_mul","windowed","WindowedScalarMultiplier","borrow","borrow_mut","from","into","mul","multi_scalar_mul","new","try_from","try_into","two_scalar_mul","type_id","vzip","RistrettoPoint","RistrettoScalar","__clone_box","__clone_box","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compress","decompress","default","deserialize","deserialize","div","div","div","double","eq","eq","equivalent","equivalent","equivalent","equivalent","fiat_shamir_reduction_to_group_element","fmt","fmt","from","from","from","from","from","from_byte_array","from_byte_array","from_bytes_mod_order","from_bytes_mod_order_wide","from_uniform_bytes","generator","generator","group_order","hash_to_group_element","hash_to_group_element","into","into","inverse","map_to_point","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","multi_scalar_mul","neg","neg","neg","neg","rand","serialize","serialize","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","to_byte_array","to_byte_array","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","zero","zero","zeroize","ProjectivePoint","SCALAR_SIZE_IN_BYTES","Scalar","__clone_box","__clone_box","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deserialize","div","div","double","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from_byte_array","generator","generator","into","into","inverse","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","rand","serialize","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","to_byte_array","to_le_bytes","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","zero","zero","Blake2b256","Blake3","Digest","EllipticCurveMultisetHash","Hash","HashFunction","HashFunctionWrapper","Keccak256","MultisetHash","OUTPUT_SIZE","ReverseWrapper","Sha256","Sha3_256","Sha3_512","Sha512","TypedDigest","Variant","__clone_box","__clone_box","as_bits","as_ref","base32_len","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_base32","clone","clone","clone_into","clone_into","cmp","default","default","default","deserialize","deserialize","digest","digest","digest","digest","digest","digest_iterator","encode_hex","encode_hex_upper","eq","eq","equivalent","equivalent","equivalent","equivalent","finalize","finalize","finalize","flush","fmt","fmt","fmt","from","from","from","from","hash","insert","insert","insert_all","insert_all","into","into","into","into","new","new","partial_cmp","remove","remove","remove_all","remove_all","serialize","serialize","size","to_owned","to_owned","to_string","to_vec","try_as_bits","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","union","update","update","update","vzip","vzip","vzip","vzip","write","write","write","write_base32","HkdfIkm","HmacKey","hkdf_sha3_256","hmac_sha3_256","JWTHeader","__clone_box","borrow","borrow_mut","clone","clone_into","default","deserialize","eq","equivalent","equivalent","fmt","from","hash","into","json_schema","kid","new","parse_and_validate_jwt","schema_name","serialize","to_owned","try_from","try_into","typ","type_id","vzip","PrivateSeed","as_bits","as_bytes","as_ref","base32_len","borrow","borrow_mut","check_base32","decode_base64","drop","encode_base64","encode_hex","encode_hex_upper","eq","equivalent","equivalent","fmt","from","from_bytes","into","try_as_bits","try_from","try_into","type_id","vzip","write_base32","zeroize","Base64UrlUnpadded","Encoding","RSAPublicKey","RSASignature","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","decode","decode","decode_in_place","decode_in_place","decode_vec","decode_vec","encode","encode","encode_string","encode_string","encoded_len","encoded_len","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from","from","from_bytes","from_der","from_raw_components","into","into","into","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify_prehash","vzip","vzip","vzip","DefaultHash","SECP256K1","SECP256K1_KEYPAIR_LENGTH","SECP256K1_PRIVATE_KEY_LENGTH","SECP256K1_PUBLIC_KEY_LENGTH","SECP256K1_SIGNATURE_LENGTH","Secp256k1KeyPair","Secp256k1PrivateKey","Secp256k1PublicKey","Secp256k1PublicKeyAsBytes","Secp256k1Signature","Secp256k1SignatureAsBytes","__clone_box","__clone_box","as_bits","as_bits","as_bits","as_bits","as_ref","as_ref","as_ref","as_ref","base32_len","base32_len","base32_len","base32_len","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","bytes","check_base32","check_base32","check_base32","check_base32","clone","clone","clone_into","clone_into","cmp","copy","decode_base64","decode_base64","decode_base64","decode_base64","deserialize","deserialize","deserialize","deserialize","drop","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","hash","hash","into","into","into","into","partial_cmp","private","privkey","pubkey","public","public","recoverable","secret","serialize","serialize","serialize","serialize","sig","sign","sign_recoverable_with_hash","sign_with_hash","to_owned","to_owned","to_string","to_string","to_string","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","verify_with_hash","vzip","vzip","vzip","vzip","write_base32","write_base32","write_base32","write_base32","SECP256K1","SECP256K1_RECOVERABLE_SIGNATURE_SIZE","Secp256k1RecoverableSignature","Secp256k1Sig","__clone_box","__clone_box","as_bits","as_c_ptr","as_mut_c_ptr","as_mut_ptr","as_ptr","as_ref","base32_len","borrow","borrow","borrow_mut","borrow_mut","bytes","check_base32","clone","clone","clone_into","clone_into","cmp","cmp_fast_unstable","decode_base64","deserialize","encode_base64","encode_hex","encode_hex_upper","eq","eq","eq_fast_unstable","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_bytes","from_compact","from_der","from_der_lax","from_str","hash","hash","into","into","normalize_s","partial_cmp","recover_with_hash","serialize","serialize_compact","serialize_der","sig","to_owned","to_owned","to_string","to_string","try_as_bits","try_from","try_from","try_from_nonrecoverable","try_into","try_into","type_id","type_id","verify","vzip","vzip","write_base32","DefaultHash","PRECOMPUTED_POINTS","SECP256R1_KEYPAIR_LENGTH","SECP256R1_PRIVATE_KEY_LENGTH","SECP256R1_PUBLIC_KEY_LENGTH","SECP256R1_SIGNATURE_LENTH","SLIDING_WINDOW_WIDTH","Secp256r1KeyPair","Secp256r1PrivateKey","Secp256r1PublicKey","Secp256r1PublicKeyAsBytes","Secp256r1Signature","Secp256r1SignatureAsBytes","__clone_box","__clone_box","as_bits","as_bits","as_bits","as_bits","as_ref","as_ref","as_ref","as_ref","base32_len","base32_len","base32_len","base32_len","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","bytes","check_base32","check_base32","check_base32","check_base32","clone","clone","clone_into","clone_into","cmp","conversion","copy","decode_base64","decode_base64","decode_base64","decode_base64","deserialize","deserialize","deserialize","deserialize","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","hash","hash","into","into","into","into","partial_cmp","private","privkey","pubkey","public","public","recoverable","secret","serialize","serialize","serialize","serialize","sig","sign","sign_recoverable_with_hash","sign_with_hash","to_owned","to_owned","to_string","to_string","to_string","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","verify_with_hash","vzip","vzip","vzip","vzip","write_base32","write_base32","write_base32","write_base32","SECP256R1_RECOVERABLE_SIGNATURE_LENGTH","Secp256r1RecoverableSignature","__clone_box","as_bits","as_ref","base32_len","borrow","borrow_mut","bytes","check_base32","clone","clone_into","decode_base64","deserialize","encode_base64","encode_hex","encode_hex_upper","eq","equivalent","equivalent","fmt","fmt","from","from_bytes","hash","into","recover_with_hash","recovery_id","serialize","sig","to_owned","to_string","try_as_bits","try_from","try_from_nonrecoverable","try_into","type_id","vzip","write_base32","BYTE_LENGTH","BytesRepresentation","SerializationHelper","ToFromByteArray","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","deserialize","deserialize","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_byte_array","hash","into","into","is_referenceable","json_schema","keypair_decode_base64","partial_cmp","schema_name","serialize","serialize","to_byte_array","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SignatureService","__clone_box","borrow","borrow_mut","clone","clone_into","from","into","new","request_signature","to_owned","try_from","try_into","type_id","vzip","AggregateAuthenticator","AllowedRng","Authenticator","DefaultHash","EncodeDecodeBase64","FromUniformBytes","Generate","InsecureDefault","KeyPair","LENGTH","LENGTH","LENGTH","PrivKey","PrivKey","PrivKey","PrivKey","PubKey","PubKey","PubKey","PubKey","PubKey","PubKey","RecoverableSignature","RecoverableSigner","Sig","Sig","Sig","Sig","Sig","Sig","Signer","Signer","SigningKey","ToFromBytes","VerifyRecoverable","VerifyingKey","add_aggregate","add_signature","aggregate","as_bytes","batch_verify","copy","decode_base64","encode_base64","from_bytes","generate","generate","generate","insecure_default","private","public","recover","recover_with_hash","sign","sign_recoverable","sign_recoverable_with_hash","verify","verify","verify_different_msg","verify_recoverable","verify_recoverable_with_hash","log2_byte","PrivateKey","PrivateKey","Proof","PublicKey","PublicKey","PublicKey","VRFKeyPair","VRFPrivateKey","VRFProof","VRFPublicKey","ecvrf","generate","output","prove","to_hash","verify","verify_output","ECVRFKeyPair","ECVRFPrivateKey","ECVRFProof","ECVRFPublicKey","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deserialize","deserialize","deserialize","deserialize","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","generate","into","into","into","into","pk","prove","serialize","serialize","serialize","serialize","sk","to_hash","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip"],"q":[[0,"fastcrypto"],[22,"fastcrypto::aes"],[116,"fastcrypto::bls12381"],[122,"fastcrypto::bls12381::min_pk"],[310,"fastcrypto::bls12381::min_sig"],[499,"fastcrypto::ed25519"],[689,"fastcrypto::encoding"],[787,"fastcrypto::error"],[820,"fastcrypto::groups"],[843,"fastcrypto::groups::bls12381"],[1040,"fastcrypto::groups::multiplier"],[1047,"fastcrypto::groups::multiplier::windowed"],[1060,"fastcrypto::groups::ristretto255"],[1169,"fastcrypto::groups::secp256r1"],[1263,"fastcrypto::hash"],[1378,"fastcrypto::hmac"],[1382,"fastcrypto::jwt_utils"],[1409,"fastcrypto::private_seed"],[1436,"fastcrypto::rsa"],[1500,"fastcrypto::secp256k1"],[1655,"fastcrypto::secp256k1::recoverable"],[1731,"fastcrypto::secp256r1"],[1887,"fastcrypto::secp256r1::recoverable"],[1926,"fastcrypto::serde_helpers"],[1981,"fastcrypto::signature_service"],[1996,"fastcrypto::traits"],[2057,"fastcrypto::utils"],[2058,"fastcrypto::vrf"],[2075,"fastcrypto::vrf::ecvrf"],[2143,"dyn_clone::sealed"],[2144,"bitvec::slice"],[2145,"bitvec::order"],[2146,"generic_array"],[2147,"core::fmt"],[2148,"bech32"],[2149,"alloc::vec"],[2150,"core::result"],[2151,"core::clone"],[2152,"eyre"],[2153,"crypto_common"],[2154,"crypto_common"],[2155,"typenum::generated::consts"],[2156,"crypto_common"],[2157,"serde::de"],[2158,"alloc::string"],[2159,"core::iter::traits::collect"],[2160,"core::fmt"],[2161,"bitvec::ptr::span"],[2162,"core::any"],[2163,"bech32"],[2164,"core::iter::traits::collect"],[2165,"core::cmp"],[2166,"core::fmt"],[2167,"core::option"],[2168,"core::marker"],[2169,"ed25519_consensus::signature"],[2170,"ed25519_consensus::signing_key"],[2171,"eyre"],[2172,"core::convert"],[2173,"schemars::schema"],[2174,"signature::error"],[2175,"blst"],[2176,"blst"],[2177,"core::ops::arith"],[2178,"core::ops::arith"],[2179,"curve25519_dalek_ng::scalar"],[2180,"ark_secp256r1::curves"],[2181,"ark_secp256r1::fields::fr"],[2182,"core::default"],[2183,"digest::digest"],[2184,"core::convert"],[2185,"der::error"],[2186,"der::error"],[2187,"base64ct::errors"],[2188,"secp256k1"],[2189,"secp256k1::ecdsa::serialized_signature"],[2190,"secp256k1"],[2191,"core::marker"]],"d":["This module contains implementations of various AES modes.","This module contains an implementation of the BLS …","This module contains an implementation of the Ed25519 …","Encodings of binary data such as Base64 and Hex.","Collection of errors to be used in fastcrypto.","Macro for generating a new alias for BytesRepresentation …","","This module contains a selection of cryptographic hash …","Implementations of HMAC and HKDF.","","","","Implementation of a verifier following RSASSA-PKCS1-v1_5 …","This module contains an implementation of the ECDSA …","This module contains an implementation of the ECDSA …","","Macro for generating Serialize/Deserialize for a type that …","","","","","","AES128 in CBC-mode using ANSI X9.23 padding.","AES128 in CBC-mode using ISO 10126 padding.","AES128 in CBC-mode using PKCS #7 padding.","AES128 in CTR-mode.","AES128 in GCM-mode (authenticated) using the given nonce …","AES192 in CTR-mode.","AES256 in CBC-mode using ANSI X9.23 padding.","AES256 in CBC-mode using ISO 10126 padding.","AES256 in CBC-mode using PKCS #7 padding.","AES256 in CTR-mode.","AES256 in GCM-mode (authenticated) using the given nonce …","Aes in CBC mode","Aes in CTR mode","AES in GCM mode (authenticated).","A key of <code>N</code> bytes used with AES ciphers.","Trait impl’d by symmetric ciphers for authenticated …","Trait impl’d by symmetric ciphers.","Trait impl’d by encryption keys in symmetric cryptography","Struct wrapping an instance of a …","","","An <code>N</code> byte initialization vector used with AES ciphers.","Trait impl’d by nonces and IV’s used in symmetric …","","","","","","","","","","","","","","","","","","Decrypt <code>ciphertext</code> using the given IV and return the …","","","","Decrypt <code>ciphertext</code> using the given IV and authentication …","","","","","","","Encrypt <code>plaintext</code> using the given IV and return the result.","","","","Encrypt <code>plaintext</code> using the given IV and authentication …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","The length of public keys when using the min_pk module and …","The length of public keys when using the min_sig module …","The key pair bytes length used by helper is the same as …","The length of a private key in bytes.","Module minimizing the size of public keys. Module …","Module minimizing the size of signatures. Module …","Aggregation of multiple BLS 12-381 signatures.","","BLS 12-381 key pair.","BLS 12-381 private key.","BLS 12-381 public key.","","BLS 12-381 signature.","Hash-to-curve domain separation tag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Aggregation of multiple BLS 12-381 signatures.","","BLS 12-381 key pair.","BLS 12-381 private key.","BLS 12-381 public key.","","BLS 12-381 signature.","Hash-to-curve domain separation tag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The key pair bytes length is the same as the private key …","The length of a private key in bytes.","The length of a public key in bytes.","The length of a signature in bytes.","Aggregation of multiple Ed25519 signatures.","Ed25519 key pair.","Ed25519 private key.","Ed25519 public key.","","Ed25519 signature.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Base64 encoding","Bech32 encoding","Trait representing a general binary-to-string encoding.","Hex string encoding.","","","","","","","","","","","","","","","","","","Decode this encoding into bytes.","Decodes the Bech32 string to bytes, validating the given …","","","","Decodes a hex string to bytes. Both upper and lower case …","","","","","","","","","","Encode bytes into a string.","Encodes bytes into a Bech32 encoded string, with the given …","","","","Encodes bytes as a 0x prefixed hex string using lower case …","Get a string representation of this Base64 encoding.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Encodes bytes as a Base64.","Encodes bytes as a hex string.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Decodes this Base64 encoding to bytes.","Decodes this hex encoding to bytes.","","","","","","","","","","","","","","","","","","","Contains the error value","Collection of errors to be used in fastcrypto.","","General cryptographic error.","General opaque cryptographic error.","Input length is wrong.","Input is to long.","Input is to short.","Invalid value was given to the function","Invalid message was given to the function","Invalid proof was given to the function","Invalid signature was given to the function","Not enough inputs were given to the function, retry with …","Contains the success value","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Trait for group elements that has a fast doubling …","Trait for groups that have a reduction from a random …","Trait impl’d by elements of an additive cyclic group.","Trait for groups that have a standardized “hash_to_point…","Trait for groups that support multi-scalar multiplication.","","","","Trait impl’d by scalars to be used with GroupElement.","Type of scalars used in the [Self::mul] multiplication …","","Compute 2 * Self = Self + Self.","","Return an instance of the generator for this group.","Hashes the given message and maps the result to a group …","","","This module contains implementations of optimised scalar …","","","Implementations of the ristretto255 group which is a group …","Implementation of the Secp256r1 (aka P-256) curve. This is …","Return an instance of the identity element in this group.","Elements of the group G_1 in BLS 12-381.","","","Elements of the group G_2 in BLS 12-381.","","","Elements of the subgroup G_T of F_q^{12} in BLS 12-381. …","","","This represents a scalar modulo r = …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for scalar multiplication for a fixed group element, …","","Compute <code>self.base_element * scalar</code>.","Create a new scalar multiplier with the given base element.","Serialize scalar into a byte vector in little-endian …","Compute …","","This scalar multiplier uses pre-computation with the …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","This method computes the linear combination of the given …","","","","","","","Represents a point in the Ristretto group for Curve25519.","Represents a scalar.","","","","","","","","","","","","","","","","","","","","","","","Return this point in compressed form.","Return this point in compressed form.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Construct a RistrettoScalar by reducing a 32-byte …","Construct a RistrettoScalar by reducing a 64-byte …","Construct a RistrettoPoint from the given data using an …","","","The order of the base point.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Construct a RistrettoPoint from the given data using a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decode a ristretto point in compressed binary form.","","","","","","","","","","","","A point on the Secp256r1 curve in projective coordinates.","","A field element in the prime field of the same order as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BLAKE2-256 hash function with 256 bit digests.","The BLAKE3 hash function with 256 bit digests.","Represents a digest of <code>DIGEST_LEN</code> bytes.","<code>EllipticCurveMultisetHash</code> (ECMH) is a homomorphic multiset …","This trait is implemented by all messages that can be …","Trait implemented by hash functions providing a output of …","This wraps a digest::Digest as a HashFunction.","The KECCAK hash function with 256 bit digests.","A Multiset Hash is a homomorphic hash function, which …","The length of this hash functions digests in bytes.","This trait allows using a HashFunctionWrapper where a …","The SHA-2 hash function with 256 bit digests.","The SHA-3 hash function with 256 bit digests.","The SHA-3 hash function with 512 bit digests.","The SHA-512 hash function with 512 bit digests.","The type of the digest when this is hashed.","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate a digest of the current state of this hash …","Compute the digest of the given data and consume the hash …","","","Compute a single digest from all slices in the iterator in …","","","","","","","","","Retrieve result and consume hash function.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Insert an item into this hash function.","","Insert multiple items into this hash function.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new hash function of the given type","Create a new digest containing the given bytes","","Remove an element from this hash function.","","Remove multiple items from this hash function.","","","","The size of this digest in bytes.","","","","Copy the digest into a new vector.","","","","","","","","","","","","","","Add all the elements of another hash function into this …","","Process the given data, and update the internal of the …","","","","","","","","","","","Type for input keying material in hkdf_sha3_256.","Type for key in hmac_sha3_256.","HMAC-based Extract-and-Expand Key Derivation Function …","Keyed-Hash Message Authentication Code (HMAC) using …","Struct that represents a standard JWT header according to …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Parse the header base64 string into a [struct JWTHeader].","","","","","","","","","","Private key/seed of any/fixed size.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","URL-safe Base64 encoding <em>without</em> padding.","Base64 encoding trait.","","","","","","","","","","","","","","","","","","Decode a Base64 string into the provided destination …","","Decode a Base64 string in-place.","","Decode a Base64 string into a byte vector.","","Encode the input byte slice as Base64.","","Encode input byte slice into a <code>String</code> containing Base64.","","Get the length of Base64 produced by encoding the given …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parse signature from binary representation according to …","Parse an <code>RSAPublicKey</code> from an ASN.1 DER (Distinguished …","Parse an <code>RSAPublicKey</code> from its components, eg. the modulus …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Verify a signed message. The verification uses SHA-256 for …","Verify a signed message. The message, <code>hashed</code>, must be the …","","","","Default hash function used for signing and verifying …","","The key pair bytes length is the same as the private key …","The length of a private key in bytes.","The length of a public key in bytes.","The length of a signature in bytes.","Secp256k1 public/private key pair.","Secp256k1 private key.","Secp256k1 public key.","","Secp256k1 ECDSA signature.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","This module contains an implementation of the ECDSA …","","","","","","","","Create a new recoverable signature over the given message. …","Create a new signature using the given hash function to …","","","","","","","","","","","","","","","","","","","","","","","","","Verify the signature using the given hash function to hash …","","","","","","","","","","Length of a compact signature followed by one extra byte …","Secp256k1 signature.","An ECDSA signature","","","","","","Obtains a raw mutable pointer suitable for use with FFI …","Obtains a raw pointer suitable for use with FFI functions","","","","","","","","","","","","","","Like <code>cmp::Cmp</code> but faster and with no guarantees across …","","","","","","","","Like <code>cmp::Eq</code> but faster and with no guarantees across …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Converts a 64-byte compact-encoded byte slice to a …","Converts a DER-encoded byte slice to a signature","Converts a “lax DER”-encoded byte slice to a …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Normalizes a signature to a “low S” form. In ECDSA, …","","Recover public key from signature using the given hash …","","Serializes the signature in compact format","Serializes the signature in DER format","","","","","","","","","Convert a non-recoverable signature into a recoverable …","","","","","Verifies an ECDSA signature for <code>msg</code> using <code>pk</code> and the …","","","","Default hash function used for signing and verifying …","The number of precomputed points used for scalar …","The key pair bytes length is the same as the private key …","The length of a private key in bytes.","The length of a public key in bytes.","The length of a signature in bytes.","The size of the sliding window used for scalar …","Secp256r1 public/private key pair.","Secp256r1 private key.","Secp256r1 public key.","","Secp256r1 signature.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This module contains conversion function between scalars …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","This module contains an implementation of the ECDSA …","","","","","","","","","Create a new signature using the given hash function to …","","","","","","","","","","","","","","","","","","","","","","","","","Verify the signature using the given hash function to hash …","","","","","","","","","","Secp256r1 signature.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Recover the public key used to create this signature. This …","","","","","","External types.","Serialization of internal types.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","This service holds the node’s private key. It takes …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Trait impl’d by aggregated signatures in asymmetric …","Trait impl’d by RNG’s accepted by fastcrypto.","Trait impl’d by signatures in asymmetric cryptography.","","Cryptographic material with an immediate conversion …","Trait impl’d by a keys/secret seeds for generating a …","Trait impl’d by cryptographic material that can be …","Trait for objects that support an insecure default value …","Trait impl’d by a public / private key pair in …","","","","","","","","","","","","","","Trait impl’d by recoverable signatures","Trait impl’d by public / private keypairs that can …","","","","","","","Trait impl’d by a key/keypair that can create signatures.","","Trait impl’d by private (secret) keys in asymmetric …","Trait impl’d by concrete types that represent digital …","","Trait impl’d by public keys in asymmetric cryptography.","","","Combine signatures into a single aggregated signature.","Borrow a byte slice representing the serialized form of …","Verify a batch of aggregate signatures, each consisting of …","","","","Parse an object from its byte representation","Generate a new keypair using the given RNG.","Generate a new random instance using the given RNG.","","","Get the private key.","Get the public key.","Recover the public key from this signature.","Recover the public key from this signature. Assuming that …","Create a new signature over a message.","Sign as a recoverable signature.","Sign as a recoverable signature using the given hash …","Use Self to verify that the provided signature for a given …","Verify this aggregate signature assuming that all …","Verify this aggregate signature where the signatures are …","Verify a recoverable signature by recovering the public …","Verify a recoverable signature by recovering the public …","Returns the log base 2 of b. There is an exception: for …","","","","","","","A keypair for a verifiable random function (VRF).","Represents a private key used to compute outputs for a …","A proof that the output of a VRF was computed correctly.","Represents a public key of which is use to verify outputs …","An implementation of an Elliptic Curve VRF (ECVRF) using …","Generate a new keypair using the given RNG.","Compute both hash and proof for the given input.","Generate a proof for the given input.","Compute the output of the VRF with this proof.","Verify the correctness of this proof.","Verify the correctness of this proof and VRF output.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,34,0,0,5,5,5,5,5,21,31,33,5,21,31,33,5,5,5,5,5,18,21,31,33,34,33,5,5,5,5,5,18,21,31,33,34,33,5,5,21,31,33,5,5,5,21,31,33,5,21,31,33,5,5,5,5,21,31,33,5,21,31,33,5,21,31,33,5,21,31,33,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,54,47,47,47,47,51,52,53,54,47,51,52,53,54,47,51,52,53,54,47,47,51,52,53,54,47,51,52,53,54,47,51,52,54,47,51,52,53,54,47,51,54,47,51,54,47,51,53,51,52,53,54,47,54,47,51,52,53,54,47,51,52,53,54,47,51,52,53,54,47,51,52,53,54,47,51,52,53,54,47,51,51,52,52,53,53,54,54,47,47,51,51,52,52,53,54,54,47,47,51,51,52,53,53,54,47,47,51,52,53,54,47,53,53,51,54,51,51,52,53,54,47,51,53,52,51,53,51,52,53,54,47,54,47,52,53,51,54,47,51,52,54,47,51,52,53,54,47,51,51,52,53,54,47,47,51,52,53,54,47,51,52,53,54,47,51,51,47,47,51,52,53,54,47,51,52,53,54,47,0,0,0,0,0,0,0,0,63,66,62,62,62,62,63,64,65,66,62,63,64,65,66,62,63,64,65,66,62,62,63,64,65,66,62,63,64,65,66,62,63,64,66,62,63,64,65,66,62,63,66,62,63,66,62,63,65,63,64,65,66,62,66,62,67,63,64,65,66,62,63,64,65,66,62,63,64,65,66,62,63,64,65,66,62,63,64,65,66,62,63,63,64,64,65,65,66,66,62,62,63,63,64,64,65,66,66,62,62,63,63,64,65,65,66,62,62,63,64,65,66,62,65,65,63,66,63,63,64,65,66,62,63,65,64,63,65,63,64,65,66,62,66,62,64,65,63,66,62,63,64,66,62,63,64,65,66,62,63,63,64,65,66,62,62,63,64,65,66,62,63,64,65,66,62,63,63,62,62,63,64,65,66,62,63,64,65,66,62,0,0,0,0,0,0,0,0,0,0,0,0,68,72,73,68,70,71,72,73,68,70,71,72,73,68,70,71,72,73,198,68,70,71,72,73,198,68,70,71,72,73,72,73,68,70,71,72,73,68,72,73,68,72,73,68,71,68,70,71,72,73,72,73,68,70,71,72,73,198,70,68,70,71,72,73,68,70,71,72,73,68,70,71,72,73,68,70,71,72,73,68,68,70,70,71,71,72,72,73,73,68,68,70,70,71,72,72,73,73,198,68,68,70,71,71,71,72,73,68,70,71,72,73,71,71,68,68,198,68,70,71,72,73,68,71,71,68,70,71,72,73,198,72,71,73,68,72,73,68,70,72,73,68,70,71,72,73,198,68,68,70,71,72,72,73,198,68,70,71,72,73,198,68,70,71,72,73,68,198,68,70,71,72,73,68,70,71,72,73,0,0,0,0,0,76,77,78,199,76,77,78,199,76,77,78,76,77,78,76,77,78,200,199,76,77,78,0,76,77,78,76,76,77,77,78,78,200,199,76,77,78,0,76,76,78,76,76,78,78,76,77,78,199,76,77,78,76,77,199,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,199,76,76,77,78,78,199,76,77,78,199,76,77,78,199,76,77,78,92,0,0,19,19,19,19,19,19,19,19,19,19,92,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,0,0,96,96,0,0,89,0,86,87,89,91,90,93,0,96,90,0,0,89,0,0,0,0,0,0,0,0,0,0,97,98,99,100,97,97,97,97,98,98,98,98,99,99,99,99,100,100,100,100,97,97,98,98,99,99,100,100,97,98,99,100,97,98,99,100,97,98,99,100,97,98,99,100,97,98,99,100,97,98,99,100,97,98,99,100,97,97,98,98,99,99,100,100,100,97,98,99,100,97,97,98,98,99,99,100,100,100,97,98,99,100,97,98,99,100,97,98,97,98,99,100,100,97,97,97,97,98,98,98,98,99,99,99,99,100,100,100,100,97,97,98,98,99,99,100,100,97,98,97,97,98,98,99,99,100,100,97,100,97,98,99,100,97,97,97,97,98,98,98,98,99,99,99,99,100,100,100,100,97,97,98,98,99,99,100,100,97,98,99,100,97,98,99,100,97,97,98,98,99,100,97,98,99,100,97,98,99,100,97,98,99,100,97,98,99,100,0,0,106,106,107,106,0,0,108,108,108,108,108,0,108,108,108,108,108,108,0,0,112,113,112,112,112,112,113,113,113,113,112,112,113,113,112,113,112,113,112,113,112,113,112,112,112,112,113,112,113,113,112,112,113,112,112,113,113,113,112,113,112,112,113,113,113,112,113,113,113,112,112,113,113,112,113,112,113,113,112,112,112,112,112,113,113,113,113,112,112,113,113,112,112,112,113,113,113,112,113,112,112,112,112,113,113,113,113,112,112,113,113,112,113,112,113,112,112,113,112,113,112,113,112,113,112,113,113,0,0,0,116,117,116,116,116,116,117,117,117,117,116,116,117,117,116,117,116,117,116,117,116,117,116,117,117,116,117,116,116,117,116,116,117,117,116,117,116,116,117,117,117,117,116,117,116,117,117,116,116,116,116,117,117,117,117,116,116,117,117,116,116,117,117,117,117,116,116,116,116,117,117,117,117,116,116,117,117,117,117,116,117,116,117,116,117,116,117,116,117,116,117,0,0,0,0,0,0,0,0,0,133,0,0,0,0,0,127,201,120,121,120,120,120,120,122,125,121,120,122,125,121,120,120,121,120,121,120,122,125,121,120,121,127,132,133,121,120,133,120,120,120,121,120,120,121,121,133,122,125,122,120,120,121,120,122,125,121,120,132,121,132,121,120,122,125,121,133,120,120,132,121,132,121,120,121,120,120,121,120,120,120,120,122,125,121,120,122,125,121,120,122,125,121,132,121,133,122,125,120,122,125,121,122,122,122,120,0,0,0,0,0,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,0,139,139,139,139,139,139,139,139,0,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,0,0,0,0,141,142,143,141,142,143,141,142,143,141,142,143,141,142,143,202,141,202,141,202,141,202,141,202,141,202,141,141,143,141,141,143,143,141,141,142,143,143,142,142,141,142,143,141,142,143,141,142,143,141,142,143,141,142,143,142,142,141,142,143,0,0,0,0,0,0,0,0,0,0,0,0,147,149,147,148,149,150,147,148,149,150,147,148,149,150,147,148,149,150,147,148,149,150,147,148,149,147,148,149,150,147,149,147,149,147,150,147,148,149,150,147,148,149,150,148,147,148,149,150,147,148,149,150,147,148,149,150,147,148,149,150,147,147,148,148,149,149,150,150,147,147,148,148,149,149,150,147,147,148,149,149,150,150,147,148,149,150,150,150,147,149,147,148,149,150,147,150,148,147,150,150,0,150,147,148,149,150,149,150,150,150,147,149,147,148,149,147,148,149,150,147,147,148,149,149,150,147,148,149,150,147,148,149,150,147,147,147,148,149,150,147,148,149,150,0,0,0,0,152,151,151,152,152,152,152,151,151,152,151,152,151,151,151,152,151,152,151,152,152,151,151,151,151,151,152,151,152,152,152,151,151,152,152,151,151,152,152,151,151,152,152,152,152,152,151,152,151,152,152,151,151,152,152,151,152,151,152,151,151,152,151,151,152,151,152,151,152,152,151,151,0,0,0,0,0,0,0,0,0,0,0,0,0,158,160,158,159,160,161,158,159,160,161,158,159,160,161,158,159,160,161,158,159,160,161,158,159,160,158,159,160,161,158,160,158,160,158,0,161,158,159,160,161,158,159,160,161,158,159,160,161,158,159,160,161,158,159,160,161,158,159,160,161,158,158,159,159,160,160,161,161,158,158,159,159,160,160,161,158,158,159,160,160,161,161,158,159,160,161,161,161,158,160,158,159,160,161,158,161,159,158,161,161,0,161,158,159,160,161,160,161,161,161,158,160,158,159,160,158,159,160,161,158,158,159,160,160,161,158,159,160,161,158,159,160,161,158,158,158,159,160,161,158,159,160,161,0,0,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,164,0,0,0,61,163,61,163,61,61,61,61,163,61,61,61,61,61,61,163,61,61,61,61,61,61,61,61,61,61,61,61,61,164,61,163,61,61,61,0,61,61,163,61,164,61,61,163,61,163,61,163,61,163,61,0,166,166,166,166,166,166,166,166,166,166,166,166,166,166,0,0,0,184,0,0,0,0,0,174,175,167,174,167,165,173,175,167,165,185,184,173,0,0,174,175,165,185,186,173,0,184,0,0,0,0,173,173,173,176,173,165,178,178,176,165,179,180,181,165,165,184,184,168,185,185,174,173,173,186,186,0,192,190,190,193,190,191,0,0,0,0,0,190,190,190,191,191,191,0,0,0,0,194,195,196,197,194,195,196,197,194,195,196,197,195,194,195,196,197,194,194,195,195,196,196,197,197,194,195,196,197,194,195,196,196,197,196,194,195,196,197,196,196,194,195,196,197,196,197,194,195,196,197,194,195,196,197,194,195,196,197,197,194,195,196,197],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[-1,[[3,[-2,-3]]],[],[],4],[[[5,[-1]]],[[7,[6]]],[[8,[6]],9]],[[[5,[-1]]],[[7,[6]]],[[8,[6]]]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[[12,[11]]]]],[]],[[[5,[-1]]],[[5,[-1]]],[14,[8,[6]]]],[[-1,-2],2,[],[]],[15,[[13,[-1,16]]],[]],[[[18,[],[[17,[-1]]]],-1,[7,[6]]],[[13,[[12,[6]],19]]],20],[[[21,[-1,-2]],-3,[7,[6]]],[[13,[[12,[6]],19]]],[[8,[6]]],[[23,[],[[22,[-1]]]],24,25,[28,[],[[26,[27]]]],29,30],[]],[[[31,[-1,-2,-3]],-4,[7,[6]]],[[13,[[12,[6]],19]]],[[8,[6]]],[[23,[],[[22,[-1]]]],24,25,[28,[],[[26,[27]]]],29,30],[[32,[27]]],[]],[[[33,[-1,-2,-3]],-4,[7,[6]]],[[13,[[12,[6]],19]]],[[8,[6]]],[[23,[],[[22,[-1]]]],24,25,[28,[],[[26,[27]]]],29],[[8,[6]],9],[]],[[[34,[],[[17,[-1]]]],-1,[7,[6]],[7,[6]]],[[13,[[12,[6]],19]]],20],[[[33,[-1,-2,-3]],-4,[7,[6]],[7,[6]]],[[13,[[12,[6]],19]]],[[8,[6]]],[[23,[],[[22,[-1]]]],24,25,[28,[],[[26,[27]]]],29],[[8,[6]],9],[]],[-1,[[13,[[5,[-2]]]]],35,[[8,[6]]]],[[[5,[-1]]],2,[[8,[6]]]],[-1,36,[]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[[[18,[],[[17,[-1]]]],-1,[7,[6]]],[[12,[6]]],20],[[[21,[-1,-2]],-3,[7,[6]]],[[12,[6]]],[[8,[6]]],[[23,[],[[22,[-1]]]],24,25,[28,[],[[26,[27]]]],29,30],[]],[[[31,[-1,-2,-3]],-4,[7,[6]]],[[12,[6]]],[[8,[6]]],[[23,[],[[22,[-1]]]],24,25,[28,[],[[26,[27]]]],29,30],[[32,[27]]],[]],[[[33,[-1,-2,-3]],-4,[7,[6]]],[[12,[6]]],[[8,[6]]],[[23,[],[[22,[-1]]]],24,25,[28,[],[[26,[27]]]],29],[[8,[6]],9],[]],[[[34,[],[[17,[-1]]]],-1,[7,[6]],[7,[6]]],[[12,[6]]],20],[[[33,[-1,-2,-3]],-4,[7,[6]],[7,[6]]],[[12,[6]]],[[8,[6]]],[[23,[],[[22,[-1]]]],24,25,[28,[],[[26,[27]]]],29],[[8,[6]],9],[]],[[[5,[-1]],39],40,[[8,[6]]]],[[[5,[-1]],39],40,[[8,[6]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[7,[6]]],[[13,[[5,[-1]],19]]],[[8,[6]],9]],[-1,[[41,[-2]]],42,[[8,[6]],9]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[41,[-1]]],[[21,[-1,-2]]],[[8,[6]]],[]],[[[41,[-1]]],[[31,[-1,-2,-3]]],[[8,[6]]],[],[]],[[[41,[-1]]],[[33,[-1,-2,-3]]],[[8,[6]]],[],[]],[[[5,[-1]],-2],13,[[8,[6]]],43],[-1,-2,[],[]],[-1,36,[]],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[13,[2]]],[],46],[[[5,[-1]]],2,[[8,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[47,47],[[13,[2,19]]]],[[47,-1],[[13,[2,19]]],[]],[-3,[[13,[47,19]]],[],[[48,[-1]]],[[50,[],[[49,[-2]]]]]],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[51,[[7,[6]]]],[52,[[7,[6]]]],[53,[[7,[6]]]],[54,[[7,[6]]]],[47,[[7,[6]]]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[[[7,[47]],[12,[-2]],[7,[[7,[6]]]]],[[13,[2,19]]],[],[[55,[],[[49,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[51,51],[54,54],[47,47],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[51,51],56],[53,53],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[[],54],[[],47],[-1,[[13,[51]]],35],[-1,[[13,[52]]],35],[-1,[[13,[53]]],35],[-1,[[13,[54]]],35],[-1,[[13,[47]]],35],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[[51,51],57],[[52,52],57],[[53,53],57],[[54,54],57],[[47,47],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[51,39],[[13,[2,58]]]],[[51,39],[[13,[2,58]]]],[[52,39],40],[[52,39],40],[[53,39],40],[[54,39],[[13,[2,58]]]],[[54,39],40],[[47,39],[[13,[2,58]]]],[[47,39],40],[-1,-1,[]],[52,51],[-1,-1,[]],[52,53],[-1,-1,[]],[-1,-1,[]],[54,47],[-1,-1,[]],[[[7,[6]]],[[13,[51,19]]]],[[[7,[6]]],[[13,[52,19]]]],[[[7,[6]]],[[13,[53,19]]]],[[[7,[6]]],[[13,[54,19]]]],[[[7,[6]]],[[13,[47,19]]]],[15,[[13,[53,-1]]],[]],[-1,53,42],[[51,-1],2,59],[[54,-1],2,59],[[],51],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[51,51],[[60,[56]]]],[53,-1,[]],0,0,[53,-1,[]],[[51,-1],13,43],[[52,-1],13,43],[[53,-1],13,43],[[54,-1],13,43],[[47,-1],13,43],0,0,[[52,[7,[6]]],54],[[53,[7,[6]]],54],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[-2]]],[],[]],[61,[[13,[51,-1]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[61,[[13,[47,-1]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[51,[[13,[2,19]]]],[[51,[7,[6]],54],[[13,[2,19]]]],[[47,7,[7,[6]]],[[13,[2,19]]]],[[47,7,[7,[[7,[6]]]]],[[13,[2,19]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[62,62],[[13,[2,19]]]],[[62,-1],[[13,[2,19]]],[]],[-3,[[13,[62,19]]],[],[[48,[-1]]],[[50,[],[[49,[-2]]]]]],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[63,[[7,[6]]]],[64,[[7,[6]]]],[65,[[7,[6]]]],[66,[[7,[6]]]],[62,[[7,[6]]]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[[[7,[62]],[12,[-2]],[7,[[7,[6]]]]],[[13,[2,19]]],[],[[55,[],[[49,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[63,63],[66,66],[62,62],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[63,63],56],[65,65],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[[],66],[[],62],[[],67],[-1,[[13,[63]]],35],[-1,[[13,[64]]],35],[-1,[[13,[65]]],35],[-1,[[13,[66]]],35],[-1,[[13,[62]]],35],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[[63,63],57],[[64,64],57],[[65,65],57],[[66,66],57],[[62,62],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[63,39],[[13,[2,58]]]],[[63,39],[[13,[2,58]]]],[[64,39],40],[[64,39],40],[[65,39],40],[[66,39],40],[[66,39],[[13,[2,58]]]],[[62,39],[[13,[2,58]]]],[[62,39],40],[64,63],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[64,65],[-1,-1,[]],[66,62],[-1,-1,[]],[[[7,[6]]],[[13,[63,19]]]],[[[7,[6]]],[[13,[64,19]]]],[[[7,[6]]],[[13,[65,19]]]],[[[7,[6]]],[[13,[66,19]]]],[[[7,[6]]],[[13,[62,19]]]],[15,[[13,[65,-1]]],[]],[-1,65,42],[[63,-1],2,59],[[66,-1],2,59],[[],63],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[63,63],[[60,[56]]]],[65,-1,[]],0,0,[65,-1,[]],[[63,-1],13,43],[[64,-1],13,43],[[65,-1],13,43],[[66,-1],13,43],[[62,-1],13,43],0,0,[[64,[7,[6]]],66],[[65,[7,[6]]],66],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[-2]]],[],[]],[61,[[13,[63,-1]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[61,[[13,[62,-1]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[63,[[13,[2,19]]]],[[63,[7,[6]],66],[[13,[2,19]]]],[[62,7,[7,[6]]],[[13,[2,19]]]],[[62,7,[7,[[7,[6]]]]],[[13,[2,19]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[68,-1,69],[70,-1,69],[71,[[7,[6]]]],[72,[[7,[6]]]],[73,[[7,[6]]]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[68,68],[72,72],[73,73],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[68,68],56],[71,71],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[[],72],[[],73],[-1,[[13,[68]]],35],[-1,[[13,[70]]],35],[-1,[[13,[71]]],35],[-1,[[13,[72]]],35],[-1,[[13,[73]]],35],[-1,[[13,[74]]],35],[70,2],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[[68,68],57],[[70,70],57],[[71,71],57],[[72,72],57],[[73,73],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[68,39],40],[[68,39],[[13,[2,58]]]],[[70,39],40],[[70,39],40],[[71,39],40],[[72,39],40],[[72,39],[[13,[2,58]]]],[[73,39],40],[[73,39],[[13,[2,58]]]],[-1,-1,[]],[-1,-1,[]],[70,68],[-1,-1,[]],[-1,-1,[]],[70,71],[75,71],[-1,-1,[]],[-1,-1,[]],[[[7,[6]]],[[13,[68,19]]]],[[[7,[6]]],[[13,[70,19]]]],[[[7,[6]]],[[13,[71,19]]]],[[[7,[6]]],[[13,[72,19]]]],[[[7,[6]]],[[13,[73,19]]]],[15,[[13,[71,-1]]],[]],[-1,71,42],[[68,-1],2,59],[[],68],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[68,68],[[60,[56]]]],[71,-1,[]],[71,-1,[]],[[68,-1],13,43],[[70,-1],13,43],[[71,-1],13,43],[[72,-1],13,43],[[73,-1],13,43],[[74,-1],13,43],0,[[71,[7,[6]]],72],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[61,[[13,[68,-1]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[61,[[13,[72,-1]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[[68,[7,[6]],72],[[13,[2,19]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[76,76],[77,77],[78,78],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[15,[[79,[[12,[6]]]]]],[[15,15],[[79,[[12,[6]],16]]]],[15,[[79,[[12,[6]],16]]]],[15,[[79,[[12,[6]],16]]]],[15,[[79,[[12,[6]],16]]]],[15,[[79,[-1]]],[[80,[[7,[6]]]]]],[-1,[[13,[76]]],35],[-1,[[13,[77]]],35],[-1,[[13,[78]]],35],[-1,[[79,[[81,[6]]]]],35],[-1,[[79,[[12,[6]]]]],35],[-1,[[79,[[81,[6]]]]],35],[-1,[[79,[[12,[6]]]]],35],[-1,[[79,[[12,[6]]]]],35],[-1,[[79,[[81,[6]]]]],35],[-1,36,[[82,[[7,[6]]]]]],[[-1,15],[[79,[36]]],[[82,[[7,[6]]]]]],[-1,36,[[82,[[7,[6]]]]]],[-1,36,[[82,[[7,[6]]]]]],[-1,36,[[82,[[7,[6]]]]]],[-1,36,[[82,[[7,[6]]]]]],[76,36],[[76,76],57],[[78,78],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[76,39],40],[[77,39],40],[[78,39],40],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[7,[6]]],76],[[[7,[6]]],77],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[83,84],[83,84],[83,84],[[],36],[[],36],[[],36],[[76,-1],13,43],[[77,-1],13,43],[[78,-1],13,43],[[-1,-2],79,[[82,[[7,[6]]]]],43],[[-1,-2],79,[[82,[[7,[6]]]]],43],[[-1,-2],79,[[82,[[7,[6]]]]],43],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[76,[[79,[[12,[6]],16]]]],[77,[[79,[[12,[6]],16]]]],[-1,[[13,[-2]]],[],[]],[36,[[79,[76,-1]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[36,[[79,[78,-1]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,19],[[-1,-2],2,[],[]],[[19,19],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[19,39],40],[[19,39],40],[-1,-1,[]],[85,19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[86,86],[[[7,[6]]],87],[[],[[89,[],[[88,[-1]]]]],90],[[[7,[6]]],91],[90,[[92,[90]]]],[[[7,[-1]],[7,[93]]],[[92,[93]]],[]],0,[[[96,[],[[94,[-1]],[95,[-2]]]],-1],-2,89,[]],[-1,90,42],0,0,[[],[[89,[],[[88,[-1]]]]],90],0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[97,97],-1,[]],[[97,97],-1,[]],[[97,97],-1,[]],[[97,97],-1,[]],[[98,98],-1,[]],[[98,98],-1,[]],[[98,98],-1,[]],[[98,98],-1,[]],[[99,99],-1,[]],[[99,99],-1,[]],[[99,99],-1,[]],[[99,99],-1,[]],[[100,100],-1,[]],[[100,100],-1,[]],[[100,100],-1,[]],[[100,100],-1,[]],[[97,97],2],[[97,97],2],[[98,98],2],[[98,98],2],[[99,99],2],[[99,99],2],[[100,100],2],[[100,100],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[97,97],[98,98],[99,99],[100,100],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[-1,[[13,[97]]],35],[-1,[[13,[98]]],35],[-1,[[13,[99]]],35],[-1,[[13,[100]]],35],[[97,100],-1,[]],[[98,100],-1,[]],[[99,100],-1,[]],[[100,100],-1,[]],[[97,97],57],[[98,98],57],[[99,99],57],[[100,100],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[[7,[6]]],100],[[97,39],40],[[98,39],40],[[99,39],40],[[100,39],40],[-1,-1,[]],[101,97],[-1,-1,[]],[102,98],[-1,-1,[]],[103,99],[-1,-1,[]],[104,100],[105,100],[[[81,[6]]],[[13,[97,19]]]],[[[81,[6]]],[[13,[98,19]]]],[[[81,[6]]],[[13,[99,19]]]],[[[81,[6]]],[[13,[100,19]]]],[[],97],[[],98],[[],99],[[],100],[[[7,[6]]],97],[[[7,[6]]],98],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[100,[[92,[100]]]],[[97,100],-1,[]],[97,-1,[]],[97,-1,[]],[97,-1,[]],[98,-1,[]],[98,-1,[]],[98,-1,[]],[[98,100],-1,[]],[[99,100],-1,[]],[99,-1,[]],[99,-1,[]],[99,-1,[]],[100,-1,[]],[[100,100],-1,[]],[100,-1,[]],[100,-1,[]],[97,2],[97,2],[98,2],[98,2],[99,2],[99,2],[100,2],[100,2],[[[7,[-1]],[7,[97]]],[[92,[97]]],[]],[[[7,[-1]],[7,[98]]],[[92,[98]]],[]],[97,-1,[]],[97,-1,[]],[98,-1,[]],[98,-1,[]],[99,-1,[]],[99,-1,[]],[100,-1,[]],[100,-1,[]],[[97,-1],-2,[],[]],[-1,100,42],[[97,-1],13,43],[[98,-1],13,43],[[99,-1],13,43],[[100,-1],13,43],[[97,97],-1,[]],[[97,97],-1,[]],[[97,97],-1,[]],[[97,97],-1,[]],[[98,98],-1,[]],[[98,98],-1,[]],[[98,98],-1,[]],[[98,98],-1,[]],[[99,99],-1,[]],[[99,99],-1,[]],[[99,99],-1,[]],[[99,99],-1,[]],[[100,100],-1,[]],[[100,100],-1,[]],[[100,100],-1,[]],[[100,100],-1,[]],[[97,97],2],[[97,97],2],[[98,98],2],[[98,98],2],[[99,99],2],[[99,99],2],[[100,100],2],[[100,100],2],[97,[[81,[6]]]],[98,[[81,[6]]]],[99,[[81,[6]]]],[100,[[81,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[61,[[13,[97,-1]]],[]],[-1,[[13,[-2]]],[],[]],[61,[[13,[98,-1]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],97],[[],98],[[],99],[[],100],0,0,[[106,-1],-2,[],[]],[[-1,-1],106,[]],[107,[[12,[6]]]],[[106,-1,-2,-1],-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[[108,[-1,-2]],-2],-1,[],[]],[[[81,[-1]],[81,[-2]],[109,[10,[12,[-2]]]],10,-2],-2,[107,14,9],[]],[[-1,-1],[[108,[-1,-2]]],[[110,[],[[95,[]]]],[111,[],[[95,[]]]],86,14,9],[107,14,9]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[[[108,[-1,-2]],-2,-1,-2],-1,[],[]],[-1,45,[]],[-1,-2,[],[]],0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[112,112],-1,[]],[[112,112],-1,[]],[[112,112],-1,[]],[[112,112],112],[[113,113],113],[[113,113],-1,[]],[[113,113],-1,[]],[[113,113],-1,[]],[[112,112],2],[[112,112],2],[[113,113],2],[[113,113],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[112,112],[113,113],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[112,[[81,[6]]]],[[[81,[6]]],[[13,[112,19]]]],[[],112],[-1,[[13,[112]]],35],[-1,[[13,[113]]],35],[[112,113],-1,[]],[[113,113],[[13,[113,19]]]],[[113,-1],113,[]],[112,112],[[112,112],57],[[113,113],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[[7,[6]]],113],[[112,39],40],[[113,39],40],[114,112],[-1,-1,[]],[115,113],[105,113],[-1,-1,[]],[[[81,[6]]],[[13,[112,19]]]],[[[81,[6]]],[[13,[113,19]]]],[[[81,[6]]],113],[[[81,[6]]],113],[[[81,[6]]],112],[[],112],[[],113],[[],113],[[[7,[6]]],112],[[[7,[6]]],113],[-1,-2,[],[]],[-1,-2,[],[]],[113,[[92,[113]]]],[[[7,[6]]],112],[[112,113],112],[112,-1,[]],[112,-1,[]],[112,-1,[]],[113,-1,[]],[113,-1,[]],[[113,113],113],[113,-1,[]],[112,2],[112,2],[113,2],[113,2],[[[7,[-1]],[7,[112]]],[[92,[112]]],[]],[112,112],[112,-1,[]],[113,-1,[]],[113,113],[-1,113,42],[[112,-1],13,43],[[113,-1],13,43],[[112,112],-1,[]],[[112,112],-1,[]],[[112,112],-1,[]],[[112,112],112],[[113,113],113],[[113,113],-1,[]],[[113,113],-1,[]],[[113,113],-1,[]],[[112,112],2],[[112,112],2],[[113,113],2],[[113,113],2],[112,[[81,[6]]]],[113,[[81,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[6]]],[[13,[112,19]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],112],[[],113],[113,2],0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[116,116],-1,[]],[[116,116],-1,[]],[[116,116],116],[[116,116],-1,[]],[[117,117],-1,[]],[[117,117],-1,[]],[[117,117],-1,[]],[[117,117],117],[[116,116],2],[[116,116],2],[[117,117],2],[[117,117],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[116,116],[117,117],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],116],[[],117],[-1,[[13,[117]]],35],[[116,117],[[13,[116,19]]]],[[117,117],[[13,[117,19]]]],[116,116],[[116,116],57],[[117,117],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[116,39],40],[[117,39],40],[-1,-1,[]],[118,116],[-1,-1,[]],[119,117],[105,117],[[[81,[6]]],[[13,[117,19]]]],[[],116],[[],117],[-1,-2,[],[]],[-1,-2,[],[]],[117,[[92,[117]]]],[[116,117],116],[116,-1,[]],[116,-1,[]],[116,-1,[]],[[117,117],-1,[]],[117,-1,[]],[117,-1,[]],[117,-1,[]],[116,2],[116,2],[117,2],[117,2],[116,116],[116,-1,[]],[117,-1,[]],[117,117],[-1,117,42],[[117,-1],13,43],[[116,116],-1,[]],[[116,116],-1,[]],[[116,116],-1,[]],[[116,116],116],[[117,117],117],[[117,117],-1,[]],[[117,117],-1,[]],[[117,117],-1,[]],[[116,116],2],[[116,116],2],[[117,117],2],[[117,117],2],[117,[[81,[6]]]],[117,[[12,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],116],[[],117],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,[[3,[-2,-3]]],[],[],4],[120,[[7,[6]]]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[[12,[11]]]]],[]],[120,120],[121,121],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[120,120],56],[[],[[122,[-1]]],[123,124]],[[],125],[[],121],[-1,[[13,[120]]],35],[-1,[[13,[121]]],35],[[[127,[],[[126,[-1]]]]],-1,[[128,[120]],129,130,131,9]],[132,120],[-1,120,[[82,[[7,[6]]]]]],[121,120],0,[-2,120,[[82,[[7,[6]]]]],[[55,[],[[49,[-1]]]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[[120,120],57],[[121,121],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[133,120],[[[122,[-1]]],120,[124,123]],[125,120],[[[122,[-1]]],[[134,[2]]],[124,123]],[[120,39],[[13,[2,58]]]],[[120,39],[[13,[2,58]]]],[[121,39],40],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[120,-1],2,59],[[132,-1],2,[[82,[[7,[6]]]]]],[[121,-1],2,[[82,[[7,[6]]]]]],[[132,-2],2,[[82,[[7,[6]]]]],[[50,[],[[49,[-1]]]]]],[[121,-2],2,[[82,[[7,[6]]]]],[[50,[],[[49,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],133],[[[81,[6]]],120],[[120,120],[[60,[56]]]],[[132,-1],2,[[82,[[7,[6]]]]]],[[121,-1],2,[[82,[[7,[6]]]]]],[[132,-2],2,[[82,[[7,[6]]]]],[[50,[],[[49,[-1]]]]]],[[121,-2],2,[[82,[[7,[6]]]]],[[50,[],[[49,[-1]]]]]],[[120,-1],13,43],[[121,-1],13,43],[120,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[120,[[12,[6]]]],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[[132,132],2],[[121,121],2],[[133,-1],2,[[82,[[7,[6]]]]]],[[[122,[-1]],-2],2,[124,123],[[82,[[7,[6]]]]]],[[125,-1],2,[[82,[[7,[6]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[7,[6]]],[[13,[2,135]]],[]],[[[122,[-1]],[7,[6]]],[[134,[10]]],[124,123]],[[-1,[7,[6]]],[[13,[2,136]]],[]],[[-1,-2],[[13,[2]]],[],46],0,0,[[137,[7,[6]],[7,[6]],10],[[13,[[12,[6]],19]]]],[[138,[7,[6]]],120],0,[[-1,1],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[139,139],[[-1,-2],2,[],[]],[[],139],[-1,[[13,[139]]],35],[[139,139],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[139,39],40],[-1,-1,[]],[[139,-1],2,59],[-1,-2,[],[]],[83,84],0,[15,[[13,[139,19]]]],[15,[[13,[[2,[36,36]],19]]]],[[],36],[[139,-1],13,43],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],0,[-1,45,[]],[-1,-2,[],[]],0,[-1,[[3,[-2,-3]]],[],[],4],[140,[[7,[6]]]],[140,[[7,[6]]]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[[12,[11]]]]],[]],[15,[[13,[-1,16]]],[]],[140,2],[-1,36,[]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[[140,140],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[140,39],40],[-1,-1,[]],[[[7,[6]]],[[13,[140,19]]]],[-1,-2,[],[]],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,-2,[],[]],[[-1,-2],[[13,[2]]],[],46],[140,2],0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[141,141],[142,142],[143,143],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,[7,[6]]],[[13,[[7,[6]],144]]],[[82,[[7,[6]]]]]],[[-1,[7,[6]]],[[13,[[7,[6]],144]]],[[82,[[7,[6]]]]]],[[[7,[6]]],[[13,[[7,[6]],145]]]],[[[7,[6]]],[[13,[[7,[6]],145]]]],[15,[[13,[[12,[6]],144]]]],[15,[[13,[[12,[6]],144]]]],[[[7,[6]],[7,[6]]],[[13,[15,146]]]],[[[7,[6]],[7,[6]]],[[13,[15,146]]]],[[[7,[6]]],36],[[[7,[6]]],36],[[[7,[6]]],10],[[[7,[6]]],10],[[141,141],57],[[143,143],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[141,39],[[13,[2,58]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[7,[6]]],[[92,[143]]]],[[[7,[6]]],[[92,[142]]]],[[[7,[6]],[7,[6]]],[[92,[142]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[[142,[7,[6]],143],[[92,[2]]]],[[142,[7,[6]],143],[[92,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[147,[[7,[6]]]],[148,[[7,[6]]]],[149,[[7,[6]]]],[150,[[7,[6]]]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[147,147],[149,149],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[147,147],56],[150,150],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[-1,[[13,[147]]],35],[-1,[[13,[148]]],35],[-1,[[13,[149]]],35],[-1,[[13,[150]]],35],[148,2],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[[147,147],57],[[148,148],57],[[149,149],57],[[150,150],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[147,39],[[13,[2,58]]]],[[147,39],40],[[148,39],40],[[148,39],40],[[149,39],[[13,[2,58]]]],[[149,39],40],[[150,39],40],[-1,-1,[]],[148,147],[-1,-1,[]],[151,149],[-1,-1,[]],[148,150],[-1,-1,[]],[[[7,[6]]],[[13,[147,19]]]],[[[7,[6]]],[[13,[148,19]]]],[[[7,[6]]],[[13,[149,19]]]],[[[7,[6]]],[[13,[150,19]]]],[15,[[13,[150,-1]]],[]],[-1,150,42],[[147,-1],2,59],[[149,-1],2,59],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[147,147],[[60,[56]]]],[150,-1,[]],0,0,[150,-1,[]],0,0,0,[[147,-1],13,43],[[148,-1],13,43],[[149,-1],13,43],[[150,-1],13,43],0,[[150,[7,[6]]],149],[[150,[7,[6]]],151],[[150,[7,[6]]],149],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[61,[[13,[147,-1]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[61,[[13,[149,-1]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[[147,[7,[6]],149],[[13,[2,19]]]],[[147,[7,[6]],149],[[13,[2,19]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,[[3,[-2,-3]]],[],[],4],[152],[152],[152,153],[152,153],[151,[[7,[6]]]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[13,[[12,[11]]]]],[]],[152,152],[151,151],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[152,152],56],[[152,152],56],[15,[[13,[-1,16]]],[]],[-1,[[13,[151]]],35],[-1,36,[]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[[152,152],57],[[151,151],57],[[152,152],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[152,39],[[13,[2,58]]]],[[152,39],[[13,[2,58]]]],[[151,39],40],[[151,39],[[13,[2,58]]]],[153,152],[-1,-1,[]],[-1,-1,[]],[[[7,[6]]],[[13,[151,19]]]],[[[7,[6]]],[[13,[152,154]]]],[[[7,[6]]],[[13,[152,154]]]],[[[7,[6]]],[[13,[152,154]]]],[15,[[13,[152,154]]]],[[152,-1],2,59],[[151,-1],2,59],[-1,-2,[],[]],[-1,-2,[],[]],[152,2],[[152,152],[[60,[56]]]],[[151,[7,[6]]],[[13,[147,19]]]],[[151,-1],13,43],[152,[[81,[6]]]],[152,155],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[-1,36,[]],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[[149,147,[7,[6]]],[[13,[151,19]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[[152,156,157],[[13,[2,154]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[13,[2]]],[],46],0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[-1,[[3,[-2,-3]]],[],[],4],[158,[[7,[6]]]],[159,[[7,[6]]]],[160,[[7,[6]]]],[161,[[7,[6]]]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[-1,[[13,[[12,[11]]]]],[]],[158,158],[160,160],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[158,158],56],0,[161,161],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[15,[[13,[-1,16]]],[]],[-1,[[13,[158]]],35],[-1,[[13,[159]]],35],[-1,[[13,[160]]],35],[-1,[[13,[161]]],35],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[[158,158],57],[[159,159],57],[[160,160],57],[[161,161],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[158,39],40],[[158,39],[[13,[2,58]]]],[[159,39],40],[[159,39],40],[[160,39],40],[[160,39],[[13,[2,58]]]],[[161,39],40],[159,158],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[162,160],[159,161],[-1,-1,[]],[[[7,[6]]],[[13,[158,19]]]],[[[7,[6]]],[[13,[159,19]]]],[[[7,[6]]],[[13,[160,19]]]],[[[7,[6]]],[[13,[161,19]]]],[15,[[13,[161,-1]]],[]],[-1,161,42],[[158,-1],2,59],[[160,-1],2,59],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[158,158],[[60,[56]]]],[161,-1,[]],0,0,[161,-1,[]],0,0,0,[[158,-1],13,43],[[159,-1],13,43],[[160,-1],13,43],[[161,-1],13,43],0,[[161,[7,[6]]],160],[[161,[7,[6]]],162],[[161,[7,[6]]],160],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[-2]]],[],[]],[61,[[13,[158,-1]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[61,[[13,[160,-1]]],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[[158,[7,[6]],160],[[13,[2,19]]]],[[158,[7,[6]],160],[[13,[2,19]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],[[-1,-2],[[13,[2]]],[],46],0,0,[[-1,1],2,[]],[-1,[[3,[-2,-3]]],[],[],4],[162,[[7,[6]]]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[13,[[12,[11]]]]],[]],[162,162],[[-1,-2],2,[],[]],[15,[[13,[-1,16]]],[]],[-1,[[13,[162]]],35],[-1,36,[]],[-1,-2,[],[[38,[37]]]],[-1,-2,[],[[38,[37]]]],[[162,162],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[162,39],[[13,[2,58]]]],[[162,39],40],[-1,-1,[]],[[[7,[6]]],[[13,[162,19]]]],[[162,-1],2,59],[-1,-2,[],[]],[[162,[7,[6]]],[[13,[158,19]]]],0,[[162,-1],13,43],0,[-1,-2,[],[]],[-1,36,[]],[-1,[[13,[[3,[-2,-3]],[44,[-2]]]]],[],[],4],[-1,[[13,[-2]]],[],[]],[[160,158,[7,[6]]],[[13,[162,19]]]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,-2,[],[]],[[-1,-2],[[13,[2]]],[],46],0,0,0,0,[[-1,1],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[61,61],[[-1,-2],2,[],[]],[[61,61],56],[-1,[[13,[163]]],35],[-1,[[13,[61]]],35],[[61,61],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[61,39],40],[[61,39],[[13,[2,58]]]],[-1,-1,[]],[68,61],[97,61],[158,61],[51,61],[147,61],[47,61],[72,61],[160,61],[149,61],[62,61],[63,61],[-1,-1,[]],[98,61],[[[81,[6]]],[[13,[164,19]]]],[[61,-1],2,59],[-1,-2,[],[]],[-1,-2,[],[]],[[],57],[83,84],[15,[[13,[-1,16]]],165],[[61,61],[[60,[56]]]],[[],36],[[163,-1],13,43],[[61,-1],13,43],[164,[[81,[6]]]],[-1,-2,[],[]],[-1,36,[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,1],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[166,[-1]]],[[166,[-1]]],[14,167]],[[-1,-2],2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-2,[[166,[-1]]],167,[[168,[-1]],169]],[[[166,[-1]],120],-1,167],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[173,[],[[170,[-1]],[171,[-2]],[172,[-3]]]],[173,[],[[170,[-1]],[171,[-2]],[172,[-3]]]]],[[13,[2,19]]],[[167,[],[[171,[-2]]]]],[[174,[],[[170,[-1]]]]],[[175,[],[[170,[-1]]]]]],[[[173,[],[[170,[-1]],[171,[-2]],[172,[-3]]]],-1],[[13,[2,19]]],[[167,[],[[171,[-2]]]]],[[174,[],[[170,[-1]]]]],[[175,[],[[170,[-1]]]]]],[-3,[[13,[[173,[],[[170,[-1]],[171,[-4]],[172,[-5]]]],19]]],[[167,[],[[171,[-4]]]]],[[48,[-1]]],[[50,[],[[49,[-2]]]]],[[174,[],[[170,[-1]]]]],[[175,[],[[170,[-1]]]]]],[176,[[7,[6]]]],[[[7,[[173,[],[[170,[-1]],[171,[-2]],[172,[-3]]]]]],[12,[-4]],[7,[[7,[6]]]]],[[13,[2,19]]],[[167,[],[[171,[-2]]]]],[[174,[],[[170,[-1]]]]],[[175,[],[[170,[-1]]]]],[[177,[],[[49,[-2]]]]]],[[[165,[],[[171,[-1]],[172,[-2]],[170,[-3]]]]],[[165,[],[[171,[-1]],[172,[-2]],[170,[-3]]]]],[[174,[],[[172,[-2]],[170,[-3]]]]],[[175,[],[[171,[-1]],[170,[-3]]]]],[[167,[],[[171,[-1]],[172,[-2]]]]]],[15,[[13,[178,16]]]],[178,36],[[[7,[6]]],[[13,[176,19]]]],[-1,[[165,[],[[171,[-2]],[172,[-3]],[170,[-4]]]]],42,[[174,[],[[172,[-3]],[170,[-4]]]]],[[175,[],[[171,[-2]],[170,[-4]]]]],[[167,[],[[171,[-2]],[172,[-3]]]]]],[-1,179,42],[-1,180,42],[[],181],[[[165,[],[[171,[-1]],[172,[-2]],[170,[-3]]]]],-2,[[174,[],[[172,[-2]],[170,[-3]]]]],[[175,[],[[171,[-1]],[170,[-3]]]]],[[167,[],[[171,[-1]],[172,[-2]]]]]],[[[165,[],[[171,[-1]],[172,[-2]],[170,[-3]]]]],-1,[[174,[],[[172,[-2]],[170,[-3]]]]],[[175,[],[[171,[-1]],[170,[-3]]]]],[[167,[],[[171,[-1]],[172,[-2]]]]]],[[[184,[],[[171,[-1]],[182,[-2]],[183,[-3]]]],[7,[6]]],[[13,[-1,19]]],[],[[185,[],[[170,[[184,[],[[171,[-1]],[182,[-2]],[183,[-3]]]]]],[171,[-1]]]]],133],[[[184,[],[[171,[-1]],[182,[-2]],[183,[-3]]]],[7,[6]]],[[13,[-1,19]]],[],[[185,[],[[170,[[184,[],[[171,[-1]],[182,[-2]],[183,[-3]]]]]],[171,[-1]]]]],133],[[168,[7,[6]]],-1,[]],[[[185,[],[[171,[-1]],[170,[-2]]]],[7,[6]]],-2,[],[[184,[],[[182,[[185,[],[[171,[-1]],[170,[-2]]]]]],[171,[-1]]]]]],[[[185,[],[[171,[-1]],[170,[-2]]]],[7,[6]]],-2,[],[[184,[],[[182,[[185,[],[[171,[-1]],[170,[-2]]]]]],[171,[-1]]]]]],[[[174,[],[[172,[-1]],[170,[-2]]]],[7,[6]],-2],[[13,[2,19]]],[[175,[],[[171,[[174,[],[[172,[-1]],[170,[-2]]]]]]]]],[[167,[],[[171,[[174,[],[[172,[-1]],[170,[-2]]]]]]]]]],[[[173,[],[[170,[-1]],[171,[-2]],[172,[-3]]]],7,[7,[6]]],[[13,[2,19]]],[[167,[],[[171,[-2]]]]],[[174,[],[[170,[-1]]]]],[[175,[],[[170,[-1]]]]]],[[[173,[],[[170,[-1]],[171,[-2]],[172,[-3]]]],7,[7,[[7,[6]]]]],[[13,[2,19]]],[[167,[],[[171,[-2]]]]],[[174,[],[[170,[-1]]]]],[[175,[],[[170,[-1]]]]]],[[[186,[],[[170,[-1]]]],[7,[6]],-1],[[13,[2,19]]],[[184,[],[[171,[[186,[],[[170,[-1]]]]]]]]]],[[[186,[],[[170,[-1]]]],[7,[6]],-1],[[13,[2,19]]],[[184,[],[[171,[[186,[],[[170,[-1]]]]]]]]]],[6,10],0,0,0,0,0,0,0,0,0,0,0,[-1,[[190,[],[[187,[-2]],[188,[-4]],[189,[-3]]]]],42,[[191,[],[[189,[-3]]]]],[[192,[],[[188,[-4]]]]],[[193,[],[[189,[-3]]]]]],[[[190,[],[[187,[-1]],[188,[-3]],[189,[-2]]]],[7,[6]]],[[2,[[81,[6]],-1]]],[[191,[],[[189,[-2]]]]],[[192,[],[[188,[-3]]]]],[[193,[],[[189,[-2]]]]]],[[[190,[],[[187,[-1]],[188,[-3]],[189,[-2]]]],[7,[6]]],-1,[[191,[],[[189,[-2]]]]],[[192,[],[[188,[-3]]]]],[[193,[],[[189,[-2]]]]]],[[[191,[],[[189,[-1]]]]],[[81,[6]]],192],[[[191,[],[[189,[-1]]]],[7,[6]],-1],[[13,[2,19]]],192],[[[191,[],[[189,[-1]]]],[7,[6]],-1,[81,[6]]],[[13,[2,19]]],192],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[194]]],35],[-1,[[13,[195]]],35],[-1,[[13,[196]]],35],[-1,[[13,[197]]],35],[195,2],[[194,194],57],[[195,195],57],[[196,196],57],[[197,197],57],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[-1,-2],57,[],[]],[[194,39],40],[[195,39],40],[[196,39],40],[[197,39],40],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[195,196],[-1,-1,[]],[-1,196,42],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[196,[7,[6]]],197],[[194,-1],13,43],[[195,-1],13,43],[[196,-1],13,43],[[197,-1],13,43],0,[197,[[81,[6]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[[197,[7,[6]],-1],[[13,[2,19]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[1664,1665],"p":[[5,"Private",2143],[1,"tuple"],[5,"BitSlice",2144],[10,"BitOrder",2145],[5,"GenericByteArray",22],[1,"u8"],[1,"slice"],[10,"ArrayLength",2146],[10,"Debug",2147],[1,"usize"],[5,"u5",2148],[5,"Vec",2149],[6,"Result",2150],[10,"Clone",2151],[1,"str"],[5,"Report",2152],[17,"IVType"],[10,"Cipher",22],[6,"FastCryptoError",787],[10,"Nonce",22],[5,"AesCtr",22],[17,"KeySize"],[10,"KeySizeUser",2153],[10,"KeyInit",2153],[10,"BlockCipher",2154],[17,"BlockSize"],[8,"U16",2155],[10,"BlockSizeUser",2153],[10,"BlockEncrypt",2154],[10,"BlockDecrypt",2154],[5,"AesCbc",22],[10,"Padding",2156],[5,"AesGcm",22],[10,"AuthenticatedCipher",22],[10,"Deserializer",2157],[5,"String",2158],[1,"char"],[10,"FromIterator",2159],[5,"Formatter",2147],[8,"Result",2147],[8,"AesKey",22],[10,"AllowedRng",1996],[10,"Serializer",2160],[6,"BitSpanError",2161],[5,"TypeId",2162],[10,"WriteBase32",2148],[5,"BLS12381AggregateSignature",122],[10,"Borrow",2163],[17,"Item"],[10,"IntoIterator",2159],[5,"BLS12381PublicKey",122],[5,"BLS12381PrivateKey",122],[5,"BLS12381KeyPair",122],[5,"BLS12381Signature",122],[10,"Iterator",2164],[6,"Ordering",2165],[1,"bool"],[5,"Error",2147],[10,"Hasher",2166],[6,"Option",2167],[5,"BytesRepresentation",1926],[5,"BLS12381AggregateSignature",310],[5,"BLS12381PublicKey",310],[5,"BLS12381PrivateKey",310],[5,"BLS12381KeyPair",310],[5,"BLS12381Signature",310],[8,"BLS12381AggregateSignatureAsBytes",310],[5,"Ed25519PublicKey",499],[10,"Sized",2168],[5,"Ed25519PrivateKey",499],[5,"Ed25519KeyPair",499],[5,"Ed25519Signature",499],[5,"Ed25519AggregateSignature",499],[5,"Signature",2169],[5,"SigningKey",2170],[5,"Base64",689],[5,"Hex",689],[5,"Base58",689],[8,"Result",2152],[10,"TryFrom",2171],[1,"array"],[10,"AsRef",2171],[5,"SchemaGenerator",2172],[6,"Schema",2173],[5,"Error",2174],[10,"Doubling",820],[10,"FiatShamirChallenge",820],[17,"ScalarType"],[10,"GroupElement",820],[10,"Scalar",820],[10,"HashToGroupElement",820],[8,"FastCryptoResult",787],[10,"MultiScalarMul",820],[17,"Other"],[17,"Output"],[10,"Pairing",820],[5,"G1Element",843],[5,"G2Element",843],[5,"GTElement",843],[5,"Scalar",843],[5,"blst_p1",2175],[5,"blst_p2",2175],[5,"blst_fp12",2175],[5,"blst_fr",2175],[1,"u64"],[10,"ScalarMultiplier",1040],[10,"ToLittleEndianBytes",1040],[5,"WindowedScalarMultiplier",1047],[5,"HashMap",2176],[10,"Add",2177],[10,"Mul",2177],[5,"RistrettoPoint",1060],[5,"RistrettoScalar",1060],[5,"RistrettoPoint",2178],[5,"Scalar",2179],[5,"ProjectivePoint",1169],[5,"Scalar",1169],[8,"Projective",2180],[8,"Fr",2181],[5,"Digest",1263],[5,"EllipticCurveMultisetHash",1263],[5,"HashFunctionWrapper",1263],[10,"Default",2182],[10,"Digest",2183],[5,"Blake3",1263],[17,"TypedDigest"],[10,"Hash",1263],[10,"Into",2171],[10,"Eq",2165],[10,"Hash",2166],[10,"Copy",2168],[10,"MultisetHash",1263],[10,"HashFunction",1263],[8,"Result",2184],[5,"Error",2185],[5,"Error",2185],[8,"HkdfIkm",1378],[8,"HmacKey",1378],[5,"JWTHeader",1382],[5,"PrivateSeed",1409],[5,"Base64UrlUnpadded",1436],[5,"RSAPublicKey",1436],[5,"RSASignature",1436],[6,"Error",2186],[5,"InvalidEncodingError",2186],[5,"InvalidLengthError",2186],[5,"Secp256k1PublicKey",1500],[5,"Secp256k1PrivateKey",1500],[5,"Secp256k1Signature",1500],[5,"Secp256k1KeyPair",1500],[5,"Secp256k1RecoverableSignature",1655],[5,"Secp256k1Sig",1655],[5,"Signature",2187],[6,"Error",2188],[5,"SerializedSignature",2189],[5,"Message",2188],[5,"PublicKey",2190],[5,"Secp256r1PublicKey",1731],[5,"Secp256r1PrivateKey",1731],[5,"Secp256r1Signature",1731],[5,"Secp256r1KeyPair",1731],[5,"Secp256r1RecoverableSignature",1887],[5,"SerializationHelper",1926],[10,"ToFromByteArray",1926],[10,"KeyPair",1996],[5,"SignatureService",1981],[10,"Authenticator",1996],[10,"Signer",1996],[10,"Send",2168],[17,"Sig"],[17,"PubKey"],[17,"PrivKey"],[10,"AggregateAuthenticator",1996],[10,"VerifyingKey",1996],[10,"SigningKey",1996],[10,"ToFromBytes",1996],[10,"ExactSizeIterator",2191],[10,"EncodeDecodeBase64",1996],[10,"Generate",1996],[10,"FromUniformBytes",1996],[10,"InsecureDefault",1996],[17,"Signer"],[17,"DefaultHash"],[10,"RecoverableSignature",1996],[10,"RecoverableSigner",1996],[10,"VerifyRecoverable",1996],[17,"Proof"],[17,"PrivateKey"],[17,"PublicKey"],[10,"VRFKeyPair",2058],[10,"VRFProof",2058],[10,"VRFPublicKey",2058],[10,"VRFPrivateKey",2058],[5,"ECVRFPublicKey",2075],[5,"ECVRFPrivateKey",2075],[5,"ECVRFKeyPair",2075],[5,"ECVRFProof",2075],[5,"SingleSignature",499],[5,"Bech32",689],[10,"Encoding",689],[10,"ReverseWrapper",1263],[10,"Encoding",1436]],"b":[[79,"impl-Display-for-GenericByteArray%3CN%3E"],[80,"impl-Debug-for-GenericByteArray%3CN%3E"],[221,"impl-Display-for-BLS12381PublicKey"],[222,"impl-Debug-for-BLS12381PublicKey"],[223,"impl-Debug-for-BLS12381PrivateKey"],[224,"impl-Display-for-BLS12381PrivateKey"],[226,"impl-Display-for-BLS12381Signature"],[227,"impl-Debug-for-BLS12381Signature"],[228,"impl-Display-for-BLS12381AggregateSignature"],[229,"impl-Debug-for-BLS12381AggregateSignature"],[410,"impl-Display-for-BLS12381PublicKey"],[411,"impl-Debug-for-BLS12381PublicKey"],[412,"impl-Debug-for-BLS12381PrivateKey"],[413,"impl-Display-for-BLS12381PrivateKey"],[415,"impl-Debug-for-BLS12381Signature"],[416,"impl-Display-for-BLS12381Signature"],[417,"impl-Display-for-BLS12381AggregateSignature"],[418,"impl-Debug-for-BLS12381AggregateSignature"],[600,"impl-Debug-for-Ed25519PublicKey"],[601,"impl-Display-for-Ed25519PublicKey"],[602,"impl-Display-for-Ed25519PrivateKey"],[603,"impl-Debug-for-Ed25519PrivateKey"],[605,"impl-Debug-for-Ed25519Signature"],[606,"impl-Display-for-Ed25519Signature"],[607,"impl-Debug-for-Ed25519AggregateSignature"],[608,"impl-Display-for-Ed25519AggregateSignature"],[614,"impl-From%3CEd25519PrivateKey%3E-for-Ed25519KeyPair"],[615,"impl-From%3CSigningKey%3E-for-Ed25519KeyPair"],[720,"impl-DeserializeAs%3C\'de,+%5Bu8;+N%5D%3E-for-Base64"],[721,"impl-DeserializeAs%3C\'de,+Vec%3Cu8%3E%3E-for-Base64"],[722,"impl-DeserializeAs%3C\'de,+%5Bu8;+N%5D%3E-for-Hex"],[723,"impl-DeserializeAs%3C\'de,+Vec%3Cu8%3E%3E-for-Hex"],[724,"impl-DeserializeAs%3C\'de,+Vec%3Cu8%3E%3E-for-Base58"],[725,"impl-DeserializeAs%3C\'de,+%5Bu8;+N%5D%3E-for-Base58"],[809,"impl-Debug-for-FastCryptoError"],[810,"impl-Display-for-FastCryptoError"],[857,"impl-Add%3C%26G1Element%3E-for-G1Element"],[858,"impl-Add-for-G1Element"],[859,"impl-Add%3C%26G1Element%3E-for-%26G1Element"],[860,"impl-Add%3CG1Element%3E-for-%26G1Element"],[861,"impl-Add%3C%26G2Element%3E-for-%26G2Element"],[862,"impl-Add%3CG2Element%3E-for-%26G2Element"],[863,"impl-Add%3C%26G2Element%3E-for-G2Element"],[864,"impl-Add-for-G2Element"],[865,"impl-Add%3C%26GTElement%3E-for-GTElement"],[866,"impl-Add%3CGTElement%3E-for-%26GTElement"],[867,"impl-Add-for-GTElement"],[868,"impl-Add%3C%26GTElement%3E-for-%26GTElement"],[869,"impl-Add%3CScalar%3E-for-%26Scalar"],[870,"impl-Add%3C%26Scalar%3E-for-%26Scalar"],[871,"impl-Add-for-Scalar"],[872,"impl-Add%3C%26Scalar%3E-for-Scalar"],[873,"impl-AddAssign-for-G1Element"],[874,"impl-AddAssign%3C%26G1Element%3E-for-G1Element"],[875,"impl-AddAssign%3C%26G2Element%3E-for-G2Element"],[876,"impl-AddAssign-for-G2Element"],[877,"impl-AddAssign-for-GTElement"],[878,"impl-AddAssign%3C%26GTElement%3E-for-GTElement"],[879,"impl-AddAssign-for-Scalar"],[880,"impl-AddAssign%3C%26Scalar%3E-for-Scalar"],[929,"impl-From%3Cblst_fr%3E-for-Scalar"],[930,"impl-From%3Cu64%3E-for-Scalar"],[946,"impl-Mul%3CScalar%3E-for-G1Element"],[947,"impl-Mul%3C%26%3CG1Element+as+GroupElement%3E::ScalarType%3E-for-G1Element"],[948,"impl-Mul%3C%3CG1Element+as+GroupElement%3E::ScalarType%3E-for-%26G1Element"],[949,"impl-Mul%3C%26%3CG1Element+as+GroupElement%3E::ScalarType%3E-for-%26G1Element"],[950,"impl-Mul%3C%3CG2Element+as+GroupElement%3E::ScalarType%3E-for-%26G2Element"],[951,"impl-Mul%3C%26%3CG2Element+as+GroupElement%3E::ScalarType%3E-for-%26G2Element"],[952,"impl-Mul%3C%26%3CG2Element+as+GroupElement%3E::ScalarType%3E-for-G2Element"],[953,"impl-Mul%3CScalar%3E-for-G2Element"],[954,"impl-Mul%3CScalar%3E-for-GTElement"],[955,"impl-Mul%3C%3CGTElement+as+GroupElement%3E::ScalarType%3E-for-%26GTElement"],[956,"impl-Mul%3C%26%3CGTElement+as+GroupElement%3E::ScalarType%3E-for-%26GTElement"],[957,"impl-Mul%3C%26%3CGTElement+as+GroupElement%3E::ScalarType%3E-for-GTElement"],[958,"impl-Mul%3C%3CScalar+as+GroupElement%3E::ScalarType%3E-for-%26Scalar"],[959,"impl-Mul-for-Scalar"],[960,"impl-Mul%3C%26%3CScalar+as+GroupElement%3E::ScalarType%3E-for-%26Scalar"],[961,"impl-Mul%3C%26%3CScalar+as+GroupElement%3E::ScalarType%3E-for-Scalar"],[962,"impl-MulAssign%3C%26%3CG1Element+as+GroupElement%3E::ScalarType%3E-for-G1Element"],[963,"impl-MulAssign%3C%3CG1Element+as+GroupElement%3E::ScalarType%3E-for-G1Element"],[964,"impl-MulAssign%3C%3CG2Element+as+GroupElement%3E::ScalarType%3E-for-G2Element"],[965,"impl-MulAssign%3C%26%3CG2Element+as+GroupElement%3E::ScalarType%3E-for-G2Element"],[966,"impl-MulAssign%3C%26%3CGTElement+as+GroupElement%3E::ScalarType%3E-for-GTElement"],[967,"impl-MulAssign%3C%3CGTElement+as+GroupElement%3E::ScalarType%3E-for-GTElement"],[968,"impl-MulAssign%3C%3CScalar+as+GroupElement%3E::ScalarType%3E-for-Scalar"],[969,"impl-MulAssign%3C%26%3CScalar+as+GroupElement%3E::ScalarType%3E-for-Scalar"],[972,"impl-Neg-for-G1Element"],[973,"impl-Neg-for-%26G1Element"],[974,"impl-Neg-for-%26G2Element"],[975,"impl-Neg-for-G2Element"],[976,"impl-Neg-for-%26GTElement"],[977,"impl-Neg-for-GTElement"],[978,"impl-Neg-for-Scalar"],[979,"impl-Neg-for-%26Scalar"],[986,"impl-Sub%3CG1Element%3E-for-%26G1Element"],[987,"impl-Sub%3C%26G1Element%3E-for-G1Element"],[988,"impl-Sub%3C%26G1Element%3E-for-%26G1Element"],[989,"impl-Sub-for-G1Element"],[990,"impl-Sub%3CG2Element%3E-for-%26G2Element"],[991,"impl-Sub-for-G2Element"],[992,"impl-Sub%3C%26G2Element%3E-for-G2Element"],[993,"impl-Sub%3C%26G2Element%3E-for-%26G2Element"],[994,"impl-Sub%3C%26GTElement%3E-for-GTElement"],[995,"impl-Sub-for-GTElement"],[996,"impl-Sub%3C%26GTElement%3E-for-%26GTElement"],[997,"impl-Sub%3CGTElement%3E-for-%26GTElement"],[998,"impl-Sub%3CScalar%3E-for-%26Scalar"],[999,"impl-Sub-for-Scalar"],[1000,"impl-Sub%3C%26Scalar%3E-for-%26Scalar"],[1001,"impl-Sub%3C%26Scalar%3E-for-Scalar"],[1002,"impl-SubAssign%3C%26G1Element%3E-for-G1Element"],[1003,"impl-SubAssign-for-G1Element"],[1004,"impl-SubAssign%3C%26G2Element%3E-for-G2Element"],[1005,"impl-SubAssign-for-G2Element"],[1006,"impl-SubAssign%3C%26GTElement%3E-for-GTElement"],[1007,"impl-SubAssign-for-GTElement"],[1008,"impl-SubAssign%3C%26Scalar%3E-for-Scalar"],[1009,"impl-SubAssign-for-Scalar"],[1064,"impl-Add%3C%26RistrettoPoint%3E-for-%26RistrettoPoint"],[1065,"impl-Add%3CRistrettoPoint%3E-for-%26RistrettoPoint"],[1066,"impl-Add%3C%26RistrettoPoint%3E-for-RistrettoPoint"],[1067,"impl-Add-for-RistrettoPoint"],[1068,"impl-Add-for-RistrettoScalar"],[1069,"impl-Add%3C%26RistrettoScalar%3E-for-%26RistrettoScalar"],[1070,"impl-Add%3CRistrettoScalar%3E-for-%26RistrettoScalar"],[1071,"impl-Add%3C%26RistrettoScalar%3E-for-RistrettoScalar"],[1072,"impl-AddAssign-for-RistrettoPoint"],[1073,"impl-AddAssign%3C%26RistrettoPoint%3E-for-RistrettoPoint"],[1074,"impl-AddAssign%3C%26RistrettoScalar%3E-for-RistrettoScalar"],[1075,"impl-AddAssign-for-RistrettoScalar"],[1090,"impl-Div-for-RistrettoScalar"],[1091,"impl-Div%3C__RhsT%3E-for-RistrettoScalar"],[1104,"impl-From%3CScalar%3E-for-RistrettoScalar"],[1105,"impl-From%3Cu64%3E-for-RistrettoScalar"],[1121,"impl-Mul%3CRistrettoScalar%3E-for-RistrettoPoint"],[1122,"impl-Mul%3C%3CRistrettoPoint+as+GroupElement%3E::ScalarType%3E-for-%26RistrettoPoint"],[1123,"impl-Mul%3C%26%3CRistrettoPoint+as+GroupElement%3E::ScalarType%3E-for-%26RistrettoPoint"],[1124,"impl-Mul%3C%26%3CRistrettoPoint+as+GroupElement%3E::ScalarType%3E-for-RistrettoPoint"],[1125,"impl-Mul%3C%26%3CRistrettoScalar+as+GroupElement%3E::ScalarType%3E-for-RistrettoScalar"],[1126,"impl-Mul%3C%26%3CRistrettoScalar+as+GroupElement%3E::ScalarType%3E-for-%26RistrettoScalar"],[1127,"impl-Mul-for-RistrettoScalar"],[1128,"impl-Mul%3C%3CRistrettoScalar+as+GroupElement%3E::ScalarType%3E-for-%26RistrettoScalar"],[1129,"impl-MulAssign%3C%26%3CRistrettoPoint+as+GroupElement%3E::ScalarType%3E-for-RistrettoPoint"],[1130,"impl-MulAssign%3C%3CRistrettoPoint+as+GroupElement%3E::ScalarType%3E-for-RistrettoPoint"],[1131,"impl-MulAssign%3C%26%3CRistrettoScalar+as+GroupElement%3E::ScalarType%3E-for-RistrettoScalar"],[1132,"impl-MulAssign%3C%3CRistrettoScalar+as+GroupElement%3E::ScalarType%3E-for-RistrettoScalar"],[1134,"impl-Neg-for-RistrettoPoint"],[1135,"impl-Neg-for-%26RistrettoPoint"],[1136,"impl-Neg-for-%26RistrettoScalar"],[1137,"impl-Neg-for-RistrettoScalar"],[1141,"impl-Sub%3C%26RistrettoPoint%3E-for-RistrettoPoint"],[1142,"impl-Sub%3CRistrettoPoint%3E-for-%26RistrettoPoint"],[1143,"impl-Sub%3C%26RistrettoPoint%3E-for-%26RistrettoPoint"],[1144,"impl-Sub-for-RistrettoPoint"],[1145,"impl-Sub-for-RistrettoScalar"],[1146,"impl-Sub%3C%26RistrettoScalar%3E-for-RistrettoScalar"],[1147,"impl-Sub%3CRistrettoScalar%3E-for-%26RistrettoScalar"],[1148,"impl-Sub%3C%26RistrettoScalar%3E-for-%26RistrettoScalar"],[1149,"impl-SubAssign%3C%26RistrettoPoint%3E-for-RistrettoPoint"],[1150,"impl-SubAssign-for-RistrettoPoint"],[1151,"impl-SubAssign-for-RistrettoScalar"],[1152,"impl-SubAssign%3C%26RistrettoScalar%3E-for-RistrettoScalar"],[1174,"impl-Add%3C%26ProjectivePoint%3E-for-ProjectivePoint"],[1175,"impl-Add%3CProjectivePoint%3E-for-%26ProjectivePoint"],[1176,"impl-Add-for-ProjectivePoint"],[1177,"impl-Add%3C%26ProjectivePoint%3E-for-%26ProjectivePoint"],[1178,"impl-Add%3CScalar%3E-for-%26Scalar"],[1179,"impl-Add%3C%26Scalar%3E-for-%26Scalar"],[1180,"impl-Add%3C%26Scalar%3E-for-Scalar"],[1181,"impl-Add-for-Scalar"],[1182,"impl-AddAssign-for-ProjectivePoint"],[1183,"impl-AddAssign%3C%26ProjectivePoint%3E-for-ProjectivePoint"],[1184,"impl-AddAssign%3C%26Scalar%3E-for-Scalar"],[1185,"impl-AddAssign-for-Scalar"],[1211,"impl-From%3CFp%3CMontBackend%3CFrConfig,+4%3E,+4%3E%3E-for-Scalar"],[1212,"impl-From%3Cu64%3E-for-Scalar"],[1219,"impl-Mul%3CScalar%3E-for-ProjectivePoint"],[1220,"impl-Mul%3C%26%3CProjectivePoint+as+GroupElement%3E::ScalarType%3E-for-%26ProjectivePoint"],[1221,"impl-Mul%3C%3CProjectivePoint+as+GroupElement%3E::ScalarType%3E-for-%26ProjectivePoint"],[1222,"impl-Mul%3C%26%3CProjectivePoint+as+GroupElement%3E::ScalarType%3E-for-ProjectivePoint"],[1223,"impl-Mul-for-Scalar"],[1224,"impl-Mul%3C%26%3CScalar+as+GroupElement%3E::ScalarType%3E-for-%26Scalar"],[1225,"impl-Mul%3C%3CScalar+as+GroupElement%3E::ScalarType%3E-for-%26Scalar"],[1226,"impl-Mul%3C%26%3CScalar+as+GroupElement%3E::ScalarType%3E-for-Scalar"],[1227,"impl-MulAssign%3C%26%3CProjectivePoint+as+GroupElement%3E::ScalarType%3E-for-ProjectivePoint"],[1228,"impl-MulAssign%3C%3CProjectivePoint+as+GroupElement%3E::ScalarType%3E-for-ProjectivePoint"],[1229,"impl-MulAssign%3C%26%3CScalar+as+GroupElement%3E::ScalarType%3E-for-Scalar"],[1230,"impl-MulAssign%3C%3CScalar+as+GroupElement%3E::ScalarType%3E-for-Scalar"],[1231,"impl-Neg-for-ProjectivePoint"],[1232,"impl-Neg-for-%26ProjectivePoint"],[1233,"impl-Neg-for-%26Scalar"],[1234,"impl-Neg-for-Scalar"],[1237,"impl-Sub%3CProjectivePoint%3E-for-%26ProjectivePoint"],[1238,"impl-Sub%3C%26ProjectivePoint%3E-for-%26ProjectivePoint"],[1239,"impl-Sub%3C%26ProjectivePoint%3E-for-ProjectivePoint"],[1240,"impl-Sub-for-ProjectivePoint"],[1241,"impl-Sub-for-Scalar"],[1242,"impl-Sub%3CScalar%3E-for-%26Scalar"],[1243,"impl-Sub%3C%26Scalar%3E-for-%26Scalar"],[1244,"impl-Sub%3C%26Scalar%3E-for-Scalar"],[1245,"impl-SubAssign%3C%26ProjectivePoint%3E-for-ProjectivePoint"],[1246,"impl-SubAssign-for-ProjectivePoint"],[1247,"impl-SubAssign-for-Scalar"],[1248,"impl-SubAssign%3C%26Scalar%3E-for-Scalar"],[1322,"impl-Debug-for-Digest%3CDIGEST_LEN%3E"],[1323,"impl-Display-for-Digest%3CDIGEST_LEN%3E"],[1580,"impl-Display-for-Secp256k1PublicKey"],[1581,"impl-Debug-for-Secp256k1PublicKey"],[1582,"impl-Debug-for-Secp256k1PrivateKey"],[1583,"impl-Display-for-Secp256k1PrivateKey"],[1584,"impl-Display-for-Secp256k1Signature"],[1585,"impl-Debug-for-Secp256k1Signature"],[1692,"impl-Display-for-Signature"],[1693,"impl-Debug-for-Signature"],[1694,"impl-Debug-for-Secp256k1RecoverableSignature"],[1695,"impl-Display-for-Secp256k1RecoverableSignature"],[1812,"impl-Debug-for-Secp256r1PublicKey"],[1813,"impl-Display-for-Secp256r1PublicKey"],[1814,"impl-Display-for-Secp256r1PrivateKey"],[1815,"impl-Debug-for-Secp256r1PrivateKey"],[1816,"impl-Debug-for-Secp256r1Signature"],[1817,"impl-Display-for-Secp256r1Signature"],[1907,"impl-Display-for-Secp256r1RecoverableSignature"],[1908,"impl-Debug-for-Secp256r1RecoverableSignature"],[1943,"impl-Debug-for-BytesRepresentation%3CN%3E"],[1944,"impl-Display-for-BytesRepresentation%3CN%3E"],[1946,"impl-From%3C%26Ed25519PublicKey%3E-for-BytesRepresentation%3C%24length%3E"],[1947,"impl-From%3C%26G1Element%3E-for-BytesRepresentation%3C%24length%3E"],[1948,"impl-From%3C%26Secp256r1PublicKey%3E-for-BytesRepresentation%3C%24length%3E"],[1949,"impl-From%3C%26BLS12381PublicKey%3E-for-BytesRepresentation%3C%24length%3E"],[1950,"impl-From%3C%26Secp256k1PublicKey%3E-for-BytesRepresentation%3C%24length%3E"],[1951,"impl-From%3C%26BLS12381AggregateSignature%3E-for-BytesRepresentation%3C%24length%3E"],[1952,"impl-From%3C%26Ed25519Signature%3E-for-BytesRepresentation%3C%24length%3E"],[1953,"impl-From%3C%26Secp256r1Signature%3E-for-BytesRepresentation%3C%24length%3E"],[1954,"impl-From%3C%26Secp256k1Signature%3E-for-BytesRepresentation%3C%24length%3E"],[1955,"impl-From%3C%26BLS12381AggregateSignature%3E-for-BytesRepresentation%3C%24length%3E"],[1956,"impl-From%3C%26BLS12381PublicKey%3E-for-BytesRepresentation%3C%24length%3E"],[1958,"impl-From%3C%26G2Element%3E-for-BytesRepresentation%3C%24length%3E"]]}],\
["fastcrypto_cli",{"doc":"This module contains test vectors for all signature …","t":"CSSSFNNNNOOOONNN","n":["sigs_cli_test_vectors","MSG","SEED","TEST_CASES","TestVector","borrow","borrow_mut","from","into","name","private","public","sig","try_from","try_into","type_id"],"q":[[0,"fastcrypto_cli"],[1,"fastcrypto_cli::sigs_cli_test_vectors"],[16,"core::result"],[17,"core::any"]],"d":["","","","","A test vector containing a signature over MSG encoded as a …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],0,0,0,0,[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,2,[]]],"c":[],"p":[[6,"Result",16],[5,"TypeId",17],[5,"TestVector",1]],"b":[]}],\
["fastcrypto_derive",{"doc":"This crate contains the <code>SilentDebug</code> and <code>SilentDisplay</code> …","t":"YYY","n":["GroupOpsExtend","SilentDebug","SilentDisplay"],"q":[[0,"fastcrypto_derive"]],"d":["Extend implementations of Add, Sub, Mul…","Derive the <code>SilentDebug</code> trait, which is an implementation …","Derive the <code>SilentDisplay</code> trait, which is an implementation …"],"i":[0,0,0],"f":[0,0,0],"c":[],"p":[],"b":[]}],\
["fastcrypto_tbls",{"doc":"A crate that implements threshold BLS (tBLS) and …","t":"CCCCCCCCCFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONOONNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNHHHHHFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNFFINNNNNNNNNNNNNNNNNNNNNNNONNNNNNONNNNNNNNNNNNNNNNNOIFIINNNNNNNNNNNNNNNNNNONNNNNNNNNONNNFNNNNNNNNNNNNNNNNNNNNNIRRIRKNOONNNNOOMIFIIIIIIIIIIFNNNNNNNNNNNNNNOONNNNNNNNNNOONNN","n":["dkg","dl_verification","ecies","nizk","nodes","polynomial","random_oracle","tbls","types","Complaint","Confirmation","Message","Output","Party","ProcessedMessage","UsedProcessedMessages","VerifiedProcessedMessages","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","complaint","complaints","complete","create_message","data","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","encrypted_shares","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","is_empty","len","merge","message","new","nodes","process_message","sender","sender","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shares","shares","t","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vss_pk","vss_pk","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","verify_deg_t_poly","verify_equal_exponents","verify_pairs","verify_poly_evals","verify_triplets","Encryption","MultiRecipientEncryption","PrivateKey","PublicKey","RecoveryPackage","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_element","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","create_recovery_package","decrypt","decrypt_from_partial_decryption","decrypt_with_recovery_package","deserialize","deserialize","deserialize","deserialize","deserialize","deterministic_encrypt","encrypt","encrypt","ephemeral_key","ephemeral_key","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_private_key","get_encryption","into","into","into","into","into","is_empty","len","new","proof","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip","vzip","DLNizk","__clone_box","borrow","borrow_mut","clone","clone_into","create","deserialize","eq","equivalent","equivalent","fmt","from","into","serialize","to_owned","try_from","try_into","type_id","verify","vzip","Node","Nodes","PartyId","__clone_box","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","deserialize","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","hash","id","into","into","iter","new","node_id_to_node","num_nodes","pk","reduce","serialize","serialize","share_id_to_node","share_ids_iter","share_ids_of","to_owned","to_owned","total_weight","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","weight","Eval","Poly","PrivatePoly","PublicPoly","__clone_box","add","as_vec","borrow","borrow_mut","c0","clone","clone_into","commit","degree","deserialize","eq","equivalent","equivalent","eval","fmt","from","from","index","into","rand","recover_c0","recover_c0_msm","serialize","to_owned","try_from","try_into","type_id","value","verify_share","vzip","zero","RandomOracle","__clone_box","borrow","borrow_mut","clone","clone_into","deserialize","eq","equivalent","equivalent","evaluate","extend","fmt","from","into","new","serialize","to_owned","try_from","try_into","type_id","vzip","PartialSignature","Private","Public","Share","Signature","ThresholdBls","aggregate","index","index","partial_sign","partial_sign_batch","partial_verify","partial_verify_batch","value","value","verify","EciesEncryption","IndexedValue","PrivateBlsKey","PrivateEciesKey","PublicBlsKey","PublicEciesKey","PublicVssKey","RawSignature","RecoveryPackage","Share","ShareIndex","Signature","ThresholdBls12381MinSig","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deserialize","eq","equivalent","equivalent","fmt","from","from","index","index","into","into","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","value","verify","vzip","vzip"],"q":[[0,"fastcrypto_tbls"],[9,"fastcrypto_tbls::dkg"],[164,"fastcrypto_tbls::dl_verification"],[169,"fastcrypto_tbls::ecies"],[283,"fastcrypto_tbls::nizk"],[304,"fastcrypto_tbls::nodes"],[356,"fastcrypto_tbls::polynomial"],[392,"fastcrypto_tbls::random_oracle"],[414,"fastcrypto_tbls::tbls"],[430,"fastcrypto_tbls::types"],[474,"dyn_clone::sealed"],[475,"core::clone"],[476,"fastcrypto::groups"],[477,"fastcrypto::error"],[478,"fastcrypto::groups"],[479,"serde::de"],[480,"fastcrypto::traits"],[481,"core::result"],[482,"serde::de"],[483,"core::fmt"],[484,"core::fmt"],[485,"fastcrypto::groups::bls12381"],[486,"fastcrypto::groups::bls12381"],[487,"fastcrypto::hash"],[488,"core::iter::traits::iterator"],[489,"fastcrypto::groups"]],"d":["","","","","","","","","","A complaint/fraud claim against a dealer that created …","A Confirmation is sent during the second phase of the …","The higher-level protocol is responsible for verifying …","Output is the final output of the DKG protocol in case it …","Generics below use …","Wrapper for collecting everything related to a processed …","Unique processed messages that are being used in the …","Processed messages that were not excluded.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of complaints against other parties. Empty if there …","Execute the previous two steps together.","Create the first message to be broadcasted.","","","","","","","","","The encrypted shares created by the sender. Sorted …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Merge results from multiple ProcessedMessages so only one …","","Create a new ECIES private key and send the public key to …","","Process a message and create the second message to be …","","","","","","","","","","","","The threshold needed to reconstruct the full key/signature.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The commitment of the secret polynomial created by the …","","","","","","","","","","Check that partial public keys form a polynomial of the …","Checks if vectors v1=(a1<em>G1, …, an</em>G1) and v2=(a1’*G2, …","Check that a pair (k, H) satisfies H = k*G using a random …","Checks that a given set of evaluations is consistent with …","Check that a triplet (k, G, H) satisfies H = k*G using a …","","Multi-recipient encryption with a proof-of-knowledge of …","Simple ECIES encryption using a generic group and …","","A recovery package that allows decrypting a <em>specific</em> ECIES …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","NIZKPoK for the DL [G, xG].","","","","","","Create a new NIZKPoK for the DL [G, xG] using the given …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Public parameters of a party.","Wrapper for a set of nodes.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get an iterator on the nodes.","Create a new set of nodes. Nodes must have consecutive ids …","","Number of nodes.","","Reduce weights up to an allowed delta in the original …","","","Get the node corresponding to a share id.","Get an iterator on the share ids.","Get the share ids of a node.","","","Total weight of the nodes.","","","","","","","","","","Types","A polynomial that is using a scalar for the variable x and …","","","","Performs polynomial addition in place.","Returns the coefficients of the polynomial.","","","Return the constant term of the polynomial.","","","Commits the scalar polynomial to the group and returns a …","Returns the degree of the polynomial","","","","","Evaluates the polynomial at the specified value.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Returns a new polynomial of the given degree where each …","Given exactly <code>t</code> polynomial evaluations, it will recover …","Given exactly <code>t</code> polynomial evaluations, it will recover …","","","","","","","Checks if a given share is valid.","","Returns a polynomial with the zero element.","Random Oracle from SHA3-512.","","","","","","","","","","Evaluate the random oracle on a given input.","Derive a new random oracle from the current one and …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a fresh random oracle with a given “session id”…","","","","","","","","","<code>Public</code> represents the group over which the public keys are …","","<code>Signature</code> represents the group over which the signatures …","Trait ThresholdBls provides sign &amp; verify functions for …","Interpolate partial signatures to recover the full …","","","Sign a message using the private share/partial key.","Sign a message using one of more private share/partial …","Verify a signature done by a partial key holder.","Verify a set of signatures done by a partial key holder. …","","","Verify a signature on a given message. This is standard …","","Wrapper of a value that is associated with a specific …","","ECIES related types with Ristretto points.","","","","","","tBLS with ThresholdBls12381MinSig types.","Indexes of shares/private keys (0 is reserved for the …","","Implementation of [ThresholdBls] for BLS12-381-min-sig. A …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,7,8,9,10,11,19,3,6,7,8,9,10,11,19,3,6,7,8,9,10,11,3,6,7,8,9,10,11,3,6,7,8,9,10,11,9,8,3,3,19,3,6,7,8,9,10,11,6,3,6,7,8,9,10,3,3,6,6,7,7,8,8,9,9,10,10,6,11,19,3,6,7,8,9,10,10,11,19,3,6,7,8,9,10,11,19,19,3,9,3,11,3,6,8,3,6,7,8,9,10,11,9,11,3,3,6,7,8,9,10,11,19,3,6,7,8,9,10,11,19,3,6,7,8,9,10,11,19,3,6,7,8,9,10,11,6,11,19,3,6,7,8,9,10,11,0,0,0,0,0,0,0,0,0,0,29,38,39,40,41,38,29,38,39,40,41,29,38,39,40,41,29,38,39,40,41,29,38,39,40,41,29,29,39,38,29,38,39,40,41,38,38,40,39,40,29,38,39,40,41,29,29,38,38,39,39,40,40,41,41,29,38,39,40,41,29,29,38,38,39,40,41,38,40,29,38,39,40,41,40,40,29,40,29,38,39,40,41,29,38,39,40,41,29,38,39,40,41,29,38,39,40,41,29,38,39,40,41,40,29,38,39,40,41,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,45,30,45,30,45,30,45,30,45,30,45,30,45,30,45,45,30,30,45,30,45,30,30,45,45,30,30,30,30,30,45,30,45,30,30,30,30,45,30,30,45,30,45,30,45,30,45,30,45,0,0,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,36,37,37,37,37,37,37,37,37,37,36,37,37,37,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,61,61,0,61,0,61,59,58,61,61,61,61,59,58,61,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,60,62,60,60,60,60,60,60,60,60,62,60,63,60,62,60,60,60,62,60,62,60,62,60,63,60,62,62,60],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1,-2]]],[[3,[-1,-2]]],[4,5],[4,5]],[[[6,[-1,-2]]],[[6,[-1,-2]]],[4,5],[4,5]],[[[7,[-1]]],[[7,[-1]]],[4,5]],[[[8,[-1]]],[[8,[-1]]],[4,5]],[[[9,[-1,-2]]],[[9,[-1,-2]]],[4,5],[4,5]],[[[10,[-1,-2]]],[[10,[-1,-2]]],[4,5],[4,5]],[[[11,[-1,-2]]],[[11,[-1,-2]]],[4,5],[4,5]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[[3,[-1,-2]],[10,[-1,-2]],[12,[[8,[-2]]]],13,-3],[[14,[[11,[-1,-2]]]]],[5,15,16,17],[5,16,17],18],[[[3,[-1,-2]],-3],[[6,[-1,-2]]],[5,15,16,17],[5,16,17],18],[[[19,[-1,-2]]],[[12,[[9,[-1,-2]]]]],5,5],[-1,[[20,[[3,[-2,-3]]]]],21,[22,5],[22,5]],[-1,[[20,[[6,[-2,-3]]]]],21,[22,5],[22,5]],[-1,[[20,[[7,[-2]]]]],21,[22,5]],[-1,[[20,[[8,[-2]]]]],21,[22,5]],[-1,[[20,[[9,[-2,-3]]]]],21,[22,5],[22,5]],[-1,[[20,[[10,[-2,-3]]]]],21,[22,5],[22,5]],[-1,[[20,[[11,[-2,-3]]]]],21,[22,5],[22,5]],0,[[[3,[-1,-2]],[3,[-1,-2]]],23,[24,5],[24,5]],[[[6,[-1,-2]],[6,[-1,-2]]],23,[24,5],[24,5]],[[[7,[-1]],[7,[-1]]],23,[24,5]],[[[8,[-1]],[8,[-1]]],23,[24,5]],[[[9,[-1,-2]],[9,[-1,-2]]],23,[24,5],[24,5]],[[[10,[-1,-2]],[10,[-1,-2]]],23,[24,5],[24,5]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[[6,[-1,-2]],25],26,[27,5],[27,5]],[[[11,[-1,-2]],25],26,[27,5],[27,5]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[12,[[9,[-1,-2]]]]],[[10,[-1,-2]]],5,5],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[19,[-1,-2]]],23,5,5],[[[19,[-1,-2]]],28,5,5],[[[3,[-1,-2]],[12,[[9,[-1,-2]]]]],[[14,[[2,[[8,[-2]],[10,[-1,-2]]]]]]],[5,15,16,17],[5,16,17]],0,[[[29,[-1]],[30,[-1]],13,31,-2],[[14,[[3,[-3,-1]]]]],[5,16,17],18,[5,15,16,17]],0,[[[3,[-1,-2]],[6,[-1,-2]],-3],[[14,[[9,[-1,-2]]]]],[5,15,16,17],[5,16,17],18],0,0,[[[3,[-1,-2]],-3],20,[16,5],[16,5],32],[[[6,[-1,-2]],-3],20,[16,5],[16,5],32],[[[7,[-1]],-2],20,[16,5],32],[[[8,[-1]],-2],20,[16,5],32],[[[9,[-1,-2]],-3],20,[16,5],[16,5],32],[[[10,[-1,-2]],-3],20,[16,5],[16,5],32],[[[11,[-1,-2]],-3],20,[16,5],[16,5],32],0,0,[[[3,[-1,-2]]],13,[5,15,16,17],[5,16,17]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[13,[12,[-1]],12,-2],[[14,[2]]],[5,15],18],[[[12,[34]],[12,[35]],-1],[[14,[2]]],18],[[[12,[[2,[-1]]]],-2],[[14,[2]]],[5,15],18],[[[12,[36]],[37,[-1]],-2],[[14,[2]]],[5,15],18],[[[12,[[2,[-1,-1]]]],-2],[[14,[2]]],[5,15],18],0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[[38,[-1]]],-1,[5,16,17]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[29,[-1]]],[[29,[-1]]],[4,5]],[[[38,[-1]]],[[38,[-1]]],[4,5]],[[[39,[-1]]],[[39,[-1]]],[4,5]],[[[40,[-1]]],[[40,[-1]]],[4,5]],[[[41,[-1]]],[[41,[-1]]],[4,5]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[29,[-1]],[39,[-1]],31,-2],[[41,[-1]]],[5,16],18],[[[29,[-1]],[39,[-1]]],[[43,[42]]],[5,16]],[[[39,[-1]],-1],[[43,[42]]],[5,16]],[[[38,[-1]],[41,[-1]],31,[39,[-1]]],[[14,[[43,[42]]]]],[5,16,17]],[-1,[[20,[[29,[-2]]]]],21,5],[-1,[[20,[[38,[-2]]]]],21,[22,5]],[-1,[[20,[[39,[-2]]]]],21,[22,5]],[-1,[[20,[[40,[-2]]]]],21,[22,5]],[-1,[[20,[[41,[-2]]]]],21,[22,5]],[[[12,[42]],-1,-1],[[39,[-1]]],[5,16,17]],[[[38,[-1]],[12,[42]],-2],[[39,[-1]]],[5,16,17],18],[[[12,[[2,[[38,[-1]],[43,[42]]]]]],31,-2],[[40,[-1]]],[5,16],18],[[[39,[-1]]],-1,[5,16]],[[[40,[-1]]],-1,[5,16]],[[[29,[-1]],[29,[-1]]],23,[24,5]],[[[38,[-1]],[38,[-1]]],23,[24,5]],[[[39,[-1]],[39,[-1]]],23,[24,5]],[[[40,[-1]],[40,[-1]]],23,[24,5]],[[[41,[-1]],[41,[-1]]],23,[24,5]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[[29,[-1]],25],26,[27,5]],[[[38,[-1]],25],26,[27,5]],[[[39,[-1]],25],26,[27,5]],[[[40,[-1]],25],26,[27,5]],[[[41,[-1]],25],26,[27,5]],[[],[[29,[-1]]],[5,16]],[-1,-1,[]],[-1,[[38,[-1]]],5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[29,[-1]]],[[38,[-1]]],[5,16,17]],[[[40,[-1]],28],[[14,[[39,[-1]]]]],[5,16]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1]]],23,[5,16]],[[[40,[-1]]],28,[5,16]],[-1,[[29,[-2]]],18,[5,16]],[[[40,[-1]]],[[44,[-1]]],[5,16]],[[[29,[-1]],-2],20,5,32],[[[38,[-1]],-2],20,[16,5],32],[[[39,[-1]],-2],20,[16,5],32],[[[40,[-1]],-2],20,[16,5],32],[[[41,[-1]],-2],20,[16,5],32],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[40,[-1]],31],[[14,[2]]],[5,16]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,1],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[44,[-1]]],[[44,[-1]]],[4,5]],[[-1,-2],2,[],[]],[[-1,[12,[42]],31,-2],[[44,[-1]]],[5,16],18],[-1,[[20,[[44,[-2]]]]],21,[5,22]],[[[44,[-1]],[44,[-1]]],23,[24,5]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[[44,[-1]],25],26,[27,5]],[-1,-1,[]],[-1,-2,[],[]],[[[44,[-1]],-2],20,[16,5],32],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,33,[]],[[[44,[-1]],-1,[12,[42]],31],[[14,[2]]],[5,16]],[-1,-2,[],[]],0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[45,[-1]]],[[45,[-1]]],[4,5]],[[[30,[-1]]],[[30,[-1]]],[4,5]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[-1,[[20,[[45,[-2]]]]],21,[22,5]],[-1,[[20,[[30,[-2]]]]],21,[22,5]],[[[45,[-1]],[45,[-1]]],23,[24,5]],[[[30,[-1]],[30,[-1]]],23,[24,5]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[[45,[-1]],25],26,[27,5]],[[[30,[-1]],25],26,[27,5]],[-1,-1,[]],[-1,-1,[]],[[[30,[-1]]],46,[5,16]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[30,[-1]]],[[0,[[48,[],[[47,[[45,[-1]]]]]]]]],[5,16]],[[[43,[[45,[-1]]]]],[[14,[[30,[-1]]]]],[5,16]],[[[30,[-1]],49],[[14,[[45,[-1]]]]],[5,16]],[[[30,[-1]]],28,[5,16]],0,[[[30,[-1]],50,50],[[2,[[30,[-1]],50]]],[5,16]],[[[45,[-1]],-2],20,[16,5],32],[[[30,[-1]],-2],20,[16,5],32],[[[30,[-1]],51],[[14,[[45,[-1]]]]],[5,16]],[[[30,[-1]]],[[0,[[48,[],[[47,[51]]]]]]],[5,16]],[[[30,[-1]],49],[[43,[51]]],[5,16]],[-1,-2,[],[]],[-1,-2,[],[]],[[[30,[-1]]],13,[5,16]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[[-1,1],2,[]],[[[37,[-1]],[37,[-1]]],2,5],[[[37,[-1]]],[[43,[-1]]],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1]]],-1,5],[[[37,[-1]]],[[37,[-1]]],4],[[-1,-2],2,[],[]],[[[37,[-1]]],[[37,[-2]]],52,[[5,[],[[53,[-1]]]]]],[[[37,[-1]]],13,[]],[-1,[[20,[[37,[-2]]]]],21,22],[[[37,[-1]],[37,[-1]]],23,24],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[[37,[-1]],51],[[36,[-1]]],5],[[[37,[-1]],25],26,27],[-1,-1,[]],[[[43,[-1]]],[[37,[-1]]],[]],0,[-1,-2,[],[]],[[13,-1],[[37,[-2]]],18,52],[[13,-3],[[20,[-1,54]]],5,[[55,[[36,[-1]]]]],[[48,[],[[47,[-2]]]],4]],[[13,-3],[[20,[-1,54]]],[5,15],[[55,[[36,[-1]]]]],[[48,[],[[47,[-2]]]],4]],[[[37,[-1]],-2],20,16,32],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,33,[]],0,[[[37,[-1]],51],[[14,[2]]],5],[-1,-2,[],[]],[[],[[37,[-1]]],5],0,[[-1,1],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[31,31],[[-1,-2],2,[],[]],[-1,[[20,[31]]],21],[[31,31],23],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[31,-1],[[56,[42]]],16],[[31,57],31],[[31,25],26],[-1,-1,[]],[-1,-2,[],[]],[57,31],[[31,-1],20,32],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,[[13,-3],[[14,[-1]]],[],[[55,[[58,[-1]]]]],[[48,[],[[47,[-2]]]],4]],0,0,[[[59,[-1]],[12,[42]]],[[58,[-2]]],[],[]],[[-3,[12,[42]]],[[43,[[58,[-4]]]]],[],[[55,[[59,[-1]]]]],[[48,[],[[47,[-2]]]]],[]],[[[37,[-1]],[12,[42]],[58,[-2]]],[[14,[2]]],[],[]],[[[37,[-1]],[12,[42]],-4,-5],[[14,[2]]],[],[],[[55,[[58,[-2]]]]],[[48,[],[[47,[-3]]]]],18],0,0,[[-1,[12,[42]],-2],[[14,[2]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[60,[-1]]],[[60,[-1]]],4],[[-1,-2],2,[],[]],[-1,[[20,[[60,[-2]]]]],21,22],[[[60,[-1]],[60,[-1]]],23,24],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[[60,[-1]],25],26,27],[-1,-1,[]],[-1,-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[60,[-1]],-2],20,16,32],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,33,[]],[-1,33,[]],0,0,[[-1,[12,[42]],-2],[[14,[2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[5,"Private",474],[1,"tuple"],[5,"Party",9],[10,"Clone",475],[10,"GroupElement",476],[5,"Message",9],[5,"Complaint",9],[5,"Confirmation",9],[5,"ProcessedMessage",9],[5,"UsedProcessedMessages",9],[5,"Output",9],[1,"slice"],[1,"u32"],[8,"FastCryptoResult",477],[10,"MultiScalarMul",476],[10,"Serialize",478],[10,"DeserializeOwned",479],[10,"AllowedRng",480],[5,"VerifiedProcessedMessages",9],[6,"Result",481],[10,"Deserializer",479],[10,"Deserialize",479],[1,"bool"],[10,"PartialEq",482],[5,"Formatter",483],[8,"Result",483],[10,"Debug",483],[1,"usize"],[5,"PrivateKey",169],[5,"Nodes",304],[5,"RandomOracle",392],[10,"Serializer",478],[5,"TypeId",484],[5,"G1Element",485],[5,"G2Element",485],[8,"Eval",356],[5,"Poly",356],[5,"PublicKey",169],[5,"Encryption",169],[5,"MultiRecipientEncryption",169],[5,"RecoveryPackage",169],[1,"u8"],[5,"Vec",486],[5,"DLNizk",283],[5,"Node",304],[5,"Digest",487],[17,"Item"],[10,"Iterator",488],[8,"PartyId",304],[1,"u16"],[8,"ShareIndex",430],[10,"Scalar",476],[17,"ScalarType"],[6,"FastCryptoError",477],[10,"Borrow",489],[1,"array"],[1,"str"],[8,"PartialSignature",414],[8,"Share",414],[5,"IndexedValue",430],[10,"ThresholdBls",414],[5,"ThresholdBls12381MinSig",430],[8,"Share",430]],"b":[]}],\
["fastcrypto_vdf",{"doc":"","t":"KRKRKKCMCMMMCMFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFKNNNHHHNMNNNNHNRRRKMMCSFKFIIFIIFNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Parameter","ParameterType","ParameterizedGroupElement","ScalarType","ToBytes","UnknownOrderGroupElement","class_group","from_seed","hash_prime","mul","same_group","to_bytes","vdf","zero","Discriminant","QuadraticForm","__clone_box","__clone_box","add","add","add","bits","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compose","discriminant","double","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from_a_b_discriminant","from_bytes","from_seed","generator","into","into","mul","mul","neg","same_group","serialized_length","to_bytes","to_bytes","to_owned","to_owned","try_from","try_from","try_from","try_from_be_bytes","try_into","try_into","type_id","type_id","vzip","vzip","zero","DefaultPrimalityCheck","PrimalityCheck","borrow","borrow_mut","from","hash_prime","hash_prime_default","hash_prime_with_index","into","is_prime","is_prime","try_from","try_into","type_id","verify_prime","vzip","InputType","OutputType","ProofType","VDF","evaluate","verify","wesolowski","CHALLENGE_SIZE","FastVerifier","FiatShamir","StrongFiatShamir","StrongVDF","StrongVDFVerifier","WeakFiatShamir","WeakVDF","WeakVDFVerifier","WesolowskisVDF","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compute_challenge","compute_challenge","compute_challenge","evaluate","from","from","from","from","from_seed","into","into","into","into","new","new","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip","vzip"],"q":[[0,"fastcrypto_vdf"],[14,"fastcrypto_vdf::class_group"],[69,"fastcrypto_vdf::hash_prime"],[85,"fastcrypto_vdf::vdf"],[92,"fastcrypto_vdf::vdf::wesolowski"],[143,"fastcrypto::error"],[144,"core::convert"],[145,"alloc::vec"],[146,"dyn_clone::sealed"],[147,"core::fmt"],[148,"core::fmt"],[149,"core::result"],[150,"core::any"],[151,"num_bigint::biguint"],[152,"fastcrypto::groups::multiplier"]],"d":["This trait is implemented by types which can be used as …","The type of the parameter which uniquely defines this …","Trait implemented by elements of an additive group where …","Integer type used for multiplication.","","Trait impl’d by elements of groups where the order is …","This module contains implementation of imaginary class …","Compute a random instance of a given size from a seed.","This module contains an implementation of a hash-to-prime …","Compute scale * self.","Check whether this group element is in the same group as …","Serialize this object into a byte vector.","This module contains a implementation of a verifiable …","Return an instance of the identity element in this group.","A discriminant for an imaginary class group. The …","A binary quadratic form, (a, b, c) for arbitrary integers …","","","","","","Return the number of bits needed to represent this …","","","","","","","","","Compute the composition of this quadratic form with …","Compute the discriminant <code>b^2 - 4ac</code> for this quadratic form.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new quadratic form given only the a and b …","Deserialize bytes into a quadratic form. The expected …","Compute a valid discriminant (aka a negative prime equal …","Return a generator (or, more precisely, an element with a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Return the length of the serialization in bytes of a …","","","","","","","","Try to create a discriminant from a big-endian byte …","","","","","","","","Implementation of the PrimalityCheck trait using the …","Implementation of a probabilistic primality test.","","","Returns the argument unchanged.","Implementation of HashPrime from chiavdf (): Generates a …","Implementation of hash_prime using the primality test from …","Generates a random pseudo-prime using the hash and check …","Calls <code>U::from(self)</code>.","Return true if <code>x</code> is probably a prime. If <code>false</code> is …","","","","","Verify that the given prime is a prime and has the given …","","The type of the input to the VDF.","The type of the output from the VDF.","The type of the proof of correctness for this VDF.","This represents a Verifiable Delay Function (VDF) …","Evaluate this VDF and return the output and a proof of …","Verify the output and proof from a VDF.","","Default size in bytes of the Fiat-Shamir challenge used in …","A faster method of verification which uses fast …","","Implementation of the Fiat-Shamir challenge generation for …","Implementation of Wesolowski’s VDF construction over a …","","Implementation of the Fiat-Shamir challenge generation …","Implementation of Wesolowski’s VDF construction over a …","","An implementation of Wesolowski’s VDF construction …","","","","","","","","","Compute the prime modulus used in proving and …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new VDF over an group of unknown where the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new VDF using the group defined by the given …","Create a new FastVerifier for the given VDF instance.","","","","","","","","","","","","","","Verify the output and proof from a VDF using the input …","","","",""],"i":[0,8,0,8,0,0,0,4,0,8,8,12,0,8,0,0,16,17,16,16,16,17,16,17,16,17,16,17,16,17,16,16,16,16,17,16,16,17,17,16,17,16,17,16,16,17,16,16,17,16,16,16,16,16,16,17,16,17,16,17,17,17,16,17,16,17,16,17,16,0,0,36,36,36,0,0,0,36,32,36,36,36,36,0,36,27,27,27,0,27,27,0,0,0,0,0,0,0,0,0,0,0,29,34,31,33,29,34,31,33,28,31,33,29,29,34,31,33,29,29,34,31,33,29,34,29,34,31,33,29,34,31,33,29,34,31,33,29,34,29,34,31,33],"f":[0,0,0,0,0,0,0,[[[2,[1]],3],[[5,[4]]]],0,[[[8,[],[[6,[-1]],[7,[-2]]]],-2],[[8,[],[[6,[-1]],[7,[-2]]]]],4,[[10,[9]]]],[[[8,[],[[6,[-1]],[7,[-2]]]],[8,[],[[6,[-1]],[7,[-2]]]]],11,4,[[10,[9]]]],[12,[[13,[1]]]],0,[-1,[[8,[],[[6,[-1]],[7,[-2]]]]],4,[[10,[9]]]],0,0,[[-1,14],15,[]],[[-1,14],15,[]],[[16,16],-1,[]],[[16,16],-1,[]],[[16,16],-1,[]],[17,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[16,16],[17,17],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[16,16],16],[16,17],[16,16],[[16,16],11],[[17,17],11],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[16,18],19],[[17,18],19],[-1,-1,[]],[-1,-1,[]],[[20,20,17],16],[[[2,[1]],17],[[5,[16]]]],[[[2,[1]],3],[[5,[17]]]],[17,16],[-1,-2,[],[]],[-1,-2,[],[]],[[16,20],-1,[]],[[16,20],16],[16,-1,[]],[[16,16],11],[3,3],[16,[[13,[1]]]],[17,[[13,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[20,[[5,[17]]]],[[[2,[1]]],[[5,[17]]]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[[2,[1]],3,[2,[3]]],23],[[[2,[1]],3,[2,[3]]],23],[[[2,[1]],3,[2,[3]]],[[15,[3,23]]]],[-1,-2,[],[]],[23,11],[23,11],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[[[2,[1]],3,[2,[3]],3],[[5,[15]]]],[-1,-2,[],[]],0,0,0,0,[[[27,[],[[24,[-1]],[25,[-2]],[26,[-3]]]],-1],[[5,[[15,[-2,-3]]]]],[],[],[]],[[[27,[],[[24,[-1]],[25,[-2]],[26,[-3]]]],-1,-2,-3],[[5,[15]]],[],[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[29,[-1,28]],-1,-1],[],[8,30]],[[[29,[-1,[31,[-1,-2]]]],-1,-1],20,[[8,[],[[7,[20]]]],30],32],[[[29,[-1,[33,[-1,-2]]]],-1,-1],20,[[8,[],[[7,[20]]]],30],32],[[[29,[-1,-2]],-1],[[5,[[15,[-1,-1]]]]],[[8,[],[[7,[20]]]],30],[[28,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[2,[1]],3,9],[[5,[[29,[-1,-2]]]]],[8,30],[[28,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,[[29,[-1,-2]]],[8,30],[[28,[-1]]]],[[[29,[-1,-2]],-1],[[34,[-1,-2,-3]]],[[8,[],[[7,[20]]]],30],[[28,[-1]]],[[35,[-1,20]]]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[[[29,[-1,-2]],-1,-1,-1],[[5,[15]]],[[8,[],[[7,[20]]]],30],[[28,[-1]]]],[[[34,[-1,-2,-3]],-1,-1],[[5,[15]]],[[8,[],[[7,[20]]]],30],[[28,[-1]]],[[35,[-1,20]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[1,"u8"],[1,"slice"],[1,"usize"],[10,"Parameter",0],[8,"FastCryptoResult",143],[17,"ParameterType"],[17,"ScalarType"],[10,"ParameterizedGroupElement",0],[1,"u64"],[10,"From",144],[1,"bool"],[10,"ToBytes",0],[5,"Vec",145],[5,"Private",146],[1,"tuple"],[5,"QuadraticForm",14],[5,"Discriminant",14],[5,"Formatter",147],[8,"Result",147],[5,"BigInt",148],[6,"Result",149],[5,"TypeId",150],[5,"BigUint",151],[17,"InputType"],[17,"OutputType"],[17,"ProofType"],[10,"VDF",85],[10,"FiatShamir",92],[5,"WesolowskisVDF",92],[10,"UnknownOrderGroupElement",0],[5,"WeakFiatShamir",92],[10,"PrimalityCheck",69],[5,"StrongFiatShamir",92],[5,"FastVerifier",92],[10,"ScalarMultiplier",152],[5,"DefaultPrimalityCheck",69]],"b":[[18,"impl-Add-for-QuadraticForm"],[19,"impl-Add%3C%26QuadraticForm%3E-for-%26QuadraticForm"],[20,"impl-Add%3C%26QuadraticForm%3E-for-QuadraticForm"],[49,"impl-Mul%3C%26BigInt%3E-for-QuadraticForm"],[50,"impl-ParameterizedGroupElement-for-QuadraticForm"]]}],\
["fastcrypto_zkp",{"doc":"Fastcrypto-zkp is an experimental crate that offers a …","t":"FFNNNNNNNNNNNNNNNCCNNNNNCNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFNCNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNCNNNHHISSHHHHHHHHHHHHHHHHHHFNONNNNONNNNNNNNONNNNNNNONFFFCNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNCCNNNCCSHHHSSHHHFHNNNNNHHHHHHHNHNNNNFNONNNNONNNNNNNNNONNNNNNNONPIIKYKYFPPFFFFPGFPKPFFFNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMONNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNOONNNNOOOONNNHNNNNNNNNNNNNNNNMMHMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIIKYKYPPKGNNNNNNNNNNNMNNNNNMMMNNNNNHHHHNIIHHFFNOONNNNNNNNNNNNNNNOONNNNNNNNN","n":["Fr","FrRepr","__clone_box","__clone_box","add","add","add_assign","add_assign","as_bits","as_byte_slice","as_mut","as_mut_bits","as_mut_byte_slice","as_mut_slice_of","as_ref","as_slice_of","base32_len","bls12381","bn254","borrow","borrow","borrow_mut","borrow_mut","check_base32","circom","clone","clone","clone_into","clone_into","cmp","conditional_select","ct_eq","ct_eq","default","default","double","dummy_circuits","encode_hex","encode_hex_upper","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from_repr","from_repr_vartime","into","into","invert","is_odd","is_zero_vartime","mul","mul","mul_assign","mul_assign","neg","partial_cmp","product","random","sqrt","sqrt_ratio","square","sub","sub","sub_assign","sub_assign","sum","to_owned","to_owned","to_repr","try_as_bits","try_as_mut_bits","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_base32","FieldElement","Proof","VerifyingKey","__clone_box","api","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","conversions","deserialize","deserialize","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verifier","vzip","vzip","vzip","prepare_pvk_bytes","verify_groth16_in_bytes","BlsFr","G1_COMPRESSED_SIZE","SCALAR_SIZE","bls_fq12_to_blst_fp12","bls_fq2_to_blst_fp2","bls_fq6_to_blst_fp6","bls_fq_to_blst_fp","bls_fr_to_blst_fr","bls_g1_affine_from_zcash_bytes","bls_g1_affine_to_blst_g1_affine","bls_g1_affine_to_zcash_bytes","bls_g2_affine_from_zcash_bytes","bls_g2_affine_to_blst_g2_affine","bls_g2_affine_to_zcash_bytes","blst_fp12_to_bls_fq12","blst_fp2_to_bls_fq2","blst_fp6_to_bls_fq6","blst_fp_to_bls_fq","blst_fr_to_bls_fr","blst_g1_affine_to_bls_g1_affine","blst_g2_affine_to_bls_g2_affine","PreparedVerifyingKey","__clone_box","alpha_g1_beta_g2","borrow","borrow_mut","clone","clone_into","delta_g2_neg_pc","deserialize","eq","equivalent","equivalent","equivalent","fmt","from","from","gamma_g2_neg_pc","into","serialize","to_owned","try_from","try_into","type_id","verify","vk_gamma_abc_g1","vzip","FieldElement","Proof","VerifyingKey","api","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deserialize","deserialize","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","poseidon","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","utils","verifier","vzip","vzip","vzip","zk_login","zk_login_api","SCALAR_SIZE","prepare_pvk_bytes","verify_groth16","verify_groth16_in_bytes","FIELD_ELEMENT_SIZE_IN_BYTES","MERKLE_TREE_DEGREE","poseidon","poseidon_bytes","poseidon_merkle_tree","GetSaltResponse","big_int_str_to_bytes","borrow","borrow_mut","deserialize","fmt","from","gen_address_seed","get_nonce","get_oidc_url","get_proof","get_salt","get_token_exchange_url","get_zk_login_address","into","split_to_two_frs","try_from","try_into","type_id","vzip","PreparedVerifyingKey","__clone_box","alpha_g1_beta_g2","borrow","borrow_mut","clone","clone_into","delta_g2_neg_pc","deserialize","eq","equivalent","equivalent","equivalent","fmt","from","from","from","gamma_g2_neg_pc","into","serialize","to_owned","try_from","try_into","type_id","verify","vk_gamma_abc_g1","vzip","Apple","Bn254","Bn254Fr","CanonicalDeserialize","CanonicalDeserialize","CanonicalSerialize","CanonicalSerialize","Claim","Facebook","Google","JWK","JWKReader","JWTDetails","JwkId","Kakao","OIDCProvider","ProviderConfig","Slack","ToConstraintField","Twitch","ZkLoginInputs","ZkLoginInputsReader","ZkLoginProof","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","alg","as_arkworks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_all_inputs_hash","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","compressed_size","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_compressed","deserialize_compressed_unchecked","deserialize_uncompressed","deserialize_uncompressed_unchecked","deserialize_with_mode","e","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fetch_jwks","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_iss","from_json","from_json","from_reader","from_reader","from_str","get_address_seed","get_config","get_hash","get_hash","get_hash","get_iss","get_kid","get_proof","hash","hash","hash","hash_ascii_str_to_field","init","into","into","into","into","into","into","into","into","into","into","iss","iss","json_schema","json_schema","json_schema","json_schema","jwk_endpoint","kid","kty","n","new","new","new","parse_jwks","partial_cmp","partial_cmp","schema_name","schema_name","schema_name","schema_name","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize_compressed","serialize_uncompressed","serialize_with_mode","serialized_size","to_field","to_field_elements","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_size","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Bn254","Bn254Fr","CanonicalDeserialize","CanonicalDeserialize","CanonicalSerialize","CanonicalSerialize","Prod","Test","ToConstraintField","ZkLoginEnv","__clone_box","borrow","borrow_mut","clone","clone_into","compressed_size","default","deserialize_compressed","deserialize_compressed_unchecked","deserialize_uncompressed","deserialize_uncompressed_unchecked","deserialize_with_mode","fmt","from","into","serialize_compressed","serialize_uncompressed","serialize_with_mode","serialized_size","to_field_elements","to_owned","try_from","try_into","type_id","uncompressed_size","verify_zk_login","verify_zk_login_id","verify_zk_login_iss","verify_zk_login_proof_with_fixed_vk","vzip","CircomG1","CircomG2","g1_affine_from_str_projective","g2_affine_from_str_projective","DummyCircuit","Fibonacci","__clone_box","a","b","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","from","from","generate_constraints","generate_constraints","into","into","new","num_constraints","num_variables","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"fastcrypto_zkp"],[91,"fastcrypto_zkp::bls12381"],[133,"fastcrypto_zkp::bls12381::api"],[135,"fastcrypto_zkp::bls12381::conversions"],[156,"fastcrypto_zkp::bls12381::verifier"],[182,"fastcrypto_zkp::bn254"],[223,"fastcrypto_zkp::bn254::api"],[227,"fastcrypto_zkp::bn254::poseidon"],[232,"fastcrypto_zkp::bn254::utils"],[252,"fastcrypto_zkp::bn254::verifier"],[279,"fastcrypto_zkp::bn254::zk_login"],[519,"fastcrypto_zkp::bn254::zk_login_api"],[559,"fastcrypto_zkp::circom"],[563,"fastcrypto_zkp::dummy_circuits"],[594,"dyn_clone::sealed"],[595,"bitvec::slice"],[596,"bitvec::order"],[597,"byte_slice_cast"],[598,"core::result"],[599,"byte_slice_cast"],[600,"alloc::vec"],[601,"core::cmp"],[602,"subtle"],[603,"core::iter::traits::collect"],[604,"core::fmt"],[605,"core::fmt"],[606,"core::borrow"],[607,"core::iter::traits::iterator"],[608,"rand_core"],[609,"bitvec::ptr::span"],[610,"core::any"],[611,"bech32"],[612,"ark_bls12_381::curves"],[613,"ark_groth16::data_structures"],[614,"ark_groth16::data_structures"],[615,"blst"],[616,"ark_bls12_381::fields::fq2"],[617,"blst"],[618,"blst"],[619,"blst"],[620,"blst"],[621,"blst"],[622,"alloc::string"],[623,"ark_serialize::error"],[624,"ark_std::io"],[625,"ark_serialize"],[626,"ark_serialize"],[627,"core::hash"],[628,"core::marker"],[629,"core::hash"],[630,"schemars::schema"],[631,"serde::ser"],[632,"ark_std::io"],[633,"im::hash::map"],[634,"ark_bn254::curves"],[635,"ark_bn254::curves"],[636,"ark_ff::fields::prime"],[637,"core::fmt"],[638,"ark_relations::r1cs::error"]],"d":["Definition of the BN254 prime field.","","","","","","","","","","","","","","","","","Groth16 verifier over the BLS12-381 elliptic curve …","Groth16 verifier over the BN254 elliptic curve …","","","","","","Circom-compatible deserialization of points","","","","","","","","","","","","Simple circuits used in benchmarks and demos","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Computes a uniformly random element using rejection …","","","","","","","","","","","","","","","","","","","","","","","A field element in the BLS12-381 construction. Thin …","A Groth16 proof in the BLS12-381 construction. Thin …","A Groth16 verifying key in the BLS12-381 construction. …","","API that takes in serialized inputs","","","","","","","","","Conversions between arkworks &lt;-&gt; blst","Deserialize a serialized Groth16 proof using arkworks’ …","Deserialize a serialized Groth16 verifying key in …","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Groth16 SNARK verifier","","","","Deserialize bytes as an Arkwork representation of a …","Verify Groth16 proof using the serialized form of the four …","","G1 affine point compressed size.","Size of scalar elements.","Convert an Arkworks BLS12-381 target field element to a …","Convert an Arkworks BLS12-381 quadratic extension field …","Convert an Arkworks BLS12-381 degree-6 extension field …","Convert an Arkworks BLS12-381 prime field element to a …","Convert an Arkworks BLS12-381 scalar field element to a …","This deserializes an Arkworks G1Affine point from a Zcash …","Convert an Arkworks BLS12-381 affine G1 point to a blst …","This serializes an Arkworks G1Affine point into a Zcash …","This deserializes an Arkworks G2Affine point from a Zcash …","Convert an Arkworks BLS12-381 affine G2 point to a blst …","This serializes an Arkworks G2Affine point into a Zcash …","Convert a blst target field element to an Arkworks …","Convert a blst quadratic extension field element to an …","Convert a blst degree-6 extension field element to an …","Convert a blst prime field element to an Arkworks …","Convert a blst scalar field element to an Arkworks …","Convert a blst affine G1 point to an Arkworks BLS12-381 …","Convert a blst affine G2 point to an Arkworks BLS12-381 …","This is a helper function to store a pre-processed version …","","The element <code>e(alpha * G, beta * H)</code> in <code>E::GT</code>.","","","","","The element <code>- delta * H</code> in <code>E::G2</code>, for use in pairings.","Deserialize the prepared verifying key from the serialized …","","","","","","Takes an input <code>ark_groth16::VerifyingKey</code> <code>vk</code> and returns a …","Returns the argument unchanged.","The element <code>- gamma * H</code> in <code>E::G2</code>, for use in pairings.","Calls <code>U::from(self)</code>.","Serialize the prepared verifying key to its vectors form.","","","","","Returns the validity of the Groth16 proof passed as …","The element vk.gamma_abc_g1, aka the …","","A field element in the BN254 construction. Thin wrapper …","A Groth16 proof in the BN254 construction. Thin wrapper …","A Groth16 verifying key in the BN254 construction. Thin …","API that takes in serialized inputs","","","","","","","Deserialize a serialized Groth16 proof using arkworks’ …","Deserialize a serialized Groth16 verifying key in …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Poseidon hash function over BN254","","","","","","","","","","Zk login utils","Groth16 SNARK verifier","","","","Zk login structs and utilities","Zk login entrypoints","Size of scalars in the BN254 construction.","Deserialize bytes as an Arkwork representation of a …","Verify proof with a given verifying key in [struct …","Verify Groth16 proof using the serialized form of the …","The output of the Poseidon hash function is a field …","The degree of the Merkle tree used to hash multiple …","Poseidon hash function over BN254. The input vector cannot …","Calculate the poseidon hash of an array of inputs. Each …","Calculate the poseidon hash of the field element inputs. …","A response struct for the salt server.","Convert a big int string to a big endian bytearray.","","","","","Returns the argument unchanged.","Calculate the Sui address based on address seed and …","Calculate the nonce for the given parameters. Nonce is …","Return the OIDC URL for the given parameters. Crucially …","Call the prover backend to get the zkLogin inputs based on …","Call the salt server for the given jwt_token and return …","Return the token exchange URL for the given auth code.","Calculate the Sui address based on address seed and …","Calls <code>U::from(self)</code>.","Given a 33-byte public key bytes (flag || pk_bytes), …","","","","","This is a helper function to store a pre-processed version …","","The element <code>e(alpha * G, beta * H)</code> in <code>E::GT</code>.","","","","","The element <code>- delta * H</code> in <code>E::G2</code>, for use in pairings.","Deserialize the prepared verifying key from the serialized …","","","","","","","Takes an input <code>ark_groth16::VerifyingKey</code> <code>vk</code> and returns a …","Returns the argument unchanged.","The element <code>- gamma * H</code> in <code>E::G2</code>, for use in pairings.","Calls <code>U::from(self)</code>.","Serialize the prepared verifying key to its vectors form.","","","","","Verify Groth16 proof using the prepared verifying key (see …","The element vk.gamma_abc_g1, aka the …","","See …","","","Deserializer in little endian format. This trait can be …","","Serializer in little endian format. This trait can be …","","A claim consists of value and index_mod_4.","See …","See …","Struct that contains info for a JWK. A list of them for …","Reader struct to parse all fields in a JWK from JSON.","A structed of parsed JWT details, consists of kid, header, …","Key to identify a JWK, consists of iss and kid.","See …","Supported OIDC providers.","The provider config consists of iss string and jwk …","See https://slack.com/.well-known/openid-configuration","Types that can be converted to a vector of <code>F</code> elements. …","See …","All inputs required for the zk login proof verification …","The reader struct for the proving service response.","The struct for zk login proof.","","","","","","","","","Algorithm parameter, …","Convert the Circom G1/G2/GT to arkworks G1/G2/GT","","","","","","","","","","","","","","","","","","","","","Calculate the poseidon hash from selected fields from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The general deserialize method that takes in customization …","RSA public exponent, …","","","","","","","","","","","","","","","","","","","","","Fetch JWKs from the given provider and return a list of …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the OIDCProvider for the given iss string.","Parse the proving service response and pass in the address …","Parse the proof from a json string.","Parse JWK from the reader struct.","Initialize ZkLoginInputs from the","","Get the address seed string.","Returns the provider config consisting of iss and jwk …","","","","Get the parsed iss string.","Get the parsed kid string.","Get the zk login proof.","","","","Pads a stream of bytes and maps it to a field element","Initialize JWTDetails by parsing header_base64 and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","iss string that identifies the OIDC provider.","iss string that identifies the OIDC provider.","","","","","The JWK url string for the given provider.","kid string that identifies the JWK.","Key type parameter, …","RSA modulus, …","Create a new JwkId.","Create a new provider config.","Read in the Claim and header string. Parse and validate …","Parse the JWK bytes received from the given provider and …","","","","","","","","","","","","","","","","The general serialize method that takes in customization …","","Convert a bigint string to a field element.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deserializer in little endian format. This trait can be …","","Serializer in little endian format. This trait can be …","","Use the secure global verifying key derived from ceremony.","Use the insecure global verifying key.","Types that can be converted to a vector of <code>F</code> elements. …","Enum to specify the environment to use for verifying keys.","","","","","","","","","","","","The general deserialize method that takes in customization …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","The general serialize method that takes in customization …","","","","","","","","Entry point for the ZkLogin API.","Verify that the given parameters (name, value, aud, iss …","Verify that the given parameters (address_seed and iss) …","Verify a proof against its public inputs using the fixed …","","A G1 point in BN254 serialized as a vector of three …","A G2 point in BN254 serialized as a vector of three …","Deserialize a G1 projective point in BN254 serialized as a …","Deserialize a G2 projective point from the BN254 …","A dummy circuit that checks an addition constraint between …","A circuit that checks a parametrized number of R1CS …","","the first input to the circuit","the second input to the circuit","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new instance of the Fibonacci circuit. We have to …","the number of constraints to the circuit","The number of variables to the circuit","","","","","","","","",""],"i":[0,0,8,3,3,3,3,3,8,8,8,8,8,8,8,8,8,0,0,8,3,8,3,8,0,8,3,8,3,3,3,8,3,8,3,3,0,8,8,8,3,8,8,8,3,3,3,8,3,8,8,8,3,3,3,3,8,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,3,3,8,8,8,3,8,3,8,3,8,3,8,0,0,0,32,0,32,33,35,32,33,35,32,32,0,33,35,32,33,35,32,32,33,33,35,35,32,33,35,32,32,33,35,32,33,35,32,33,35,0,32,33,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,58,56,57,58,56,57,56,57,58,56,57,58,58,56,56,57,57,58,56,57,0,58,56,57,58,56,57,58,56,57,0,0,58,56,57,0,0,0,0,0,0,0,0,0,0,0,0,0,63,63,63,63,63,0,0,0,0,0,0,0,63,0,63,63,63,63,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,66,0,0,0,0,0,0,0,66,66,0,0,0,0,66,0,0,66,0,66,0,0,0,70,66,71,72,73,69,67,68,71,68,70,82,66,71,75,72,73,69,67,68,70,82,66,71,75,72,73,69,67,68,69,70,66,71,72,73,69,67,68,70,66,71,72,73,69,67,68,70,71,74,73,70,71,75,72,69,67,68,76,76,76,76,76,71,70,66,71,72,73,70,70,70,66,66,66,71,71,71,72,72,72,73,73,73,0,70,82,66,71,75,72,73,69,67,68,70,82,66,71,75,72,73,69,67,68,66,69,68,71,69,66,69,66,70,66,71,69,69,69,70,66,71,0,69,70,82,66,71,75,72,73,69,67,68,70,82,72,69,67,68,82,70,71,71,70,82,73,0,70,71,72,69,67,68,70,71,75,72,69,67,68,74,74,74,74,0,91,70,66,71,72,73,69,67,68,66,70,82,66,71,75,72,73,69,67,68,70,82,66,71,75,72,73,69,67,68,70,82,66,71,75,72,73,69,67,68,74,70,82,66,71,75,72,73,69,67,68,0,0,0,0,0,0,93,93,0,0,93,93,93,93,93,74,93,76,76,76,76,76,93,93,93,74,74,74,74,91,93,93,93,93,74,0,0,0,0,93,0,0,0,0,0,0,99,99,99,99,103,99,103,99,99,99,103,99,103,99,103,99,103,103,99,99,99,99,103,99,103,99,103,99,103],"f":[0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[3,3],3],[[3,3],3],[[3,3],2],[[3,3],2],[-1,[[4,[-2,-3]]],[],[],5],[-1,[[7,[6]]],[]],[8,[[7,[6]]]],[-1,[[4,[-2,-3]]],[],[],5],[-1,[[7,[6]]],[]],[-1,[[10,[[7,[-2]],9]]],[],11],[8,[[7,[6]]]],[-1,[[10,[[7,[-2]],9]]],[],11],[-1,12,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[[14,[13]]]]],[]],0,[8,8],[3,3],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[3,3],15],[[3,3,16],3],[[8,8],16],[[3,3],16],[[],8],[[],3],[3,3],0,[-1,-2,[],[[18,[17]]]],[-1,-2,[],[[18,[17]]]],[[8,8],19],[[3,3],19],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[8,20],21],[[3,20],21],[3,8],[3,8],[-1,-1,[]],[-1,-1,[]],[22,3],[8,[[23,[3]]]],[8,[[24,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[3,[[23,[3]]]],[3,16],[3,19],[[3,3],3],[[3,3],3],[[3,3],2],[[3,3],2],[3,3],[[3,3],[[24,[15]]]],[-2,3,[[25,[3]]],[[27,[],[[26,[-1]]]]]],[-1,3,28],[3,[[23,[3]]]],[[3,3],[[2,[16,3]]]],[3,3],[[3,3],3],[[3,3],3],[[3,3],2],[[3,3],2],[-2,3,[[25,[3]]],[[27,[],[[26,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[3,8],[-1,[[10,[[4,[-2,-3]],[29,[-2]]]]],[],[],5],[-1,[[10,[[4,[-2,-3]],[29,[-2]]]]],[],[],5],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[10,[2]]],[],31],0,0,0,[[-1,1],2,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[32,32],[[-1,-2],2,[],[]],0,[[[7,[6]]],[[34,[33]]]],[[[7,[6]]],[[34,[35]]]],[[32,20],21],[[33,20],21],[[35,20],21],[-1,-1,[]],[36,32],[[[38,[37]]],33],[-1,-1,[]],[[[39,[37]]],35],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[6]]],[[10,[[14,[[14,[6]]]],40]]]],[[[7,[6]],[7,[6]],[7,[6]],[7,[6]],[7,[6]],[7,[6]]],[[10,[19,40]]]],0,0,0,[41,42],[43,44],[45,46],[47,48],[36,49],[[[50,[6]]],[[24,[51]]]],[51,52],[51,[[50,[6]]]],[[[50,[6]]],[[24,[53]]]],[53,54],[53,[[50,[6]]]],[42,41],[44,43],[46,45],[48,47],[49,36],[52,51],[54,53],0,[[-1,1],2,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[55,55],[[-1,-2],2,[],[]],0,[[[14,[-1]]],[[10,[55,40]]],[[25,[[7,[6]]]]]],[[55,55],19],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[55,20],21],[35,55],[-1,-1,[]],0,[-1,-2,[],[]],[55,[[10,[[14,[[14,[6]]]],40]]]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,30,[]],[[55,[7,[32]],33],[[10,[19,40]]]],0,[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[6]]],[[34,[56]]]],[[[7,[6]]],[[34,[57]]]],[[58,20],21],[[56,20],21],[[57,20],21],[59,58],[-1,-1,[]],[-1,-1,[]],[[[38,[60]]],56],[[[39,[60]]],57],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[7,[6]]],[[10,[[14,[[14,[6]]]],40]]]],[[61,[7,[6]],[7,[6]]],[[10,[19,40]]]],[[[7,[6]],[7,[6]],[7,[6]],[7,[6]],[7,[6]],[7,[6]]],[[10,[19,40]]]],0,0,[[[14,[59]]],[[10,[59,40]]]],[[[14,[[14,[6]]]]],[[10,[[50,[6]],40]]]],[[[14,[59]]],[[10,[59,40]]]],0,[62,[[10,[[14,[6]],40]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[63]]],64],[[63,20],21],[-1,-1,[]],[[62,62,62,62],[[10,[65,40]]]],[[[7,[6]],22,62],[[10,[65,40]]]],[[66,[7,[6]],22,62,62,62],[[10,[65,40]]]],[[62,22,62,62,62,62],[[10,[67,40]]]],[[62,62],[[10,[65,40]]]],[[66,62,62,62,62],[[10,[65,40]]]],[[62,62],[[10,[[50,[6]],40]]]],[-1,-2,[],[]],[[[7,[6]]],[[10,[[2,[59,59]],40]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,30,[]],[-1,-2,[],[]],0,[[-1,1],2,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[61,61],[[-1,-2],2,[],[]],0,[[[14,[-1]]],[[10,[61,40]]],[[25,[[7,[6]]]]]],[[61,61],19],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[61,20],21],[[[39,[60]]],61],[57,61],[-1,-1,[]],0,[-1,-2,[],[]],[61,[[10,[[14,[[14,[6]]]],40]]]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,30,[]],[[61,[7,[58]],56],[[10,[19,40]]]],0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],0,[68,[[10,[[38,[60]],40]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[69,[7,[6]],[7,[6]],22],[[10,[59,40]]]],[70,70],[66,66],[71,71],[72,72],[73,73],[69,69],[67,67],[68,68],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[70,70],15],[[71,71],15],[74,12],[[],73],[-1,[[10,[70]]],64],[-1,[[10,[71]]],64],[-1,[[10,[75]]],64],[-1,[[10,[72]]],64],[-1,[[10,[69]]],64],[-1,[[10,[67]]],64],[-1,[[10,[68]]],64],[-1,[[10,[76,77]]],78],[-1,[[10,[76,77]]],78],[-1,[[10,[76,77]]],78],[-1,[[10,[76,77]]],78],[[-1,79,80],[[10,[76,77]]],78],0,[[70,70],19],[[66,66],19],[[71,71],19],[[72,72],19],[[73,73],19],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[-1,-2],19,[],[]],[[66,81],[[10,[[14,[[2,[70,71]]]],40]]]],[[70,20],21],[[82,20],21],[[66,20],21],[[71,20],21],[[75,20],21],[[72,20],21],[[73,20],21],[[69,20],21],[[67,20],21],[[68,20],21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[62,[[10,[66,40]]]],[[62,62],[[10,[69,40]]]],[62,[[10,[68,40]]]],[75,[[34,[71]]]],[[67,62],[[10,[69,40]]]],[62,[[10,[66,-1]]],[]],[69,62],[66,82],[[-1,-2],22,[83,84],85],[[-1,-2],22,[83,84],85],[[-1,-2],22,[83,84],85],[69,62],[69,62],[69,68],[[70,-1],2,86],[[66,-1],2,86],[[71,-1],2,86],[[62,6],[[10,[59,40]]]],[69,[[10,[69,40]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[87,88],[87,88],[87,88],[87,88],0,0,0,0,[[65,65],70],[[62,62],82],[[62,72],[[10,[73,40]]]],[[[7,[6]],66],[[10,[[14,[[2,[70,71]]]],40]]]],[[70,70],[[24,[15]]]],[[71,71],[[24,[15]]]],[[],65],[[],65],[[],65],[[],65],[[70,-1],10,89],[[71,-1],10,89],[[75,-1],10,89],[[72,-1],10,89],[[69,-1],10,89],[[67,-1],10,89],[[68,-1],10,89],[[74,-1],[[10,[2,77]]],90],[[74,-1],[[10,[2,77]]],90],[[74,-1,79],[[10,[2,77]]],90],[[74,79],12],[62,[[10,[59,40]]]],[91,[[24,[[14,[-1]]]]],92],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[66,65],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[74,12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[93,93],[[-1,-2],2,[],[]],[74,12],[[],93],[-1,[[10,[76,77]]],78],[-1,[[10,[76,77]]],78],[-1,[[10,[76,77]]],78],[-1,[[10,[76,77]]],78],[[-1,79,80],[[10,[76,77]]],78],[[93,20],21],[-1,-1,[]],[-1,-2,[],[]],[[74,-1],[[10,[2,77]]],90],[[74,-1],[[10,[2,77]]],90],[[74,-1,79],[[10,[2,77]]],90],[[74,79],12],[91,[[24,[[14,[-1]]]]],92],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,30,[]],[74,12],[[69,22,[7,[6]],[94,[70,71]],93],[[10,[2,40]]]],[[[7,[6]],62,62,62,62,62],[[34,[2]]]],[[[7,[6]],62,62],[[34,[2]]]],[[93,[38,[60]],[7,[59]]],[[10,[19,40]]]],[-1,-2,[],[]],0,0,[95,[[10,[96,40]]]],[97,[[10,[98,40]]]],0,0,[[-1,1],2,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[99,[-1]]],[[99,[-1]]],[100,101]],[[-1,-2],2,[],[]],[[[99,[-1]],20],21,[102,101]],[[[103,[-1]],20],21,[102,101]],[-1,-1,[]],[-1,-1,[]],[[[99,[-1]],[104,[-1]]],[[10,[2,105]]],101],[[[103,[-1]],[104,[-1]]],[[10,[2,105]]],101],[-1,-2,[],[]],[-1,-2,[],[]],[[12,-1,-1],[[103,[-1]]],101],0,0,[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[5,"Private",594],[1,"tuple"],[5,"Fr",0],[5,"BitSlice",595],[10,"BitOrder",596],[1,"u8"],[1,"slice"],[5,"FrRepr",0],[6,"Error",597],[6,"Result",598],[10,"FromByteSlice",597],[1,"usize"],[5,"u5",599],[5,"Vec",600],[6,"Ordering",601],[5,"Choice",602],[1,"char"],[10,"FromIterator",603],[1,"bool"],[5,"Formatter",604],[8,"Result",604],[1,"u64"],[5,"CtOption",602],[6,"Option",605],[10,"Borrow",606],[17,"Item"],[10,"Iterator",607],[10,"RngCore",608],[6,"BitSpanError",609],[5,"TypeId",610],[10,"WriteBase32",599],[5,"FieldElement",91],[5,"Proof",91],[8,"FastCryptoResult",611],[5,"VerifyingKey",91],[8,"BlsFr",135],[8,"Bls12_381",612],[5,"Proof",613],[5,"VerifyingKey",613],[6,"FastCryptoError",611],[8,"Fq12",614],[5,"blst_fp12",615],[8,"Fq2",616],[5,"blst_fp2",615],[8,"Fq6",617],[5,"blst_fp6",615],[8,"Fq",618],[5,"blst_fp",615],[5,"blst_fr",615],[1,"array"],[8,"G1Affine",619],[5,"blst_p1_affine",615],[8,"G2Affine",620],[5,"blst_p2_affine",615],[5,"PreparedVerifyingKey",156],[5,"Proof",182],[5,"VerifyingKey",182],[5,"FieldElement",182],[8,"Bn254Fr",519],[8,"Bn254",519],[5,"PreparedVerifyingKey",252],[1,"str"],[5,"GetSaltResponse",232],[10,"Deserializer",621],[5,"String",622],[6,"OIDCProvider",279],[5,"ZkLoginInputsReader",279],[5,"ZkLoginProof",279],[5,"ZkLoginInputs",279],[5,"JwkId",279],[5,"JWK",279],[5,"Claim",279],[5,"JWTDetails",279],[10,"CanonicalSerialize",519],[5,"JWKReader",279],[10,"CanonicalDeserialize",519],[6,"SerializationError",623],[10,"Read",624],[6,"Compress",625],[6,"Validate",625],[5,"Client",626],[5,"ProviderConfig",279],[10,"Hash",627],[10,"Sized",628],[10,"BuildHasher",627],[10,"Hasher",627],[5,"SchemaGenerator",629],[6,"Schema",630],[10,"Serializer",631],[10,"Write",624],[10,"ToConstraintField",519],[10,"Field",632],[6,"ZkLoginEnv",519],[5,"HashMap",633],[8,"CircomG1",559],[8,"G1Affine",634],[8,"CircomG2",559],[8,"G2Affine",634],[5,"DummyCircuit",563],[10,"Clone",635],[10,"PrimeField",636],[10,"Debug",604],[5,"Fibonacci",563],[6,"ConstraintSystemRef",637],[6,"SynthesisError",638]],"b":[[4,"impl-Add%3C%26Fr%3E-for-Fr"],[5,"impl-Add-for-Fr"],[6,"impl-AddAssign%3C%26Fr%3E-for-Fr"],[7,"impl-AddAssign-for-Fr"],[49,"impl-From%3C%26Fr%3E-for-FrRepr"],[50,"impl-From%3CFr%3E-for-FrRepr"],[61,"impl-Mul%3C%26Fr%3E-for-Fr"],[62,"impl-Mul-for-Fr"],[63,"impl-MulAssign%3C%26Fr%3E-for-Fr"],[64,"impl-MulAssign-for-Fr"],[72,"impl-Sub-for-Fr"],[73,"impl-Sub%3C%26Fr%3E-for-Fr"],[74,"impl-SubAssign-for-Fr"],[75,"impl-SubAssign%3C%26Fr%3E-for-Fr"],[266,"impl-From%3C%26VerifyingKey%3CBn%3CConfig%3E%3E%3E-for-PreparedVerifyingKey"],[267,"impl-From%3C%26VerifyingKey%3E-for-PreparedVerifyingKey"]]}],\
["sigs_cli",{"doc":"","t":"PPGPPFPPPPPGFFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNHOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["BLS12381MinPk","BLS12381MinSig","Command","Ed25519","Keygen","KeygenArguments","Secp256k1","Secp256k1Recoverable","Secp256r1","Secp256r1Recoverable","Sign","SignatureScheme","SigningArguments","VerifiyingArguments","Verify","__clone_box","__clone_box","__clone_box","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","command","command","command","command","command_for_update","command_for_update","command_for_update","command_for_update","execute","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_str","group_id","group_id","group_id","has_subcommand","into","into","into","into","into","main","msg","msg","public_key","scheme","scheme","scheme","secret_key","seed","signature","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"sigs_cli"],[115,"dyn_clone::sealed"],[116,"clap::builder::command"],[117,"fastcrypto::error"],[118,"core::result"],[119,"clap::parser::matches::arg_matches"],[120,"clap"],[121,"clap::util::id"],[122,"core::option"],[123,"core::any"]],"d":["","","","","Generate a keypair using the signature scheme with a …","","","","","","Sign a message using a secret key using the signature …","","","","Verify the signature against the message and public key …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The raw message to be signed.","The raw message signed.","Public key to verify the signature.","Name of the signature scheme.","Name of the signature scheme.","Name of the signature scheme.","Hex encoded secret key string used to sign.","Hex encoded 32-byte seed for deterministic key generation. …","Hex encoded signature to be verified.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[13,13,0,13,7,0,13,13,13,13,7,0,0,0,7,4,5,6,4,5,6,4,5,6,7,7,13,7,4,5,6,13,7,4,5,6,4,5,6,4,5,6,7,4,5,6,7,4,5,6,0,13,7,4,5,6,7,4,5,6,7,4,5,6,13,4,5,6,7,13,7,4,5,6,0,5,6,6,4,5,6,5,4,6,4,5,6,13,7,4,5,6,13,7,4,5,6,13,7,4,5,6,7,4,5,6,7,4,5,6,13,7,4,5,6],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[5,5],[6,6],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[7,[[9,[2,8]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[10,[[9,[7,11]]]],[10,[[9,[4,11]]]],[10,[[9,[5,11]]]],[10,[[9,[6,11]]]],[10,[[9,[7,11]]]],[10,[[9,[4,11]]]],[10,[[9,[5,11]]]],[10,[[9,[6,11]]]],[12,[[9,[13,-1]]],[]],[[],[[15,[14]]]],[[],[[15,[14]]]],[[],[[15,[14]]]],[12,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],2],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[[7,10],[[9,[2,11]]]],[[4,10],[[9,[2,11]]]],[[5,10],[[9,[2,11]]]],[[6,10],[[9,[2,11]]]],[[7,10],[[9,[2,11]]]],[[4,10],[[9,[2,11]]]],[[5,10],[[9,[2,11]]]],[[6,10],[[9,[2,11]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[5,"Private",115],[1,"tuple"],[5,"Command",116],[5,"KeygenArguments",0],[5,"SigningArguments",0],[5,"VerifiyingArguments",0],[6,"Command",0],[6,"FastCryptoError",117],[6,"Result",118],[5,"ArgMatches",119],[8,"Error",120],[1,"str"],[6,"SignatureScheme",0],[5,"Id",121],[6,"Option",122],[1,"bool"],[5,"TypeId",123]],"b":[]}],\
["vdf_cli",{"doc":"","t":"GSPFPFPFNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNOOHNNNNNNNNNNNNNNNNNNNNOOHOOONNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Command","DEFAULT_DISCRIMINANT_BIT_LENGTH","Discriminant","DiscriminantArguments","Evaluate","EvaluateArguments","Verify","VerifyArguments","__clone_box","__clone_box","__clone_box","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","bit_length","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","command","command","command","command","command_for_update","command_for_update","command_for_update","command_for_update","discriminant","discriminant","execute","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","group_id","has_subcommand","into","into","into","into","iterations","iterations","main","output","proof","seed","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","vzip","vzip","vzip","vzip"],"q":[[0,"vdf_cli"],[98,"dyn_clone::sealed"],[99,"clap::builder::command"],[100,"alloc::string"],[101,"std::io::error"],[102,"core::result"],[103,"clap::parser::matches::arg_matches"],[104,"clap"],[105,"clap::util::id"],[106,"core::option"],[107,"core::any"]],"d":["","","Sample a random discriminant from a seed.","","Compute VDF output and proof.","","Verify an output .","","","","","","","","","","","","","Bit length of the discriminant (default is 1024).","","","","","","","","","","","","","","","","","","","","","","","The hex encoded discriminant.","The hex encoded discriminant.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The number of iterations.","Iterations","","The output of the VDF.","The proof of the correctness of the VDF output.","The hex encoded discriminant.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,7,0,7,0,7,0,4,5,6,4,5,6,4,5,6,7,7,4,7,4,5,6,7,4,5,6,4,5,6,4,5,6,7,4,5,6,7,4,5,6,5,6,0,7,4,5,6,7,4,5,6,7,4,5,6,4,5,6,7,7,4,5,6,5,6,0,6,6,4,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6],"f":[0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[5,5],[6,6],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],0,0,[7,[[10,[8,9]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[11,[[10,[7,12]]]],[11,[[10,[4,12]]]],[11,[[10,[5,12]]]],[11,[[10,[6,12]]]],[11,[[10,[7,12]]]],[11,[[10,[4,12]]]],[11,[[10,[5,12]]]],[11,[[10,[6,12]]]],[[],[[14,[13]]]],[[],[[14,[13]]]],[[],[[14,[13]]]],[15,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],2],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[[7,11],[[10,[2,12]]]],[[4,11],[[10,[2,12]]]],[[5,11],[[10,[2,12]]]],[[6,11],[[10,[2,12]]]],[[7,11],[[10,[2,12]]]],[[4,11],[[10,[2,12]]]],[[5,11],[[10,[2,12]]]],[[6,11],[[10,[2,12]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[5,"Private",98],[1,"tuple"],[5,"Command",99],[5,"DiscriminantArguments",0],[5,"EvaluateArguments",0],[5,"VerifyArguments",0],[6,"Command",0],[5,"String",100],[5,"Error",101],[6,"Result",102],[5,"ArgMatches",103],[8,"Error",104],[5,"Id",105],[6,"Option",106],[1,"str"],[1,"bool"],[5,"TypeId",107]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
