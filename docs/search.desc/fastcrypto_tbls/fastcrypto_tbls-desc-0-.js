searchState.loadedDescShard("fastcrypto_tbls", 0, "A crate that implements threshold BLS (tBLS) and …\nAssumptions:\nA Confirmation is sent during the second phase of the …\nMessage holds all encrypted shares a dealer sends during …\nOutput is the final output of the DKG protocol in case it …\nGenerics below use …\nWrapper for collecting everything related to a processed …\nUnique processed messages that are being used in the …\nProcessed messages that were not excluded after the third …\nList of complaints against other parties. Empty if there …\nExecute the previous two steps together.\nCreate the first message to be broadcasted.\nThe encrypted shares created by the sender. Sorted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge results from multiple ProcessedMessages so only one …\nCreate a new ECIES private key and send the public key to …\nProcess a message and create the second message to be …\nPossibly empty\nThe threshold needed to reconstruct the full key/signature.\nThe commitment of the secret polynomial created by the …\nCheck that partial public keys form a polynomial of the …\nChecks if vectors v1=(a1<em>G1, …, an</em>G1) and v2=(a1’*G2, …\nCheck that a pair (k, H) satisfies H = k*G using a random …\nChecks that a given set of evaluations is consistent with …\nCheck that a triplet (k, G, H) satisfies H = k*G using a …\nMulti-recipient encryption with a proof-of-possession of …\nSimple ECIES encryption using a generic group and …\nA recovery package that allows decrypting a <em>specific</em> ECIES …\nAssumption: Verify is called before …\nAssumption: Verify is called before decrypt and do not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEmulates the output of an insecure DKG protocol (to be …\nNIZKPoK for the DL [G, xG].\nNIZKPoK for the DDH tuple [G, H=eG, xG, xH].\nCreate a new NIZKPoK for the DDH tuple [G, H=eG, xG, xH] …\nCreate a new NIZKPoK for the DL [G, xG] using the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerify this NIZKPoK.\nPublic parameters of a party.\nWrapper for a set of nodes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an iterator on the nodes.\nCreate a new set of nodes. Nodes must have consecutive ids …\nCreate a new set of nodes. Nodes must have consecutive ids …\nNumber of nodes.\nGet the node corresponding to a share id.\nGet an iterator on the share ids.\nGet the share ids of a node (ordered). Returns error if …\nTotal weight of the nodes.\nTypes\nA polynomial that is using a scalar for the variable x and …\nReturns the coefficients of the polynomial.\nReturn the constant term of the polynomial.\nCommits the scalar polynomial to the group and returns a …\nReturns the degree of the polynomial\nEvaluates the polynomial at the specified value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new polynomial of the given degree where each …\nChecks if a given share is valid.\nReturns a polynomial with the zero element.\nRandom Oracle from SHA3-512.\nEvaluate the random oracle on a given input.\nDerive a new random oracle from the current one and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a fresh random oracle with a given “session id”…\n<code>Public</code> represents the group over which the public keys are …\n<code>Signature</code> represents the group over which the signatures …\nTrait ThresholdBls provides sign &amp; verify functions for …\nInterpolate partial signatures to recover the full …\nSign a message using the private share/partial key.\nSign a message using one of more private share/partial …\nVerify a signature done by a partial key holder.\nVerify a set of signatures done by a partial key holder. …\nVerify a signature on a given message. This is standard …\nWrapper of a value that is associated with a specific …\ntBLS with ThresholdBls12381MinSig types.\nIndexes of shares/private keys (0 is reserved for the …\nImplementation of [ThresholdBls] for BLS12-381-min-sig. A …\nBasic wrapper of a set of values that are not associated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")