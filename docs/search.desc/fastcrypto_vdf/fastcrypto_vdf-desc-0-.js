searchState.loadedDescShard("fastcrypto_vdf", 0, "This module contains implementation of imaginary class …\nThis module contains a implementation of a verifiable …\nA binary quadratic form, (a, b, c) for arbitrary integers …\nCompute the composition of this quadratic form with …\nDiscriminants of quadratic forms are negative primes which …\nCompute the discriminant of this quadratic form, eg. b^2 - …\nReturns the argument unchanged.\nCreate a new quadratic form given only the a and b …\nReturn a generator (or, more precisely, an element with a …\nGenerate a random quadratic form from a seed with the …\nCalls <code>U::from(self)</code>.\nFixed 3072 bit discriminant. Generated from the seed …\nA discriminant for an imaginary class group. The …\nReturn the number of bits needed to represent this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCompute a valid discriminant (aka a negative prime equal …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA valid discriminant should be a negative prime congruent …\nThis module contains an implementation of a hash-to-prime …\nCheck if the input is a probable prime.\nCompute the Jacobi symbol (a/m) for odd m. If m is prime, …\nThe type of the parameter which uniquely defines this …\nTrait implemented by elements of an additive group where …\nReturns true if this is an element of the group defined by …\nCompute self * scalar.\nReturn an instance of the identity element in this group.\nThis represents an element of the subgroup of an RSA group …\nReturns the argument unchanged.\nGenerate a random element of the subgroup ZN* / &lt;±1&gt; …\nCalls <code>U::from(self)</code>.\nCreate a new RSA group element with the given value and …\nReturn the canonical representation of this group element.\nCreate an RSA modulus from a BigUint. The modulus is not …\nReturns the argument unchanged.\nParse an RSA modulus from a decimal string. The modulus is …\nCalls <code>U::from(self)</code>.\nThe type of the input to the VDF.\nThe type of the output from the VDF.\nThe type of the proof of correctness for this VDF.\nThis represents a Verifiable Delay Function (VDF) …\nEvaluate this VDF and return the output and a proof of …\nVerify the output and proof from a VDF.\nDefault size in bytes of the Fiat-Shamir challenge used in …\nThis implements Pietrzak’s VDF construction from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new VDF using the group defined by the given …\nDefault size in bytes of the Fiat-Shamir challenge used in …\nImplementation of Wesolowski’s VDF construction over an …\nAn implementation of Wesolowski’s VDF construction …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new VDF using the group defined by the given …")