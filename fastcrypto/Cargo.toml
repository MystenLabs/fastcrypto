[package]
name = "fastcrypto"
version = "0.1.9"
license = "Apache-2.0"
authors = ["Mysten Labs <build@mystenlabs.com>"]
edition = "2021"
publish = ["crates-io"]
readme = "../README.md"
description = "Common cryptographic library used at Mysten Labs"
repository = "https://github.com/MystenLabs/fastcrypto"

[dependencies]
base64ct = { workspace = true, features = ["alloc"] }
bs58 = { workspace = true }
ed25519-consensus = { workspace = true, features = ["serde"] }
hex = { workspace = true }
hex-literal = { workspace = true }
hkdf = { workspace = true, features = ["std"] }
rand.workspace = true
rust_secp256k1 = { version = "0.27.0", package = "secp256k1", features = ["recovery", "rand-std", "bitcoin_hashes", "global-context"] }
serde.workspace = true
serde_with = { workspace = true, features = ["alloc", "macros"] }
signature = { workspace = true }
tokio = { workspace = true, features = ["sync", "rt", "macros"] }
zeroize.workspace = true
curve25519-dalek-ng = { workspace = true }
generic-array = { workspace = true, features = ["serde"] }
typenum.workspace = true
auto_ops = { workspace = true }
derive_more = { workspace = true }
p256 = { workspace = true, features = ["ecdsa"] }
ecdsa = { workspace = true, features = ["rfc6979", "verifying"] }
rfc6979 = { workspace = true }
blake2 = { workspace = true }
blst = { workspace = true, features = ["no-threads"] }
digest.workspace = true
once_cell = { workspace = true }
readonly = { workspace = true }
sha2 = { workspace = true }
sha3.workspace = true
thiserror = { workspace = true }
schemars = { workspace = true }
bincode.workspace = true
elliptic-curve = { workspace = true, features = ["hash2curve"] }
rsa = { workspace = true, features = ["sha2"] }
static_assertions = { workspace = true }
ark-secp256r1 = { workspace = true }
ark-ec = { workspace = true }
ark-ff = { workspace = true }
ark-serialize = { workspace = true }
lazy_static = { workspace = true }
fastcrypto-derive = { workspace = true }
serde_json = { workspace = true }
num-bigint = { workspace = true }
bech32 = { workspace = true }
getrandom = { workspace = true, features = ["js"], optional = true }

# Required for bulletproofs
bulletproofs = { workspace = true, optional = true }
merlin = { workspace = true, optional = true }

# Required for the unsecure signature and hash schemes
twox-hash = { workspace = true, optional = true }
serde-big-array = { workspace = true, optional = true }

# Required for the aes feature
aes = { workspace = true, optional = true }
ctr = { workspace = true, optional = true }
cbc = { workspace = true, features = ["std"], optional = true }
aes-gcm = { workspace = true, optional = true }
aes-gcm-siv = { workspace = true, optional = true }

[[bench]]
name = "crypto"
harness = false
required-features = ["experimental"]

[[bench]]
name = "encoding"
harness = false

[[bench]]
name = "ecvrf_ristretto"
harness = false

[[bench]]
name = "groups"
harness = false

[[bench]]
name = "mskr"
harness = false
required-features = ["experimental"]

[[bench]]
name = "serialize"
harness = false

[[bench]]
name = "hash"
harness = false

[features]
default = []

# Allow copying keys
copy_key = []

# Enable the unsecure signature and hash schemes for benchmarking.
unsecure_schemes = ["dep:twox-hash", "dep:serde-big-array"]

# Used for feature that are not yet audited.
experimental = ["dep:bulletproofs", "dep:merlin"]

# Include AES and its modes.
aes = ["dep:aes", "dep:cbc", "dep:aes-gcm", "dep:ctr", "dep:aes-gcm-siv"]

# Needs to be enabled for wasm targets.
wasm = ["dep:getrandom"]

[dev-dependencies]
criterion = { workspace = true }
k256 = { workspace = true, features = ["ecdsa", "sha256", "keccak256"] }
proptest = { workspace = true }
serde-reflection = { workspace = true }
wycheproof = { workspace = true }
faster-hex = { workspace = true }
rustc-hex = { workspace = true }
base64 = { workspace = true }
radix64 = { workspace = true }
base58 = { workspace = true }
rust-base58 = { workspace = true }
bcs.workspace = true
